From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Mon, 11 Aug 2025 23:53:27 -0700
Subject: [PATCH] Disable Criterion Trigger Config

This is as a base feature patch since this contains 23 files of 1 line changes
which is completely stupid to have for a single feature in single-file patches

diff --git a/net/minecraft/advancements/critereon/AnyBlockInteractionTrigger.java b/net/minecraft/advancements/critereon/AnyBlockInteractionTrigger.java
index 16eae53668541284444a08d4ffe13a426cd43381..10f4875ef78b4496f1640694063c2b9a09c2ce06 100644
--- a/net/minecraft/advancements/critereon/AnyBlockInteractionTrigger.java
+++ b/net/minecraft/advancements/critereon/AnyBlockInteractionTrigger.java
@@ -20,6 +20,7 @@ public class AnyBlockInteractionTrigger extends SimpleCriterionTrigger<AnyBlockI
     }
 
     public void trigger(ServerPlayer player, BlockPos pos, ItemStack stack) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         ServerLevel serverLevel = player.level();
         BlockState blockState = serverLevel.getBlockState(pos);
         LootParams lootParams = new LootParams.Builder(serverLevel)
diff --git a/net/minecraft/advancements/critereon/BredAnimalsTrigger.java b/net/minecraft/advancements/critereon/BredAnimalsTrigger.java
index 1e0737fbaf1502830b98b68a329c857ac71845ff..abf112402e1ddd22e267798a06020b7658da3af5 100644
--- a/net/minecraft/advancements/critereon/BredAnimalsTrigger.java
+++ b/net/minecraft/advancements/critereon/BredAnimalsTrigger.java
@@ -18,6 +18,7 @@ public class BredAnimalsTrigger extends SimpleCriterionTrigger<BredAnimalsTrigge
     }
 
     public void trigger(ServerPlayer player, Animal parent, Animal partner, @Nullable AgeableMob child) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         LootContext lootContext = EntityPredicate.createContext(player, parent);
         LootContext lootContext1 = EntityPredicate.createContext(player, partner);
         LootContext lootContext2 = child != null ? EntityPredicate.createContext(player, child) : null;
diff --git a/net/minecraft/advancements/critereon/ChanneledLightningTrigger.java b/net/minecraft/advancements/critereon/ChanneledLightningTrigger.java
index 495e1e1e107f2872d700c7ce96aebed9c3575ac9..69716d7342aec47a443da43fa01eea49c60f96bd 100644
--- a/net/minecraft/advancements/critereon/ChanneledLightningTrigger.java
+++ b/net/minecraft/advancements/critereon/ChanneledLightningTrigger.java
@@ -19,6 +19,7 @@ public class ChanneledLightningTrigger extends SimpleCriterionTrigger<ChanneledL
     }
 
     public void trigger(ServerPlayer player, Collection<? extends Entity> entityTriggered) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         List<LootContext> list = entityTriggered.stream().map(entity -> EntityPredicate.createContext(player, entity)).collect(Collectors.toList());
         this.trigger(player, instance -> instance.matches(list));
     }
diff --git a/net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java b/net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java
index 6d1e3c50fb2af9cf9bea10026b5764536ec84e3b..5864a10f9e9a66428cbca463b74bde1090ae5265 100644
--- a/net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java
+++ b/net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java
@@ -17,6 +17,7 @@ public class CuredZombieVillagerTrigger extends SimpleCriterionTrigger<CuredZomb
     }
 
     public void trigger(ServerPlayer player, Zombie zombie, Villager villager) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         LootContext lootContext = EntityPredicate.createContext(player, zombie);
         LootContext lootContext1 = EntityPredicate.createContext(player, villager);
         this.trigger(player, instance -> instance.matches(lootContext, lootContext1));
diff --git a/net/minecraft/advancements/critereon/DefaultBlockInteractionTrigger.java b/net/minecraft/advancements/critereon/DefaultBlockInteractionTrigger.java
index 1f11b5cb53302d68fa61daf6f335820765698c89..3d73fd202e8017b58ac153f67236cf2c1d37beb6 100644
--- a/net/minecraft/advancements/critereon/DefaultBlockInteractionTrigger.java
+++ b/net/minecraft/advancements/critereon/DefaultBlockInteractionTrigger.java
@@ -19,6 +19,7 @@ public class DefaultBlockInteractionTrigger extends SimpleCriterionTrigger<Defau
     }
 
     public void trigger(ServerPlayer player, BlockPos pos) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         ServerLevel serverLevel = player.level();
         BlockState blockState = serverLevel.getBlockState(pos);
         LootParams lootParams = new LootParams.Builder(serverLevel)
diff --git a/net/minecraft/advancements/critereon/DistanceTrigger.java b/net/minecraft/advancements/critereon/DistanceTrigger.java
index 9cf113f3a3576e077120a43a65e14e1fc0800598..6c41e35e418c8afb369c605db9dc8aa07f6ec121 100644
--- a/net/minecraft/advancements/critereon/DistanceTrigger.java
+++ b/net/minecraft/advancements/critereon/DistanceTrigger.java
@@ -16,6 +16,7 @@ public class DistanceTrigger extends SimpleCriterionTrigger<DistanceTrigger.Trig
     }
 
     public void trigger(ServerPlayer player, Vec3 position) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         Vec3 vec3 = player.position();
         this.trigger(player, instance -> instance.matches(player.level(), position, vec3));
     }
diff --git a/net/minecraft/advancements/critereon/EffectsChangedTrigger.java b/net/minecraft/advancements/critereon/EffectsChangedTrigger.java
index e1c5bbc496442f10a151e9adca107e76119ae429..17499729893fde345b62b5f8379c599c1a47aacb 100644
--- a/net/minecraft/advancements/critereon/EffectsChangedTrigger.java
+++ b/net/minecraft/advancements/critereon/EffectsChangedTrigger.java
@@ -18,6 +18,7 @@ public class EffectsChangedTrigger extends SimpleCriterionTrigger<EffectsChanged
     }
 
     public void trigger(ServerPlayer player, @Nullable Entity source) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         LootContext lootContext = source != null ? EntityPredicate.createContext(player, source) : null;
         this.trigger(player, instance -> instance.matches(player, lootContext));
     }
diff --git a/net/minecraft/advancements/critereon/FallAfterExplosionTrigger.java b/net/minecraft/advancements/critereon/FallAfterExplosionTrigger.java
index b7f9433a4114781a40eb337012e948e2f261fe1d..f68362f97ee5a9e0b931179e778254d968442aee 100644
--- a/net/minecraft/advancements/critereon/FallAfterExplosionTrigger.java
+++ b/net/minecraft/advancements/critereon/FallAfterExplosionTrigger.java
@@ -19,6 +19,7 @@ public class FallAfterExplosionTrigger extends SimpleCriterionTrigger<FallAfterE
     }
 
     public void trigger(ServerPlayer player, Vec3 pos, @Nullable Entity entity) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         Vec3 vec3 = player.position();
         LootContext lootContext = entity != null ? EntityPredicate.createContext(player, entity) : null;
         this.trigger(player, triggerInstance -> triggerInstance.matches(player.level(), pos, vec3, lootContext));
diff --git a/net/minecraft/advancements/critereon/FishingRodHookedTrigger.java b/net/minecraft/advancements/critereon/FishingRodHookedTrigger.java
index 338a24477b987ac829b7be0e7ce8c2d3bfbb4a49..3a6f45ee1ad34688a98cadf0e6b24c5079c9020d 100644
--- a/net/minecraft/advancements/critereon/FishingRodHookedTrigger.java
+++ b/net/minecraft/advancements/critereon/FishingRodHookedTrigger.java
@@ -21,6 +21,7 @@ public class FishingRodHookedTrigger extends SimpleCriterionTrigger<FishingRodHo
     }
 
     public void trigger(ServerPlayer player, ItemStack rod, FishingHook entity, Collection<ItemStack> stacks) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         LootContext lootContext = EntityPredicate.createContext(player, (Entity)(entity.getHookedIn() != null ? entity.getHookedIn() : entity));
         this.trigger(player, instance -> instance.matches(rod, lootContext, stacks));
     }
diff --git a/net/minecraft/advancements/critereon/InventoryChangeTrigger.java b/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
index 3ff3186954a96127eb81236ab40154e75a9a9325..b7ccd4f59d0f0aff677950bf576d9d01cc1b0f85 100644
--- a/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
+++ b/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
@@ -21,6 +21,7 @@ public class InventoryChangeTrigger extends SimpleCriterionTrigger<InventoryChan
     }
 
     public void trigger(ServerPlayer player, Inventory inventory, ItemStack stack) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         int i = 0;
         int i1 = 0;
         int i2 = 0;
diff --git a/net/minecraft/advancements/critereon/ItemUsedOnLocationTrigger.java b/net/minecraft/advancements/critereon/ItemUsedOnLocationTrigger.java
index c08ec1b52c399dd92b49fa639c185e8ea68d68af..030c1b2434370ad29ce2ad683035bd45104ca2cb 100644
--- a/net/minecraft/advancements/critereon/ItemUsedOnLocationTrigger.java
+++ b/net/minecraft/advancements/critereon/ItemUsedOnLocationTrigger.java
@@ -30,6 +30,7 @@ public class ItemUsedOnLocationTrigger extends SimpleCriterionTrigger<ItemUsedOn
     }
 
     public void trigger(ServerPlayer player, BlockPos pos, ItemStack stack) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         ServerLevel serverLevel = player.level();
         BlockState blockState = serverLevel.getBlockState(pos);
         LootParams lootParams = new LootParams.Builder(serverLevel)
diff --git a/net/minecraft/advancements/critereon/KilledByArrowTrigger.java b/net/minecraft/advancements/critereon/KilledByArrowTrigger.java
index 10545152a39d89c91bc1113ffbe99c7e25d2517f..b03141c72c1489d8d8a63a3398fbaf39263c539e 100644
--- a/net/minecraft/advancements/critereon/KilledByArrowTrigger.java
+++ b/net/minecraft/advancements/critereon/KilledByArrowTrigger.java
@@ -28,6 +28,7 @@ public class KilledByArrowTrigger extends SimpleCriterionTrigger<KilledByArrowTr
     }
 
     public void trigger(ServerPlayer player, Collection<Entity> victims, @Nullable ItemStack firedFromWeapon) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         List<LootContext> list = Lists.newArrayList();
         Set<EntityType<?>> set = Sets.newHashSet();
 
diff --git a/net/minecraft/advancements/critereon/KilledTrigger.java b/net/minecraft/advancements/critereon/KilledTrigger.java
index 16b5700674fc8c52fc2a016201b91efe6dc94273..3567c47b42e979cd246bb2e2bb315093dd0bacbe 100644
--- a/net/minecraft/advancements/critereon/KilledTrigger.java
+++ b/net/minecraft/advancements/critereon/KilledTrigger.java
@@ -17,6 +17,7 @@ public class KilledTrigger extends SimpleCriterionTrigger<KilledTrigger.TriggerI
     }
 
     public void trigger(ServerPlayer player, Entity entity, DamageSource source) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         LootContext lootContext = EntityPredicate.createContext(player, entity);
         this.trigger(player, instance -> instance.matches(player, lootContext, source));
     }
diff --git a/net/minecraft/advancements/critereon/LightningStrikeTrigger.java b/net/minecraft/advancements/critereon/LightningStrikeTrigger.java
index 2753dfd5c107a083fdfa4101ffc65be7ccfe254c..faeca701ce3e256088952dc3bb2f0553a758b422 100644
--- a/net/minecraft/advancements/critereon/LightningStrikeTrigger.java
+++ b/net/minecraft/advancements/critereon/LightningStrikeTrigger.java
@@ -19,6 +19,7 @@ public class LightningStrikeTrigger extends SimpleCriterionTrigger<LightningStri
     }
 
     public void trigger(ServerPlayer player, LightningBolt lightning, List<Entity> nearbyEntities) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         List<LootContext> list = nearbyEntities.stream().map(entity -> EntityPredicate.createContext(player, entity)).collect(Collectors.toList());
         LootContext lootContext = EntityPredicate.createContext(player, lightning);
         this.trigger(player, instance -> instance.matches(lootContext, list));
diff --git a/net/minecraft/advancements/critereon/PickedUpItemTrigger.java b/net/minecraft/advancements/critereon/PickedUpItemTrigger.java
index c65b9d9edb3444065487f0155d594529f02d28e6..2de87b5cd254faaabba8472886c2e6d257013278 100644
--- a/net/minecraft/advancements/critereon/PickedUpItemTrigger.java
+++ b/net/minecraft/advancements/critereon/PickedUpItemTrigger.java
@@ -18,6 +18,7 @@ public class PickedUpItemTrigger extends SimpleCriterionTrigger<PickedUpItemTrig
     }
 
     public void trigger(ServerPlayer player, ItemStack stack, @Nullable Entity entity) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         LootContext lootContext = EntityPredicate.createContext(player, entity);
         this.trigger(player, instance -> instance.matches(player, stack, lootContext));
     }
diff --git a/net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java b/net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java
index fc2b4969a42ea91b4855ecf0c1ead39bd9d404bb..607a5a66c90f1f2e4fa654bb677db25a1f8483e1 100644
--- a/net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java
+++ b/net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java
@@ -17,6 +17,7 @@ public class PlayerHurtEntityTrigger extends SimpleCriterionTrigger<PlayerHurtEn
     }
 
     public void trigger(ServerPlayer player, Entity entity, DamageSource source, float amountDealt, float amountTaken, boolean blocked) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         LootContext lootContext = EntityPredicate.createContext(player, entity);
         this.trigger(player, instance -> instance.matches(player, lootContext, source, amountDealt, amountTaken, blocked));
     }
diff --git a/net/minecraft/advancements/critereon/PlayerInteractTrigger.java b/net/minecraft/advancements/critereon/PlayerInteractTrigger.java
index 906a40f079b5fe413d79240a487bc09494637f93..1c9feca7cb3488be6a9587b631b6f75b4c5e9fbf 100644
--- a/net/minecraft/advancements/critereon/PlayerInteractTrigger.java
+++ b/net/minecraft/advancements/critereon/PlayerInteractTrigger.java
@@ -17,6 +17,7 @@ public class PlayerInteractTrigger extends SimpleCriterionTrigger<PlayerInteract
     }
 
     public void trigger(ServerPlayer player, ItemStack item, Entity entity) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         LootContext lootContext = EntityPredicate.createContext(player, entity);
         this.trigger(player, instance -> instance.matches(item, lootContext));
     }
diff --git a/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java b/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
index a82d84283632342bd30bc3449983431ba43583e0..72de7e86a2a7a9362b7c9256158409145264f67a 100644
--- a/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
+++ b/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
@@ -39,6 +39,7 @@ public abstract class SimpleCriterionTrigger<T extends SimpleCriterionTrigger.Si
     }
 
     protected void trigger(ServerPlayer player, Predicate<T> testTrigger) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         PlayerAdvancements advancements = player.getAdvancements();
         Set<CriterionTrigger.Listener<T>> set = (Set) advancements.criterionData.get(this); // Paper - fix PlayerAdvancements leak
         if (set != null && !set.isEmpty()) {
diff --git a/net/minecraft/advancements/critereon/SummonedEntityTrigger.java b/net/minecraft/advancements/critereon/SummonedEntityTrigger.java
index 19a1d471b877e5a9c87b940ab922a3d378ab09b2..7f7b3a46811648f2da46455f51f57b18444301dd 100644
--- a/net/minecraft/advancements/critereon/SummonedEntityTrigger.java
+++ b/net/minecraft/advancements/critereon/SummonedEntityTrigger.java
@@ -16,6 +16,7 @@ public class SummonedEntityTrigger extends SimpleCriterionTrigger<SummonedEntity
     }
 
     public void trigger(ServerPlayer player, Entity entity) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         LootContext lootContext = EntityPredicate.createContext(player, entity);
         this.trigger(player, instance -> instance.matches(lootContext));
     }
diff --git a/net/minecraft/advancements/critereon/TameAnimalTrigger.java b/net/minecraft/advancements/critereon/TameAnimalTrigger.java
index 6912c107b873983b8d32a45decba098e8b26e8af..41ef3167a5337539e987c87b3925a8b784ffadfe 100644
--- a/net/minecraft/advancements/critereon/TameAnimalTrigger.java
+++ b/net/minecraft/advancements/critereon/TameAnimalTrigger.java
@@ -16,6 +16,7 @@ public class TameAnimalTrigger extends SimpleCriterionTrigger<TameAnimalTrigger.
     }
 
     public void trigger(ServerPlayer player, Animal entity) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         LootContext lootContext = EntityPredicate.createContext(player, entity);
         this.trigger(player, instance -> instance.matches(lootContext));
     }
diff --git a/net/minecraft/advancements/critereon/TargetBlockTrigger.java b/net/minecraft/advancements/critereon/TargetBlockTrigger.java
index c0c46c294f7965751ab9b083ffcd932a4f45707a..6d234c0c8e025907108db6599e3ddc2a20db31e6 100644
--- a/net/minecraft/advancements/critereon/TargetBlockTrigger.java
+++ b/net/minecraft/advancements/critereon/TargetBlockTrigger.java
@@ -17,6 +17,7 @@ public class TargetBlockTrigger extends SimpleCriterionTrigger<TargetBlockTrigge
     }
 
     public void trigger(ServerPlayer player, Entity projectile, Vec3 vector, int signalStrength) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         LootContext lootContext = EntityPredicate.createContext(player, projectile);
         this.trigger(player, instance -> instance.matches(lootContext, vector, signalStrength));
     }
diff --git a/net/minecraft/advancements/critereon/TradeTrigger.java b/net/minecraft/advancements/critereon/TradeTrigger.java
index 2f008f4dab4ad7ab2bbfd08b379089675271d9aa..79fc8bf0b30bbe9377524c8f5e1183414fb541aa 100644
--- a/net/minecraft/advancements/critereon/TradeTrigger.java
+++ b/net/minecraft/advancements/critereon/TradeTrigger.java
@@ -17,6 +17,7 @@ public class TradeTrigger extends SimpleCriterionTrigger<TradeTrigger.TriggerIns
     }
 
     public void trigger(ServerPlayer player, AbstractVillager villager, ItemStack stack) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         LootContext lootContext = EntityPredicate.createContext(player, villager);
         this.trigger(player, instance -> instance.matches(lootContext, stack));
     }
diff --git a/net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java b/net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java
index a6202974bea119189e8ded219648614b358e5cc2..c09bdead868a1d67973b3ddb146eeeab3c5b109d 100644
--- a/net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java
+++ b/net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java
@@ -13,6 +13,7 @@ public class UsedEnderEyeTrigger extends SimpleCriterionTrigger<UsedEnderEyeTrig
     }
 
     public void trigger(ServerPlayer player, BlockPos pos) {
+        if (io.canvasmc.canvas.Config.INSTANCE.disableCriterionTrigger) return; // Canvas - disable criterion trigger config
         double d = player.getX() - pos.getX();
         double d1 = player.getZ() - pos.getZ();
         double d2 = d * d + d1 * d1;
