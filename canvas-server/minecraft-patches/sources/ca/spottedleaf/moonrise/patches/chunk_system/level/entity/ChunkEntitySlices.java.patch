--- a/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/ChunkEntitySlices.java
+++ b/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/ChunkEntitySlices.java
@@ -529,6 +_,14 @@
             final int max = Mth.clamp(Mth.floor(box.maxY + 2.0) >> 4, minSection, maxSection);
 
             final BasicEntityList<Entity>[] entitiesBySection = this.entitiesBySection;
+            // Leaf start - optimize getEntities
+            // Cache AABB fields to local variables to reduce field accesses inside the hot loop.
+            final double boxMinX = box.minX;
+            final double boxMinY = box.minY;
+            final double boxMinZ = box.minZ;
+            final double boxMaxX = box.maxX;
+            final double boxMaxY = box.maxY;
+            final double boxMaxZ = box.maxZ;
 
             for (int section = min; section <= max; ++section) {
                 final BasicEntityList<Entity> list = entitiesBySection[section - minSection];
@@ -538,11 +_,18 @@
                 }
 
                 final Entity[] storage = list.storage;
+                final int len = Math.min(storage.length, list.size());
 
-                for (int i = 0, len = Math.min(storage.length, list.size()); i < len; ++i) {
+                for (int i = 0; i < len; ++i) {
                     final Entity entity = storage[i];
+                    if (entity == null || entity == except) {
+                        continue;
+                    }
 
-                    if (entity == null || entity == except || !entity.getBoundingBox().intersects(box)) {
+                    // Inline AABB#intersects to avoid a method call and use the cached AABB fields.
+                    final AABB entityBB = entity.getBoundingBox();
+                    if (entityBB.maxX <= boxMinX || entityBB.minX >= boxMaxX || entityBB.maxY <= boxMinY || entityBB.minY >= boxMaxY || entityBB.maxZ <= boxMinZ || entityBB.minZ >= boxMaxZ) {
+            // Leaf end - optimize getEntities
                         continue;
                     }
 
@@ -569,6 +_,15 @@
 
             final BasicEntityList<Entity>[] entitiesBySection = this.entitiesBySection;
 
+            // Leaf start - optimize getEntities
+            // Cache AABB fields to local variables to reduce field accesses inside the hot loop.
+            final double boxMinX = box.minX;
+            final double boxMinY = box.minY;
+            final double boxMinZ = box.minZ;
+            final double boxMaxX = box.maxX;
+            final double boxMaxY = box.maxY;
+            final double boxMaxZ = box.maxZ;
+
             for (int section = min; section <= max; ++section) {
                 final BasicEntityList<Entity> list = entitiesBySection[section - minSection];
 
@@ -577,11 +_,19 @@
                 }
 
                 final Entity[] storage = list.storage;
+                final int len = Math.min(storage.length, list.size());
 
-                for (int i = 0, len = Math.min(storage.length, list.size()); i < len; ++i) {
+                for (int i = 0; i < len; ++i) {
                     final Entity entity = storage[i];
 
-                    if (entity == null || entity == except || !entity.getBoundingBox().intersects(box)) {
+                    if (entity == null || entity == except) {
+                        continue;
+                    }
+
+                    // Inline AABB#intersects to avoid a method call and use the cached AABB fields.
+                    final AABB entityBB = entity.getBoundingBox();
+                    if (entityBB.maxX <= boxMinX || entityBB.minX >= boxMaxX || entityBB.maxY <= boxMinY || entityBB.minY >= boxMaxY || entityBB.maxZ <= boxMinZ || entityBB.minZ >= boxMaxZ) {
+            // Leaf end - optimize getEntities
                         continue;
                     }
 
