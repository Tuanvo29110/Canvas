--- a/io/papermc/paper/threadedregions/RegionShutdownThread.java
+++ b/io/papermc/paper/threadedregions/RegionShutdownThread.java
@@ -25,6 +_,7 @@
         this.setUncaughtExceptionHandler((thread, thr) -> {
             LOGGER.error("Error shutting down server", thr);
         });
+        this.setPriority(10); // Canvas - bump priority
     }
 
     static ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> getRegion() {
@@ -138,6 +_,7 @@
                         player.containerMenu.setCarried(ItemStack.EMPTY);
                         player.drop(carried, false);
                     }
+                    if (player.isTemporarilyBlocking) player.releaseUsingItem(); // Canvas - implement sword blocking
                 } catch (final Throwable thr) {
                     LOGGER.error("Failed to close player inventory for player: " + player, thr);
                 }
@@ -148,9 +_,16 @@
             this.shuttingDown = null;
         }
     }
+    // Canvas start - region threading
+    private static volatile boolean isShutdown = false;
+    public static boolean isShutdown() {
+        return isShutdown;
+    }
+    // Canvas end - region threading
 
     @Override
     public final void run() {
+        isShutdown = true; // Canvas - region threading
         // await scheduler termination
         LOGGER.info("Awaiting scheduler termination for 60s...");
         if (TickRegions.getScheduler().halt(true, TimeUnit.SECONDS.toNanos(60L))) {
