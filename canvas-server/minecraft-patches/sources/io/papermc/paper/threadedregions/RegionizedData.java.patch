--- a/io/papermc/paper/threadedregions/RegionizedData.java
+++ b/io/papermc/paper/threadedregions/RegionizedData.java
@@ -1,10 +_,12 @@
 package io.papermc.paper.threadedregions;
 
 import ca.spottedleaf.concurrentutil.util.Validate;
+import io.papermc.paper.threadedregions.TickRegions.TickRegionData;
 import it.unimi.dsi.fastutil.longs.Long2ReferenceOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet;
 import net.minecraft.server.level.ServerLevel;
 import javax.annotation.Nullable;
+import java.util.function.Function;
 import java.util.function.Supplier;
 
 /**
@@ -42,7 +_,7 @@
  *             // callback is left out of this example
  *             // note: world != null here
  *             public final RegionizedData<EntityTickList> entityTickLists =
- *                 new RegionizedData<>(this, () -> new EntityTickList(), ...);
+ *                 new RegionizedData<>(this, (data) -> new EntityTickList(), ...); // Canvas - rewrite scheduler
  *
  *             public void addTickingEntity(Entity e) {
  *                 // What we expect here is that this world is the
@@ -86,7 +_,7 @@
  *             // note: world == null here, because this RegionizedData object
  *             // is not instantiated per world, but rather globally.
  *             public final RegionizedData<TickTimes> tickTimes =
- *                  new RegionizedData<>(null, () -> new TickTimes(), ...);
+ *                  new RegionizedData<>(null, (data) -> new TickTimes(), ...); // Canvas - rewrite scheduler
  *         }
  *         }
  *     </pre>
@@ -97,7 +_,7 @@
 public final class RegionizedData<T> {
 
     private final ServerLevel world;
-    private final Supplier<T> initialValueSupplier;
+    private final Function<TickRegionData ,T> initialValueSupplier; // Canvas - rewrite scheduler
     private final RegioniserCallback<T> callback;
 
     /**
@@ -119,14 +_,14 @@
      * @param supplier Initial value supplier used to lazy initialise region data.
      * @param callback Region callback to manage this regionised data.
      */
-    public RegionizedData(final ServerLevel world, final Supplier<T> supplier, final RegioniserCallback<T> callback) {
+    public RegionizedData(final ServerLevel world, final Function<TickRegionData,T> supplier, final RegioniserCallback<T> callback) { // Canvas - rewrite scheduler
         this.world = world;
         this.initialValueSupplier = Validate.notNull(supplier, "Supplier may not be null.");
         this.callback = Validate.notNull(callback, "Regioniser callback may not be null.");
     }
 
-    T createNewValue() {
-        return Validate.notNull(this.initialValueSupplier.get(), "Initial value supplier may not return null");
+    T createNewValue(final TickRegionData regionData) { // Canvas - rewrite scheduler
+        return Validate.notNull(this.initialValueSupplier.apply(regionData), "Initial value supplier may not return null"); // Canvas - rewrite scheduler
     }
 
     RegioniserCallback<T> getCallback() {
@@ -141,7 +_,7 @@
      *                               and the current ticking region's world does not match this {@code RegionizedData}'s world.
      */
     public @Nullable T get() {
-        final ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> region =
+        final ThreadedRegionizer.ThreadedRegion<TickRegionData, TickRegions.TickRegionSectionData> region = // Canvas - rewrite scheduler
             TickRegionScheduler.getCurrentRegion();
 
         if (region == null) {
