--- a/io/papermc/paper/threadedregions/RegionizedTaskQueue.java
+++ b/io/papermc/paper/threadedregions/RegionizedTaskQueue.java
@@ -80,7 +_,13 @@
             this.world = world;
         }
 
-        private boolean executeGlobalChunkTask() {
+        // Canvas start - rewrite scheduler
+        public boolean hasGlobalChunkTasks() {
+            return !this.globalChunkTask.isEmpty();
+        }
+
+        public boolean executeGlobalChunkTask() {
+        // Canvas end
             final Runnable run = this.globalChunkTask.poll();
             if (run != null) {
                 run.run();
@@ -95,6 +_,7 @@
 
         public void pushGlobalChunkTask(final Runnable run) {
             this.globalChunkTask.add(run);
+            TickRegions.getScheduler().setHasTasks(RegionizedServer.getGlobalTickData()); // Canvas - rewrite scheduler
         }
 
         private PrioritisedQueue getQueue(final boolean synchronise, final int chunkX, final int chunkZ, final boolean isChunkTask) {
@@ -217,12 +_,14 @@
     }
 
     public static final class RegionTaskQueueData {
-        private final PrioritisedQueue tickTaskQueue = new PrioritisedQueue();
-        private final PrioritisedQueue chunkQueue = new PrioritisedQueue();
+        private final PrioritisedQueue tickTaskQueue = new PrioritisedQueue(this); // Canvas - rewrite scheduler
+        private final PrioritisedQueue chunkQueue = new PrioritisedQueue(this); // Canvas - rewrite scheduler
         private final WorldRegionTaskData worldRegionTaskData;
+        private final TickRegions.TickRegionData regionData; // Canvas - rewrite scheduler
 
-        public RegionTaskQueueData(final WorldRegionTaskData worldRegionTaskData) {
+        public RegionTaskQueueData(final WorldRegionTaskData worldRegionTaskData, final TickRegions.TickRegionData regionData) { // Canvas - rewrite scheduler
             this.worldRegionTaskData = worldRegionTaskData;
+            this.regionData = regionData; // Canvas - rewrite scheduler
         }
 
         void mergeInto(final RegionTaskQueueData into) {
@@ -282,6 +_,15 @@
                 this.queues[i] = new ArrayDeque<>();
             }
         }
+        // Canvas start - rewrite scheduler
+
+        private final RegionTaskQueueData queue;
+
+        private PrioritisedQueue(final RegionTaskQueueData queue) {
+            this.queue = queue;
+        }
+
+        // Canvas end
         private boolean isDestroyed;
 
         public int getScheduledTasks() {
@@ -610,6 +_,7 @@
                         continue;
                     }
 
+                    queue.queue.regionData.setHasTasks(); // Canvas - rewrite scheduler
                     // successfully queued
                     return true;
                 }
