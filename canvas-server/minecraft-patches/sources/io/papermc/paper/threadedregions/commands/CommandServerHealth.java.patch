--- a/io/papermc/paper/threadedregions/commands/CommandServerHealth.java
+++ b/io/papermc/paper/threadedregions/commands/CommandServerHealth.java
@@ -56,14 +_,14 @@
     }
 
     private static Component formatRegionInfo(final String prefix, final double util, final double mspt, final double tps,
-                                              final boolean newline) {
+                                              final boolean newline, final io.papermc.paper.threadedregions.TickRegionScheduler.RegionScheduleHandle regionHandle) { // Canvas - rewrite scheduler
         return Component.text()
             .append(Component.text(prefix, PRIMARY, TextDecoration.BOLD))
-            .append(Component.text(ONE_DECIMAL_PLACES.get().format(util * 100.0), CommandUtil.getUtilisationColourRegion(util)))
+            .append(Component.text(ONE_DECIMAL_PLACES.get().format(util * 100.0), regionHandle.ticksToSprint > 0 ? CommandUtil.SPRINTING_COLOR : CommandUtil.getUtilisationColourRegion(util))) // Canvas - rewrite scheduler
             .append(Component.text("% util at ", PRIMARY))
-            .append(Component.text(TWO_DECIMAL_PLACES.get().format(mspt), CommandUtil.getColourForMSPT(mspt)))
+            .append(Component.text(TWO_DECIMAL_PLACES.get().format(mspt), regionHandle.ticksToSprint > 0 ? CommandUtil.SPRINTING_COLOR : CommandUtil.getColourForMSPT(mspt))) // Canvas - rewrite scheduler
             .append(Component.text(" MSPT at ", PRIMARY))
-            .append(Component.text(TWO_DECIMAL_PLACES.get().format(tps), CommandUtil.getColourForTPS(tps)))
+            .append(Component.text(TWO_DECIMAL_PLACES.get().format(tps), regionHandle.ticksToSprint > 0 ? CommandUtil.SPRINTING_COLOR : CommandUtil.getColourForTPS(tps))) // Canvas - rewrite scheduler
             .append(Component.text(" TPS" + (newline ? "\n" : ""), PRIMARY))
             .build();
     }
@@ -114,10 +_,10 @@
             .append(Component.text(":\n", PRIMARY))
 
             .append(
-                formatRegionInfo("15s: ", util15s, mspt15s, tps15s, true)
+                formatRegionInfo("15s: ", util15s, mspt15s, tps15s, true, region.getData().getRegionSchedulingHandle()) // Canvas - rewrite scheduler
             )
             .append(
-                formatRegionInfo("1m: ", util1m, mspt1m, tps1m, true)
+                formatRegionInfo("1m: ", util1m, mspt1m, tps1m, true, region.getData().getRegionSchedulingHandle()) // Canvas - rewrite scheduler
             )
             .append(
                 formatRegionStats(region.getData().getRegionStats(), false)
@@ -251,11 +_,11 @@
                 .append(Component.text(":\n", PRIMARY))
 
                 .append(Component.text("    ", PRIMARY))
-                .append(Component.text(ONE_DECIMAL_PLACES.get().format(util * 100.0), CommandUtil.getUtilisationColourRegion(util)))
+                .append(Component.text(ONE_DECIMAL_PLACES.get().format(util * 100.0), region.getData().getRegionSchedulingHandle().ticksToSprint > 0 ? CommandUtil.SPRINTING_COLOR : CommandUtil.getUtilisationColourRegion(util))) // Canvas - rewrite scheduler
                 .append(Component.text("% util at ", PRIMARY))
-                .append(Component.text(TWO_DECIMAL_PLACES.get().format(mspt), CommandUtil.getColourForMSPT(mspt)))
+                .append(Component.text(TWO_DECIMAL_PLACES.get().format(mspt), region.getData().getRegionSchedulingHandle().ticksToSprint > 0 ? CommandUtil.SPRINTING_COLOR : CommandUtil.getColourForMSPT(mspt))) // Canvas - rewrite scheduler
                 .append(Component.text(" MSPT at ", PRIMARY))
-                .append(Component.text(TWO_DECIMAL_PLACES.get().format(tps), CommandUtil.getColourForTPS(tps)))
+                .append(Component.text(TWO_DECIMAL_PLACES.get().format(tps), region.getData().getRegionSchedulingHandle().ticksToSprint > 0 ? CommandUtil.SPRINTING_COLOR : CommandUtil.getColourForTPS(tps))) // Canvas - rewrite scheduler
                 .append(Component.text(" TPS\n", PRIMARY))
 
                 .append(Component.text("    ", PRIMARY))
