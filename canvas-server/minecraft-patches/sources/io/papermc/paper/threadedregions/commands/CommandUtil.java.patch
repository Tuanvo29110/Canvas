--- a/io/papermc/paper/threadedregions/commands/CommandUtil.java
+++ b/io/papermc/paper/threadedregions/commands/CommandUtil.java
@@ -10,6 +_,16 @@
 import java.util.function.Function;
 
 public final class CommandUtil {
+    // Canvas start - rewrite scheduler
+    public static final TextColor SPRINTING_COLOR = NamedTextColor.LIGHT_PURPLE;
+    public static final double diff2MultTps = 0.1D;
+    public static final double diff5MultTps = 0.25D;
+    public static final double diff10MultTps = 0.5D;
+    public static final double diff15MultMspt = 0.3D;
+    public static final double diff25MultMspt = 0.5D;
+    public static final double diff35MultMspt = 0.7D;
+    public static final double diff40MultMspt = 0.8D;
+    // Canvas end - rewrite scheduler
 
     public static List<String> getSortedList(final Iterable<String> iterable) {
         final List<String> ret = new ArrayList<>();
@@ -64,39 +_,45 @@
     }
 
     public static TextColor getColourForTPS(final double tps) {
-        final double difference = Math.min(Math.abs(20.0 - tps), 20.0);
+        // Canvas start - rewrite scheduler
+        final float rate = io.papermc.paper.threadedregions.TickRegionScheduler.getTickRate();
+        final double difference = Math.min(Math.abs(rate - tps), rate);
         final double coordinate;
-        if (difference <= 2.0) {
+        if (difference <= (rate * diff2MultTps)) {
             // >= 18 tps
-            coordinate = 70.0 + ((140.0 - 70.0)/(0.0 - 2.0)) * (difference - 2.0);
-        } else if (difference <= 5.0) {
+            coordinate = 70.0 + ((140.0 - 70.0)/(0.0 - (rate * diff2MultTps))) * (difference - (rate * diff2MultTps));
+        } else if (difference <= (rate * diff5MultTps)) {
             // >= 15 tps
-            coordinate = 30.0 + ((70.0 - 30.0)/(2.0 - 5.0)) * (difference - 5.0);
-        } else if (difference <= 10.0) {
+            coordinate = 30.0 + ((70.0 - 30.0)/((rate * diff2MultTps) - (rate * diff5MultTps))) * (difference - (rate * diff5MultTps));
+        } else if (difference <= (rate * diff10MultTps)) {
             // >= 10 tps
-            coordinate = 10.0 + ((30.0 - 10.0)/(5.0 - 10.0)) * (difference - 10.0);
+            coordinate = 10.0 + ((30.0 - 10.0)/((rate * diff5MultTps) - (rate * diff10MultTps))) * (difference - (rate * diff10MultTps));
         } else {
             // >= 0.0 tps
-            coordinate = 0.0 + ((10.0 - 0.0)/(10.0 - 20.0)) * (difference - 20.0);
+            coordinate = 0.0 + ((10.0 - 0.0)/((rate * diff10MultTps) - rate)) * (difference - rate);
         }
+        // Canvas end - rewrite scheduler
 
         return TextColor.color(HSVLike.hsvLike((float)(coordinate / 360.0), 85.0f / 100.0f, 80.0f / 100.0f));
     }
 
     public static TextColor getColourForMSPT(final double mspt) {
-        final double clamped = Math.min(Math.abs(mspt), 50.0);
+        // Canvas start - rewrite scheduler
+        final float time = 1000 / io.papermc.paper.threadedregions.TickRegionScheduler.getTickRate();
+        final double clamped = Math.min(Math.abs(mspt), time);
         final double coordinate;
-        if (clamped <= 15.0) {
-            coordinate = 130.0 + ((140.0 - 130.0)/(0.0 - 15.0)) * (clamped - 15.0);
-        } else if (clamped <= 25.0) {
-            coordinate = 90.0 + ((130.0 - 90.0)/(15.0 - 25.0)) * (clamped - 25.0);
-        } else if (clamped <= 35.0) {
-            coordinate = 30.0 + ((90.0 - 30.0)/(25.0 - 35.0)) * (clamped - 35.0);
-        } else if (clamped <= 40.0) {
-            coordinate = 15.0 + ((30.0 - 15.0)/(35.0 - 40.0)) * (clamped - 40.0);
+        if (clamped <= (time * diff15MultMspt)) {
+            coordinate = 130.0 + ((140.0 - 130.0)/(0.0 - (time * diff15MultMspt))) * (clamped - (time * diff15MultMspt));
+        } else if (clamped <= (time * diff25MultMspt)) {
+            coordinate = 90.0 + ((130.0 - 90.0)/((time * diff15MultMspt) - (time * diff25MultMspt))) * (clamped - (time * diff25MultMspt));
+        } else if (clamped <= (time * diff35MultMspt)) {
+            coordinate = 30.0 + ((90.0 - 30.0)/((time * diff25MultMspt) - (time * diff35MultMspt))) * (clamped - (time * diff35MultMspt));
+        } else if (clamped <= (time * diff40MultMspt)) {
+            coordinate = 15.0 + ((30.0 - 15.0)/((time * diff35MultMspt) - (time * diff40MultMspt))) * (clamped - (time * diff40MultMspt));
         } else {
-            coordinate = 0.0 + ((15.0 - 0.0)/(40.0 - 50.0)) * (clamped - 50.0);
+            coordinate = 0.0 + ((15.0 - 0.0)/((time * diff40MultMspt) - time)) * (clamped - time);
         }
+        // Canvas end - rewrite scheduler
 
         return TextColor.color(HSVLike.hsvLike((float)(coordinate / 360.0), 85.0f / 100.0f, 80.0f / 100.0f));
     }
