--- a/net/minecraft/util/context/ContextMap.java
+++ b/net/minecraft/util/context/ContextMap.java
@@ -71,18 +_,36 @@
             return (T)this.params.get(key);
         }
 
+        // Canvas start - optimize ContextMap#create
         public ContextMap create(ContextKeySet contextKeySet) {
-            Set<ContextKey<?>> set = Sets.difference(this.params.keySet(), contextKeySet.allowed());
-            if (!set.isEmpty()) {
-                throw new IllegalArgumentException("Parameters not allowed in this parameter set: " + set);
-            } else {
-                Set<ContextKey<?>> set1 = Sets.difference(contextKeySet.required(), this.params.keySet());
-                if (!set1.isEmpty()) {
-                    throw new IllegalArgumentException("Missing required parameters: " + set1);
-                } else {
-                    return new ContextMap(this.params);
-                }
-            }
+            final Set<ContextKey<?>> allowed = contextKeySet.allowed();
+            final Set<ContextKey<?>> required = contextKeySet.required();
+            final Set<ContextKey<?>> params = this.params.keySet();
+
+            ContextKey<?> invalid = null;
+            for (ContextKey<?> key : params) {
+                if (!allowed.contains(key)) {
+                    invalid = key;
+                    break;
+                }
+            }
+            if (invalid != null) {
+                throw new IllegalArgumentException("Parameter not allowed in this parameter set: " + invalid);
+            }
+
+            ContextKey<?> missing = null;
+            for (ContextKey<?> key : required) {
+                if (!this.params.containsKey(key)) {
+                    missing = key;
+                    break;
+                }
+            }
+            if (missing != null) {
+                throw new IllegalArgumentException("Missing required parameter: " + missing);
+            }
+
+            return new ContextMap(this.params);
         }
+        // Canvas end - optimize ContextMap#create
     }
 }
