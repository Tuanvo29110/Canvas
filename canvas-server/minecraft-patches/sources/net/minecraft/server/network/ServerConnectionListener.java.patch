--- a/net/minecraft/server/network/ServerConnectionListener.java
+++ b/net/minecraft/server/network/ServerConnectionListener.java
@@ -48,12 +_,20 @@
 
 public class ServerConnectionListener {
     private static final Logger LOGGER = LogUtils.getLogger();
+    // Canvas start - Leaf - Bump netty to 4.2.x
+    /*
     public static final Supplier<NioEventLoopGroup> SERVER_EVENT_GROUP = Suppliers.memoize(
         () -> new NioEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Server IO #%d").setDaemon(true).setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(LOGGER)).build()) // Paper
     );
     public static final Supplier<EpollEventLoopGroup> SERVER_EPOLL_EVENT_GROUP = Suppliers.memoize(
         () -> new EpollEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(LOGGER)).build()) // Paper
     );
+    */
+    public static final Supplier<io.netty.channel.IoHandlerFactory> NIO_IO_HANDLE_FACTORY = io.netty.channel.nio.NioIoHandler::newFactory;
+    public static final Supplier<io.netty.channel.IoHandlerFactory> EPOLL_IO_HANDLE_FACTORY = io.netty.channel.epoll.EpollIoHandler::newFactory;
+    public static final Supplier<io.netty.channel.IoHandlerFactory> IO_URING_IO_HANDLE_FACTORY = io.netty.channel.uring.IoUringIoHandler::newFactory;
+    public static final Supplier<io.netty.channel.IoHandlerFactory> KQUEUE_IO_HANDLE_FACTORY = io.netty.channel.kqueue.KQueueIoHandler::newFactory;
+    // Canvas end - Leaf - Bump netty to 4.2.x
     final MinecraftServer server;
     public volatile boolean running;
     private final List<ChannelFuture> channels = Collections.synchronizedList(Lists.newArrayList());
@@ -87,7 +_,29 @@
         synchronized (this.channels) {
             Class<? extends io.netty.channel.ServerChannel> clazz; // Paper - Unix domain socket support
             EventLoopGroup eventLoopGroup;
-            if (Epoll.isAvailable() && this.server.isEpollEnabled()) {
+            // Canvas start - Leaf - Bump netty to 4.2.x
+            if (io.netty.channel.uring.IoUring.isAvailable() && this.server.isIoUringEnabled()) {
+                // Paper start - Unix domain socket support
+                if (address instanceof io.netty.channel.unix.DomainSocketAddress) {
+                    clazz = io.netty.channel.uring.IoUringServerDomainSocketChannel.class;
+                } else {
+                    clazz = io.netty.channel.uring.IoUringServerSocketChannel.class;
+                }
+                // Paper end - Unix domain socket supp
+                eventLoopGroup = createEventLoopGroup("IoUring", IO_URING_IO_HANDLE_FACTORY);
+                LOGGER.info("Using io_uring channel type");
+            } else if (io.netty.channel.kqueue.KQueue.isAvailable() && this.server.isKqueueEnabled()) {
+                // Paper start - Unix domain socket support
+                if (address instanceof io.netty.channel.unix.DomainSocketAddress) {
+                    clazz = io.netty.channel.kqueue.KQueueServerDomainSocketChannel.class;
+                } else {
+                    clazz = io.netty.channel.kqueue.KQueueServerSocketChannel.class;
+                }
+                // Paper end - Unix domain socket support
+                eventLoopGroup = createEventLoopGroup("Kqueue", KQUEUE_IO_HANDLE_FACTORY);
+                LOGGER.info("Using kqueue channel type");
+            } else if (Epoll.isAvailable() && this.server.isEpollEnabled()) {
+            // Canvas end - Leaf - Bump netty to 4.2.x
                 // Paper start - Unix domain socket support
                 if (address instanceof io.netty.channel.unix.DomainSocketAddress) {
                     clazz = io.netty.channel.epoll.EpollServerDomainSocketChannel.class;
@@ -95,12 +_,12 @@
                 clazz = EpollServerSocketChannel.class;
                 }
                 // Paper end - Unix domain socket support
-                eventLoopGroup = SERVER_EPOLL_EVENT_GROUP.get();
+                eventLoopGroup = createEventLoopGroup("Epoll", EPOLL_IO_HANDLE_FACTORY); // Canvas - Leaf - Bump netty to 4.2.x
                 LOGGER.info("Using epoll channel type");
             } else {
                 clazz = NioServerSocketChannel.class;
-                eventLoopGroup = SERVER_EVENT_GROUP.get();
-                LOGGER.info("Using default channel type");
+                eventLoopGroup = createEventLoopGroup("Nio", NIO_IO_HANDLE_FACTORY); // Canvas - Leaf - Bump netty to 4.2.x
+                LOGGER.info("Using default nio channel type"); // Canvas - Leaf - Bump netty to 4.2.x
             }
 
             // Paper start - Warn people with console access that HAProxy is in use.
@@ -198,6 +_,19 @@
     }
     // CraftBukkit end
 
+    // Canvas start - Leaf - Bump netty to 4.2.x
+    public EventLoopGroup createEventLoopGroup(final String name, final Supplier<io.netty.channel.IoHandlerFactory> ioHandlerFactorySupplier) {
+        return new io.netty.channel.MultiThreadIoEventLoopGroup(
+            0,
+            new ThreadFactoryBuilder().setNameFormat("Netty " + name + " Server IO #%d")
+                .setDaemon(true)
+                .setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(LOGGER))
+                .build(),
+            ioHandlerFactorySupplier.get()
+        );
+    }
+    // Canvas end - Leaf - Bump netty to 4.2.x
+
     public SocketAddress startMemoryChannel() {
         ChannelFuture channelFuture;
         synchronized (this.channels) {
@@ -218,7 +_,7 @@
                         }
                     }
                 )
-                .group(SERVER_EVENT_GROUP.get())
+                //.group(SERVER_EVENT_GROUP.get()) // Canvas - Leaf - Bump netty to 4.2.x - not used, comment
                 .localAddress(LocalAddress.ANY)
                 .bind()
                 .syncUninterruptibly();
