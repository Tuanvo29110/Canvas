--- a/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
@@ -158,8 +_,9 @@
     public void handleConfigurationFinished(ServerboundFinishConfigurationPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.server);
         this.finishCurrentTask(JoinWorldTask.TYPE);
-        this.connection.setupOutboundProtocol(GameProtocols.CLIENTBOUND_TEMPLATE.bind(RegistryFriendlyByteBuf.decorator(this.server.registryAccess())));
+        // Canvas start - async connection state switch
 
+        Runnable post = () -> {
         try {
             PlayerList playerList = this.server.getPlayerList();
             if (playerList.getPlayer(this.gameProfile.getId()) != null) {
@@ -247,6 +_,13 @@
             this.connection.send(new ClientboundDisconnectPacket(DISCONNECT_REASON_INVALID_DATA));
             this.connection.disconnect(DISCONNECT_REASON_INVALID_DATA);
         }
+        };
+        this.connection.setupOutboundProtocolAsync(
+            GameProtocols.CLIENTBOUND_TEMPLATE.bind(RegistryFriendlyByteBuf.decorator(this.server.registryAccess())),
+            () -> {
+                io.papermc.paper.threadedregions.RegionizedServer.getInstance().addTask(post);
+            }, false);
+        // Canvas end - async connection state switch
     }
 
     @Override
@@ -285,7 +_,7 @@
         }
 
         this.connection.setReadOnly();
-        this.server.scheduleOnMain(() -> {
+        io.papermc.paper.threadedregions.RegionizedServer.getInstance().addTask(() -> { // Canvas - region threading
             this.disconnect(disconnectionInfo); // Currently you cannot cancel disconnect during the config stage
         });
     }
