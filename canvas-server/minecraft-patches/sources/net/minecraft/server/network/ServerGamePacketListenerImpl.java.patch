--- a/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -327,7 +_,7 @@
         this.player = player;
         player.connection = this;
         player.getTextFilter().join();
-        this.signedMessageDecoder = SignedMessageChain.Decoder.unsigned(player.getUUID(), server::enforceSecureProfile);
+        this.signedMessageDecoder = SignedMessageChain.Decoder.unsigned(player.getUUID(), server::ncrEnforceSecureProfile); // Canvas - no chat reports
         this.chatMessageChain = new FutureChain(server.chatExecutor); // CraftBukkit - async chat
         this.tickEndEvent = new io.papermc.paper.event.packet.ClientTickEndEvent(player.getBukkitEntity()); // Paper - add client tick end event
         this.playerGameConnection =  new io.papermc.paper.connection.PaperPlayerGameConnection(this); // Paper
@@ -846,7 +_,7 @@
     }
 
     // Paper start - AsyncTabCompleteEvent
-    private static final java.util.concurrent.ExecutorService TAB_COMPLETE_EXECUTOR = java.util.concurrent.Executors.newFixedThreadPool(4,
+    private static final java.util.concurrent.ExecutorService TAB_COMPLETE_EXECUTOR = io.canvasmc.canvas.Config.INSTANCE.virtualThreads.tabCompleteExecutor ? java.util.concurrent.Executors.newVirtualThreadPerTaskExecutor() : java.util.concurrent.Executors.newFixedThreadPool(4, // Canvas - virtual threads
         new com.google.common.util.concurrent.ThreadFactoryBuilder().setDaemon(true).setNameFormat("Async Tab Complete Thread - #%d").setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(MinecraftServer.LOGGER)).build());
     // Paper end - AsyncTabCompleteEvent
 
@@ -2348,7 +_,7 @@
         command = event.getMessage().substring(1);
         // CraftBukkit end
         ParseResults<CommandSourceStack> parseResults = this.parseCommand(command);
-        if (this.server.enforceSecureProfile() && SignableCommand.hasSignableArguments(parseResults)) {
+        if (this.server.ncrEnforceSecureProfile() && SignableCommand.hasSignableArguments(parseResults)) { // Canvas - no chat reports
             LOGGER.error(
                 "Received unsigned command packet from {}, but the command requires signable arguments: {}", this.player.getGameProfile().getName(), command
             );
@@ -2787,7 +_,7 @@
         this.removePlayerFromWorld();
         } finally { // Folia start - rewrite login process - move connection ownership to global region
             io.papermc.paper.threadedregions.RegionizedWorldData worldData = this.player.level().getCurrentWorldData();
-            worldData.connections.remove(this.connection);
+            worldData.removeConnection(this.connection, this.player); // Canvas - rewrite tick scheduler
             // once waitingForSwitchToConfig is set, the global tick thread will own the connection
         } // Folia end - rewrite login process - move connection ownership to global region
         this.waitingForSwitchToConfig = true; // Folia - rewrite login process - fix bad ordering of this field write - moved down
@@ -3653,7 +_,7 @@
     private void resetPlayerChatState(RemoteChatSession chatSession) {
         this.chatSession = chatSession;
         this.hasLoggedExpiry = false; // Paper - Prevent causing expired keys from impacting new joins
-        this.signedMessageDecoder = chatSession.createMessageDecoder(this.player.getUUID());
+        if (!io.canvasmc.canvas.Config.INSTANCE.enableNoChatReports) this.signedMessageDecoder = chatSession.createMessageDecoder(this.player.getUUID()); // Canvas - no chat reports
         this.chatMessageChain
             .append(
                 () -> {
