--- a/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -834,7 +_,7 @@
     }
 
     // Paper start - AsyncTabCompleteEvent
-    private static final java.util.concurrent.ExecutorService TAB_COMPLETE_EXECUTOR = java.util.concurrent.Executors.newFixedThreadPool(4,
+    private static final java.util.concurrent.ExecutorService TAB_COMPLETE_EXECUTOR = io.canvasmc.canvas.Config.INSTANCE.virtualThreads.tabCompleteExecutor ? java.util.concurrent.Executors.newVirtualThreadPerTaskExecutor() : java.util.concurrent.Executors.newFixedThreadPool(4, // Canvas - virtual threads
         new com.google.common.util.concurrent.ThreadFactoryBuilder().setDaemon(true).setNameFormat("Async Tab Complete Thread - #%d").setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(MinecraftServer.LOGGER)).build());
     // Paper end - AsyncTabCompleteEvent
 
@@ -2775,7 +_,7 @@
         this.removePlayerFromWorld();
         } finally { // Folia start - rewrite login process - move connection ownership to global region
             io.papermc.paper.threadedregions.RegionizedWorldData worldData = this.player.level().getCurrentWorldData();
-            worldData.connections.remove(this.connection);
+            worldData.removeConnection(this.connection, this.player); // Canvas - rewrite tick scheduler
             // once waitingForSwitchToConfig is set, the global tick thread will own the connection
         } // Folia end - rewrite login process - move connection ownership to global region
         this.waitingForSwitchToConfig = true; // Folia - rewrite login process - fix bad ordering of this field write - moved down
