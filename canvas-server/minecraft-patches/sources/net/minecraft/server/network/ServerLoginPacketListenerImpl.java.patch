--- a/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -11,10 +_,12 @@
 import java.net.SocketAddress;
 import java.security.PrivateKey;
 import java.util.Objects;
+import java.util.concurrent.Executors;
 import java.util.concurrent.atomic.AtomicInteger;
 import javax.annotation.Nullable;
 import javax.crypto.Cipher;
 import javax.crypto.SecretKey;
+import io.canvasmc.canvas.Config;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.DefaultUncaughtExceptionHandler;
@@ -53,7 +_,12 @@
 public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener, TickablePacketListener {
     private static final AtomicInteger UNIQUE_THREAD_ID = new AtomicInteger(0);
     static final Logger LOGGER = LogUtils.getLogger();
-    private static final java.util.concurrent.ExecutorService authenticatorPool = java.util.concurrent.Executors.newCachedThreadPool(new com.google.common.util.concurrent.ThreadFactoryBuilder().setNameFormat("User Authenticator #%d").setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER)).build()); // Paper - Cache authenticator threads
+    // Canvas start - virtual threads
+    private static final java.util.concurrent.ExecutorService authenticatorPool =
+        Config.INSTANCE.virtualThreads.shouldReplaceAuthenticator() ?
+        Executors.newVirtualThreadPerTaskExecutor() :
+        java.util.concurrent.Executors.newCachedThreadPool(new com.google.common.util.concurrent.ThreadFactoryBuilder().setNameFormat("User Authenticator #%d").setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER)).build()); // Paper - Cache authenticator threads
+    // Canvas end
     private static final int MAX_TICKS_BEFORE_LOGIN = 600;
     private final byte[] challenge;
     final MinecraftServer server;
@@ -92,7 +_,13 @@
         // Paper end - login cookie API
 
         if (this.state == ServerLoginPacketListenerImpl.State.VERIFYING) {
+            // Canvas start - Threaded Regions
+            String name = this.authenticatedProfile.getName();
+            java.util.UUID uniqueId = this.authenticatedProfile.getId();
+            if (this.server.getPlayerList().pushPendingJoin(name, uniqueId, this.connection)) {
+            // Canvas end
             this.verifyLoginAndFinishConnectionSetup(Objects.requireNonNull(this.authenticatedProfile));
+            } else { --this.tick; } // Canvas - Threaded Regions
         }
 
         if (this.state == ServerLoginPacketListenerImpl.State.WAITING_FOR_DUPE_DISCONNECT
@@ -204,7 +_,7 @@
 
     private void verifyLoginAndFinishConnectionSetup(GameProfile profile) {
         PlayerList playerList = this.server.getPlayerList();
-        Component component = org.bukkit.craftbukkit.event.CraftEventFactory.handleLoginResult(playerList.canPlayerLogin(this.connection.getRemoteAddress(), profile), this.paperLoginConnection, this.connection, profile, this.server, true); // Paper
+        Component component = org.bukkit.craftbukkit.event.CraftEventFactory.handleLoginResult(playerList.canPlayerLogin(this.connection.getRemoteAddress(), profile, this.connection), this.paperLoginConnection, this.connection, profile, this.server, true); // Paper // Canvas - Threaded Regions
         if (component != null) {
             this.disconnect(component);
         } else {
