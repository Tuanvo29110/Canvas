--- a/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
@@ -26,7 +_,6 @@
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ClientInformation;
 import net.minecraft.util.VisibleForDebug;
-import net.minecraft.util.profiling.Profiler;
 import org.slf4j.Logger;
 
 public abstract class ServerCommonPacketListenerImpl implements ServerCommonPacketListener {
@@ -97,10 +_,9 @@
             this.server.halt(false);
         }
         // Folia start - region threading
-        if (!(this instanceof ServerGamePacketListenerImpl gamePacketListener)) {
-            throw new UnsupportedOperationException("Configuration mode is not supported in its current state");
+        if (this instanceof ServerGamePacketListenerImpl gamePacketListener) { // Canvas - disconnect safely instead of throwing UnsupportedOperation
+            gamePacketListener.player.getBukkitEntity().taskScheduler.retire(); // Canvas - disconnect safely instead of throwing UnsupportedOperation
         }
-        gamePacketListener.player.getBukkitEntity().taskScheduler.retire();
         // Folia end - region threading
     }
 
@@ -265,7 +_,6 @@
     }
 
     protected void keepConnectionAlive() {
-        Profiler.get().push("keepAlive");
         long millis = Util.getMillis();
         // Paper start - improve keepalives
         if (this.checkIfClosed(millis) && !this.processedDisconnect) {
@@ -286,8 +_,6 @@
                 // Paper end - improve keepalives
             }
         }
-
-        Profiler.get().pop();
     }
 
     private boolean checkIfClosed(long time) {
@@ -356,12 +_,16 @@
             return;
         }
         // Folia start - region threading
-        if (!(this instanceof ServerGamePacketListenerImpl gamePacketListener)) {
-            throw new UnsupportedOperationException("Configuration mode is not supported in its current state");
-        }
-        // Folia end - region threading
-        if (!ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(gamePacketListener.player)) { // Folia - region threading
-            this.connection.disconnectSafely(disconnectionDetails); // Folia - region threading - it HAS to be delayed/async to avoid deadlock if we try to wait for another region
+        // Canvas start - disconnect safely instead of throwing UnsupportedOperation
+        if (this instanceof ServerGamePacketListenerImpl gamePacketListener) {
+            if (!ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(gamePacketListener.player)) {
+                this.connection.disconnectSafely(disconnectionDetails);
+                return;
+            }
+            // Folia end - region threading
+        } else {
+            this.connection.disconnect(disconnectionDetails); // Folia - region threading - it HAS to be delayed/async to avoid deadlock if we try to wait for another region
+        // Canvas end
             return;
         }
 
