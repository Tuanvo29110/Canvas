--- a/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
@@ -96,10 +_,9 @@
             this.server.halt(false);
         }
         // Folia start - region threading
-        if (!(this instanceof ServerGamePacketListenerImpl gamePacketListener)) {
-            throw new UnsupportedOperationException("Configuration mode is not supported in its current state");
+        if (this instanceof ServerGamePacketListenerImpl gamePacketListener) { // Canvas - disconnect safely instead of throwing UnsupportedOperation
+            gamePacketListener.player.getBukkitEntity().taskScheduler.retire(); // Canvas - disconnect safely instead of throwing UnsupportedOperation
         }
-        gamePacketListener.player.getBukkitEntity().taskScheduler.retire();
         // Folia end - region threading
     }
 
@@ -352,12 +_,16 @@
             return;
         }
         // Folia start - region threading
-        if (!(this instanceof ServerGamePacketListenerImpl gamePacketListener)) {
-            throw new UnsupportedOperationException("Configuration mode is not supported in its current state");
-        }
-        // Folia end - region threading
-        if (!ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(gamePacketListener.player)) { // Folia - region threading
-            this.connection.disconnectSafely(disconnectionDetails); // Folia - region threading - it HAS to be delayed/async to avoid deadlock if we try to wait for another region
+        // Canvas start - disconnect safely instead of throwing UnsupportedOperation
+        if (this instanceof ServerGamePacketListenerImpl gamePacketListener) {
+            if (!ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(gamePacketListener.player)) {
+                this.connection.disconnectSafely(disconnectionDetails);
+                return;
+            }
+            // Folia end - region threading
+        } else {
+            this.connection.disconnect(disconnectionDetails); // Folia - region threading - it HAS to be delayed/async to avoid deadlock if we try to wait for another region
+        // Canvas end
             return;
         }
 
