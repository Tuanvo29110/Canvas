--- a/net/minecraft/server/commands/ExecuteCommand.java
+++ b/net/minecraft/server/commands/ExecuteCommand.java
@@ -148,7 +_,7 @@
                 .then(Commands.literal("as").then(Commands.argument("targets", EntityArgument.entities()).fork(literalCommandNode, commandContext -> {
                     List<CommandSourceStack> list = Lists.newArrayList();
 
-                    for (Entity entity : EntityArgument.getOptionalEntities(commandContext, "targets")) {
+                    for (Entity entity : io.canvasmc.canvas.Config.INSTANCE.cacheExecuteCommandResult ? EntityArgument.getOptionalEntitiesCachedAs(commandContext, "targets") : EntityArgument.getOptionalEntities(commandContext, "targets")) {  // Leaf - Cache function getEntity calls
                         list.add(commandContext.getSource().withEntity(entity));
                     }
 
@@ -196,7 +_,7 @@
                         .then(Commands.literal("as").then(Commands.argument("targets", EntityArgument.entities()).fork(literalCommandNode, context -> {
                             List<CommandSourceStack> list = Lists.newArrayList();
 
-                            for (Entity entity : EntityArgument.getOptionalEntities(context, "targets")) {
+                            for (Entity entity : io.canvasmc.canvas.Config.INSTANCE.cacheExecuteCommandResult ? EntityArgument.getOptionalEntitiesCachedPositionedAs(context, "targets") : EntityArgument.getOptionalEntities(context, "targets")) {  // Leaf - Cache function getEntity calls
                                 list.add(context.getSource().withPosition(entity.position()));
                             }
 
