--- a/net/minecraft/server/commands/LootCommand.java
+++ b/net/minecraft/server/commands/LootCommand.java
@@ -277,8 +_,13 @@
     }
 
     private static int blockDistribute(CommandSourceStack source, BlockPos pos, List<ItemStack> items, LootCommand.Callback callback) throws CommandSyntaxException {
-        Container container = getContainer(source, pos);
+        // Canvas start - fix commands with region threading
         List<ItemStack> list = Lists.newArrayListWithCapacity(items.size());
+        Runnable task = () -> {
+            try {
+        // Canvas end - fix commands with region threading
+        Container container = getContainer(source, pos);
+        // Canvas - fix commands with region threading - move up
 
         for (ItemStack itemStack : items) {
             if (distributeToContainer(container, itemStack.copy())) {
@@ -288,6 +_,23 @@
         }
 
         callback.accept(list);
+        // Canvas start - fix commands with region threading
+            } catch (CommandSyntaxException syntaxException) {
+                source.sendFailure(Component.literal(syntaxException.getMessage()));
+            }
+        };
+        if (ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(source.getLevel(), pos)) {
+            // we are properly regionized for this container, we can run it here.
+            task.run();
+        } else {
+            // we are not on the right thread for this container, we must schedule
+            // this to the correct thread context
+            source.getLevel().getServer().regionizedServer.taskQueue.queueTickTaskQueue(
+                source.getLevel(),
+                pos.getX() >> 4, pos.getZ() >> 4, task
+            );
+        }
+        // Canvas end - fix commands with region threading
         return list.size();
     }
 
@@ -317,11 +_,15 @@
     }
 
     private static int blockReplace(CommandSourceStack source, BlockPos pos, int slot, int numSlots, List<ItemStack> items, LootCommand.Callback callback) throws CommandSyntaxException {
+        // Canvas start - fix commands with region threading
+        List<ItemStack> list = Lists.newArrayListWithCapacity(items.size());
+        Runnable task = () -> {
+            try {
+        // Canvas end - fix commands with region threading
         Container container = getContainer(source, pos);
         int containerSize = container.getContainerSize();
         if (slot >= 0 && slot < containerSize) {
-            List<ItemStack> list = Lists.newArrayListWithCapacity(items.size());
-
+            // Canvas - fix commands with region threading - move up
             for (int i = 0; i < numSlots; i++) {
                 int i1 = slot + i;
                 ItemStack itemStack = i < items.size() ? items.get(i) : ItemStack.EMPTY;
@@ -332,10 +_,28 @@
             }
 
             callback.accept(list);
-            return list.size();
+            return; // Canvas - fix commands with region threading
         } else {
             throw ItemCommands.ERROR_TARGET_INAPPLICABLE_SLOT.create(slot);
         }
+        // Canvas start - fix commands with region threading
+            } catch (CommandSyntaxException syntaxException) {
+                source.sendFailure(Component.literal(syntaxException.getMessage()));
+            }
+        };
+        if (ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(source.getLevel(), pos)) {
+            // we are properly regionized for this container, we can run it here.
+            task.run();
+        } else {
+            // we are not on the right thread for this container, we must schedule
+            // this to the correct thread context
+            source.getLevel().getServer().regionizedServer.taskQueue.queueTickTaskQueue(
+                source.getLevel(),
+                pos.getX() >> 4, pos.getZ() >> 4, task
+            );
+        }
+        return list.size();
+        // Canvas end - fix commands with region threading
     }
 
     private static boolean canMergeItems(ItemStack first, ItemStack second) {
@@ -347,9 +_,23 @@
 
         for (ItemStack itemStack : items) {
             for (ServerPlayer serverPlayer : targets) {
+                Runnable task = () -> { // Canvas - fix commands with region threading
                 if (serverPlayer.getInventory().add(itemStack.copy())) {
                     list.add(itemStack);
                 }
+                // Canvas start - fix commands with region threading
+                };
+                if (ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(serverPlayer)) {
+                    // we are properly regionized for this player, we can run it here.
+                    task.run();
+                } else {
+                    // we are not on the right thread for this player, we must schedule
+                    // this to the correct thread context
+                    serverPlayer.getBukkitEntity().taskScheduler.schedule((entity) -> {
+                        task.run();
+                    }, null, 0L);
+                }
+                // Canvas end - fix commands with region threading
             }
         }
 
@@ -371,12 +_,26 @@
         List<ItemStack> list = Lists.newArrayListWithCapacity(items.size());
 
         for (Entity entity : targets) {
+            Runnable task = () -> { // Canvas - fix commands with region threading
             if (entity instanceof ServerPlayer serverPlayer) {
                 setSlots(entity, items, startSlot, numSlots, list);
                 serverPlayer.containerMenu.broadcastChanges();
             } else {
                 setSlots(entity, items, startSlot, numSlots, list);
             }
+            // Canvas start - fix commands with region threading
+            };
+            if (ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(entity)) {
+                // we are properly regionized for this entity, we can run it here.
+                task.run();
+            } else {
+                // we are not on the right thread for this entity, we must schedule
+                // this to the correct thread context
+                entity.getBukkitEntity().taskScheduler.schedule((entity1) -> {
+                    task.run();
+                }, null, 0L);
+            }
+            // Canvas end - fix commands with region threading
         }
 
         callback.accept(list);
@@ -386,9 +_,24 @@
     private static int dropInWorld(CommandSourceStack source, Vec3 pos, List<ItemStack> items, LootCommand.Callback callback) throws CommandSyntaxException {
         ServerLevel level = source.getLevel();
         items.forEach(itemStack -> {
+            Runnable task = () -> { // Canvas - fix commands with region threading
             ItemEntity itemEntity = new ItemEntity(level, pos.x, pos.y, pos.z, itemStack.copy());
             itemEntity.setDefaultPickUpDelay();
             level.addFreshEntity(itemEntity);
+            // Canvas start - fix commands with region threading
+            };
+            if (ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(level, pos)) {
+                // we are properly regionized for this position, we can run it here.
+                task.run();
+            } else {
+                // we are not on the right thread for this position, we must schedule
+                // this to the correct thread context
+                source.getLevel().getServer().regionizedServer.taskQueue.queueTickTaskQueue(
+                    source.getLevel(),
+                    net.minecraft.util.Mth.floor(pos.x) >> 4, net.minecraft.util.Mth.floor(pos.z) >> 4, task
+                );
+            }
+            // Canvas end - fix commands with region threading
         });
         callback.accept(items);
         return items.size();
@@ -431,6 +_,8 @@
     private static int dropBlockLoot(CommandContext<CommandSourceStack> context, BlockPos pos, ItemStack tool, LootCommand.DropConsumer dropConsumer) throws CommandSyntaxException {
         CommandSourceStack commandSourceStack = context.getSource();
         ServerLevel level = commandSourceStack.getLevel();
+        java.util.function.Supplier<Integer> task = () -> { // Canvas - fix commands with region threading
+            try { // Canvas - fix commands with region threading
         BlockState blockState = level.getBlockState(pos);
         BlockEntity blockEntity = level.getBlockEntity(pos);
         Optional<ResourceKey<LootTable>> lootTable = blockState.getBlock().getLootTable();
@@ -446,6 +_,25 @@
             List<ItemStack> drops = blockState.getDrops(builder);
             return dropConsumer.accept(context, drops, items -> callback(commandSourceStack, items, lootTable.get()));
         }
+        // Canvas start - fix commands with region threading
+            } catch (CommandSyntaxException syntaxException) {
+                context.getSource().sendFailure(Component.literal(syntaxException.getMessage()));
+            }
+            return 0;
+        };
+        if (ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(level, pos)) {
+            // we are properly regionized for this container, we can run it here.
+            return task.get();
+        } else {
+            // we are not on the right thread for this container, we must schedule
+            // this to the correct thread context
+            level.getServer().regionizedServer.taskQueue.queueTickTaskQueue(
+                level,
+                pos.getX() >> 4, pos.getZ() >> 4, task::get
+            );
+        }
+        return 0;
+        // Canvas end - fix commands with region threading
     }
 
     private static int dropKillLoot(CommandContext<CommandSourceStack> context, Entity entity, LootCommand.DropConsumer dropConsumer) throws CommandSyntaxException {
