--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -1,5 +_,9 @@
 package net.minecraft.server.level;
 
+import ca.spottedleaf.moonrise.common.misc.NearbyPlayers;
+import java.util.concurrent.atomic.AtomicReference;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.region.ServerRegions;
 import com.google.common.cache.CacheBuilder;
 import com.google.common.cache.CacheLoader;
 import com.google.common.cache.LoadingCache;
@@ -257,6 +_,7 @@
     private Vec3 lastKnownClientMovement = Vec3.ZERO;
     private Input lastClientInput = Input.EMPTY;
     private final Set<ThrownEnderpearl> enderPearls = new HashSet<>();
+    public final AtomicReference<NearbyPlayers> npr = new AtomicReference<>(); // Canvas - Threaded Regions
     public final ContainerSynchronizer containerSynchronizer = new ContainerSynchronizer() {
         private final LoadingCache<TypedDataComponent<?>, Integer> cache = CacheBuilder.newBuilder()
             .maximumSize(256L)
@@ -826,7 +_,7 @@
     public void doTick() {
         try {
             if (valid && !this.isSpectator() || !this.touchingUnloadedChunk()) { // Paper - don't tick dead players that are not in the world currently (pending respawn)
-                super.tick();
+                if (!this.touchingUnloadedChunk()) super.tick(); // Canvas - ensure we dont touch any unloaded chunk
             }
 
             for (int i = 0; i < this.getInventory().getContainerSize(); i++) {
@@ -905,6 +_,7 @@
             }
             // CraftBukkit end
         } catch (Throwable var4) {
+            var4.printStackTrace(); // Canvas - print please.
             CrashReport crashReport = CrashReport.forThrowable(var4, "Ticking player");
             CrashReportCategory crashReportCategory = crashReport.addCategory("Player being ticked");
             this.fillCrashReportCategory(crashReportCategory);
@@ -1030,6 +_,7 @@
     // Paper end - Expand PlayerDeathEvent API
     @Override
     public void die(DamageSource cause) {
+        processingDeath = true; // Canvas - item entity spread
         // this.gameEvent(GameEvent.ENTITY_DIE); // Paper - move below event cancellation check
         boolean _boolean = this.serverLevel().getGameRules().getBoolean(GameRules.RULE_SHOWDEATHMESSAGES); final boolean showDeathMessage = _boolean; // Paper - OBFHELPER
         // CraftBukkit start - fire PlayerDeathEvent
@@ -1146,6 +_,7 @@
         this.getCombatTracker().recheckStatus();
         this.setLastDeathLocation(Optional.of(GlobalPos.of(this.level().dimension(), this.blockPosition())));
         this.setClientLoaded(false);
+        processingDeath = false; // Canvas
     }
 
     private void tellNeutralMobsThatIDied() {
