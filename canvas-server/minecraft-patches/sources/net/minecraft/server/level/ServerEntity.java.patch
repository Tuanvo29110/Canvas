--- a/net/minecraft/server/level/ServerEntity.java
+++ b/net/minecraft/server/level/ServerEntity.java
@@ -118,7 +_,19 @@
         // Paper end - optimise collisions
         List<Entity> passengers = this.entity.getPassengers();
         if (!passengers.equals(this.lastPassengers)) {
-            List<UUID> list = this.mountedOrDismounted(passengers).map(Entity::getUUID).toList();
+            // Canvas start - remove streams
+            List<UUID> list = new ArrayList<>();
+            for (Entity entity : this.lastPassengers) {
+                if (!passengers.contains(entity)) {
+                    list.add(entity.getUUID());
+                }
+            }
+            for (Entity entity : passengers) {
+                if (!this.lastPassengers.contains(entity)) {
+                    list.add(entity.getUUID());
+                }
+            }
+            // Canvas end - remove streams
             this.broadcastWithIgnore.accept(new ClientboundSetPassengersPacket(this.entity), list);
             // Paper start - Allow riding players
             if (this.entity instanceof ServerPlayer player) {
@@ -193,22 +_,32 @@
                     packet = ClientboundEntityPositionSyncPacket.of(this.entity);
                     flag3 = true;
                     flag4 = true;
-                } else if ((!flag2 || !flag) && !(this.entity instanceof AbstractArrow)) {
-                    if (flag2) {
-                        packet = new ClientboundMoveEntityPacket.Pos(this.entity.getId(), (short)l, (short)l1, (short)l2, this.entity.onGround());
-                        flag3 = true;
-                    } else if (flag) {
-                        packet = new ClientboundMoveEntityPacket.Rot(this.entity.getId(), b, b1, this.entity.onGround());
-                        flag4 = true;
-                    }
+                // Canvas start - reduce useless move packets
                 } else {
-                    packet = new ClientboundMoveEntityPacket.PosRot(this.entity.getId(), (short)l, (short)l1, (short)l2, b, b1, this.entity.onGround());
-                    flag3 = true;
-                    flag4 = true;
+                    if (flag2 || flag || this.entity instanceof AbstractArrow) {
+                        if ((!flag2 || !flag) && !(this.entity instanceof AbstractArrow)) {
+                            if (flag2) {
+                                packet = new ClientboundMoveEntityPacket.Pos(this.entity.getId(), (short) l, (short) l1, (short) l2, this.entity.onGround());
+                                flag3 = true;
+                            } else if (flag) {
+                                packet = new ClientboundMoveEntityPacket.Rot(this.entity.getId(), b, b1, this.entity.onGround());
+                                flag4 = true;
+                            }
+                        } else {
+                            packet = new ClientboundMoveEntityPacket.PosRot(this.entity.getId(), (short) l, (short) l1, (short) l2, b, b1, this.entity.onGround());
+                            flag3 = true;
+                            flag4 = true;
+                        }
+                    }
+                    if (io.canvasmc.canvas.Config.INSTANCE.entities.reduceUselessMovePackets && isUselessMoveEntityPacket(packet)) {
+                        packet = null;
+                    }
+                // Canvas end - reduce useless move packets
                 }
 
                 if (this.entity.hasImpulse || this.trackDelta || this.entity instanceof LivingEntity && ((LivingEntity)this.entity).isFallFlying()) {
                     Vec3 deltaMovement = this.entity.getDeltaMovement();
+                    if (deltaMovement != this.lastSentMovement) { // Canvas - reduce useless move packets
                     double d = deltaMovement.distanceToSqr(this.lastSentMovement);
                     if (d > 1.0E-7 || d > 0.0 && deltaMovement.lengthSqr() == 0.0) {
                         this.lastSentMovement = deltaMovement;
@@ -222,10 +_,11 @@
                                         )
                                     )
                                 );
-                        } else {
+                        } else if (!io.canvasmc.canvas.Config.INSTANCE.networking.disableClientboundSetEntityMotionPacket) { // Canvas - allow disabling set entity motion packet
                             this.broadcast.accept(new ClientboundSetEntityMotionPacket(this.entity.getId(), this.lastSentMovement));
                         }
                     }
+                    } // Canvas - reduce useless move packets
                 }
 
                 if (packet != null) {
@@ -280,6 +_,21 @@
             this.broadcastAndSend(new ClientboundSetEntityMotionPacket(this.entity));
         }
     }
+    // Canvas start - reduce useless move packets
+
+    private boolean isUselessMoveEntityPacket(@Nullable Packet<?> packet) {
+        if (!(packet instanceof ClientboundMoveEntityPacket moveEntityPacket)) return false;
+        return switch (packet) {
+            case ClientboundMoveEntityPacket.Pos ignored ->
+                moveEntityPacket.getXa() == 0 && moveEntityPacket.getYa() == 0 && moveEntityPacket.getZa() == 0;
+            case ClientboundMoveEntityPacket.PosRot ignored ->
+                moveEntityPacket.getXa() == 0 && moveEntityPacket.getYa() == 0 && moveEntityPacket.getZa() == 0 && moveEntityPacket.getYRot() == 0 && moveEntityPacket.getXRot() == 0;
+            case ClientboundMoveEntityPacket.Rot ignored ->
+                moveEntityPacket.getYRot() == 0 && moveEntityPacket.getXRot() == 0;
+            default -> false;
+        };
+    }
+    // Canvas end - reduce useless move packets
 
     private Stream<Entity> mountedOrDismounted(List<Entity> entities) {
         return Streams.concat(
