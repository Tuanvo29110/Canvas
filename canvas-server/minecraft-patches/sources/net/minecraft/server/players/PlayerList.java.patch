--- a/net/minecraft/server/players/PlayerList.java
+++ b/net/minecraft/server/players/PlayerList.java
@@ -340,7 +_,7 @@
             ServerGamePacketListenerImpl serverGamePacketListenerImpl = new ServerGamePacketListenerImpl(this.server, connection, player, cookie);
             // Folia start - rewrite login process
             // only after setting the connection listener to game type, add the connection to this regions list
-            serverLevel.getCurrentWorldData().connections.add(connection);
+            serverLevel.getCurrentWorldData().addConnection(connection, player); // Canvas - rewrite tick scheduler
             // Folia end - rewrite login process
             connection.setupInboundProtocol(
                 GameProtocols.SERVERBOUND_TEMPLATE.bind(RegistryFriendlyByteBuf.decorator(this.server.registryAccess()), serverGamePacketListenerImpl),
@@ -650,7 +_,17 @@
         for (ThrownEnderpearl thrownEnderpearl : new java.util.ArrayList<>(player.getEnderPearls())) { // Paper - copy, setOwner will remove from list;
             // Paper start - Allow using old ender pearl behavior
             if (!thrownEnderpearl.level().paperConfig().misc.legacyEnderPearlBehavior) {
-                thrownEnderpearl.setRemoved(Entity.RemovalReason.UNLOADED_WITH_PLAYER, org.bukkit.event.entity.EntityRemoveEvent.Cause.PLAYER_QUIT); // CraftBukkit - add Bukkit remove cause
+                // Canvas start - restore vanilla ender pearl behavior
+                if (io.canvasmc.canvas.Config.INSTANCE.restoreVanillaEnderPearlBehavior) {
+                    io.papermc.paper.threadedregions.RegionizedServer.getInstance().taskQueue.queueTickTaskQueue(
+                        thrownEnderpearl.level().getMinecraftWorld(), thrownEnderpearl.chunkPosition().x, thrownEnderpearl.chunkPosition().z, () -> {
+                            thrownEnderpearl.setRemoved(Entity.RemovalReason.UNLOADED_WITH_PLAYER, org.bukkit.event.entity.EntityRemoveEvent.Cause.PLAYER_QUIT); // CraftBukkit - add Bukkit remove cause
+                        }
+                    );
+                } else {
+                    thrownEnderpearl.setRemoved(Entity.RemovalReason.UNLOADED_WITH_PLAYER, org.bukkit.event.entity.EntityRemoveEvent.Cause.PLAYER_QUIT); // CraftBukkit - add Bukkit remove cause
+                }
+                // Canvas end - restore vanilla ender pearl behavior
             } else {
                 thrownEnderpearl.setOwner(null);
             }
@@ -1385,6 +_,7 @@
     }
 
     public boolean verifyChatTrusted(PlayerChatMessage message) {
+        if (io.canvasmc.canvas.Config.INSTANCE.enableNoChatReports) return true; // Canvas - no chat reports
         return message.hasSignature() && !message.hasExpiredServer(Instant.now());
     }
 
@@ -1435,7 +_,12 @@
 
         for (ServerLevel serverLevel : this.server.getAllLevels()) {
             if (serverLevel != null) {
-                serverLevel.getChunkSource().setViewDistance(viewDistance);
+                // Canvas start - per world distance
+                io.canvasmc.canvas.chunk.PerWorldDistanceConfig distanceConfig = serverLevel.serverLevelData.distanceConfig;
+                if (!distanceConfig.isViewDistanceOverridden()) {
+                    serverLevel.getChunkSource().setViewDistance(viewDistance);
+                }
+                // Canvas end
             }
         }
     }
@@ -1446,7 +_,12 @@
 
         for (ServerLevel serverLevel : this.server.getAllLevels()) {
             if (serverLevel != null) {
-                serverLevel.getChunkSource().setSimulationDistance(simulationDistance);
+                // Canvas start - per world distance
+                io.canvasmc.canvas.chunk.PerWorldDistanceConfig distanceConfig = serverLevel.serverLevelData.distanceConfig;
+                if (!distanceConfig.isSimulationDistanceOverridden()) {
+                    serverLevel.getChunkSource().setSimulationDistance(simulationDistance);
+                }
+                // Canvas end
             }
         }
     }
