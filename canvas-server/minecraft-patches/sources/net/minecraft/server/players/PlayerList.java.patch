--- a/net/minecraft/server/players/PlayerList.java
+++ b/net/minecraft/server/players/PlayerList.java
@@ -108,10 +_,12 @@
     public static final Component CHAT_FILTERED_FULL = Component.translatable("chat.filtered_full");
     public static final Component DUPLICATE_LOGIN_DISCONNECT_MESSAGE = Component.translatable("multiplayer.disconnect.duplicate_login");
     private static final Logger LOGGER = LogUtils.getLogger();
-    public static final int SEND_PLAYER_INFO_INTERVAL = 600;
+    public static final int SEND_PLAYER_INFO_INTERVAL = io.canvasmc.canvas.Config.INSTANCE.networking.playerInfoSendInterval; // Canvas - optimize playerlist tick
     private static final ThreadLocal<SimpleDateFormat> BAN_DATE_FORMAT = ThreadLocal.withInitial(() -> new SimpleDateFormat("yyyy-MM-dd 'at' HH:mm:ss z")); // Folia - region threading - SDF is not thread-safe
     private final MinecraftServer server;
     public final List<ServerPlayer> players = new java.util.concurrent.CopyOnWriteArrayList(); // CraftBukkit - ArrayList -> CopyOnWriteArrayList: Iterator safety
+    private final io.canvasmc.canvas.util.PlayerListBucket[] infoBuckets = new io.canvasmc.canvas.util.PlayerListBucket[SEND_PLAYER_INFO_INTERVAL]; // Canvas - optimize playerlist tick
+    public final List<ServerPlayer> seeingEndCredits = new java.util.concurrent.CopyOnWriteArrayList<>(); // Canvas - fix end credits
     private final Map<UUID, ServerPlayer> playersByUUID = new java.util.concurrent.ConcurrentHashMap<>(); // Folia - region threading - change to CHM - Note: we do NOT expect concurrency PER KEY!
     private final UserBanList bans = new UserBanList(USERBANLIST_FILE);
     private final IpBanList ipBans = new IpBanList(IPBANLIST_FILE);
@@ -150,17 +_,7 @@
             conflictingId = this.connectionById.get(byId);
 
             if (conflictingName == null && conflictingId == null) {
-                // Folia start - max concurrent login
-                int loggedInCount = 0;
-                for (Connection value : this.connectionById.values()) {
-                    if (value.getPacketListener() instanceof ServerGamePacketListenerImpl) {
-                        ++loggedInCount;
-                    }
-                }
-                if ((this.connectionById.size() - loggedInCount) >= io.papermc.paper.configuration.GlobalConfiguration.get().misc.maxJoinsPerTick) {
-                    return false;
-                }
-                // Folia end - max concurrent login
+                // Canvas - broken implementation, remove - TODO - reimplement?
                 this.connectionByName.put(userName, conn);
                 this.connectionById.put(byId, conn);
             }
@@ -342,7 +_,7 @@
             // only after setting the connection listener to game type, add the connection to this regions list
             serverLevel.getCurrentWorldData().connections.add(connection);
             // Folia end - rewrite login process
-            connection.setupInboundProtocol(
+            if (!io.canvasmc.canvas.Config.INSTANCE.networking.asyncProtocolSwitch) connection.setupInboundProtocol(
                 GameProtocols.SERVERBOUND_TEMPLATE.bind(RegistryFriendlyByteBuf.decorator(this.server.registryAccess()), serverGamePacketListenerImpl),
                 serverGamePacketListenerImpl
             );
@@ -396,6 +_,7 @@
 
             // player.connection.send(ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(this.players)); // CraftBukkit - replaced with loop below
             this.players.add(player);
+            this.pushToBuckets(player); // Canvas - optimize playerlist tick
             this.playersByName.put(player.getScoreboardName().toLowerCase(java.util.Locale.ROOT), player); // Spigot
             this.playersByUUID.put(player.getUUID(), player);
             // this.broadcastAll(ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(List.of(player))); // CraftBukkit - replaced with loop below
@@ -496,6 +_,21 @@
                     serverLevel.getLightEngine(), (java.util.BitSet)null, (java.util.BitSet) null, true) // Paper - Anti-Xray
                 );
             }
+            // Canvas start - tpsbar
+            if (player.localEntry.enabled() && player.localEntry.placement().equals(io.canvasmc.canvas.RegionizedTpsBar.Placement.BOSS_BAR)) {
+                player.tpsBar.addViewer(player.getBukkitEntity());
+            }
+            // Canvas end - tpsbar
+            // Canvas start - async connection state switch
+            if (io.canvasmc.canvas.Config.INSTANCE.networking.asyncProtocolSwitch) connection.setupInboundProtocolAsync(
+                GameProtocols.SERVERBOUND_TEMPLATE.bind(
+                    RegistryFriendlyByteBuf.decorator(this.server.registryAccess()), serverGamePacketListenerImpl
+                ),
+                serverGamePacketListenerImpl,
+                null,
+                true
+            );
+            // Canvas end - async connection state switch
             // Paper end - Send empty chunk
         }
     }
@@ -585,6 +_,7 @@
         if (playerAdvancements != null) {
             playerAdvancements.save();
         }
+        new io.canvasmc.canvas.event.PlayerSaveEvent(player.getBukkitEntity(), false).callEvent(); // Canvas - player save event
     }
 
     public @Nullable net.kyori.adventure.text.Component remove(ServerPlayer player) { // CraftBukkit - return string // Paper - return Component
@@ -650,7 +_,17 @@
         for (ThrownEnderpearl thrownEnderpearl : player.getEnderPearls()) {
             // Paper start - Allow using old ender pearl behavior
             if (!thrownEnderpearl.level().paperConfig().misc.legacyEnderPearlBehavior) {
-                thrownEnderpearl.setRemoved(Entity.RemovalReason.UNLOADED_WITH_PLAYER, org.bukkit.event.entity.EntityRemoveEvent.Cause.PLAYER_QUIT); // CraftBukkit - add Bukkit remove cause
+                // Canvas start - restore vanilla ender pearl behavior
+                if (io.canvasmc.canvas.Config.INSTANCE.restoreVanillaEnderPearlBehavior) {
+                    io.papermc.paper.threadedregions.RegionizedServer.getInstance().taskQueue.queueTickTaskQueue(
+                        thrownEnderpearl.level().getMinecraftWorld(), thrownEnderpearl.chunkPosition().x, thrownEnderpearl.chunkPosition().z, () -> {
+                            thrownEnderpearl.setRemoved(Entity.RemovalReason.UNLOADED_WITH_PLAYER, org.bukkit.event.entity.EntityRemoveEvent.Cause.PLAYER_QUIT); // CraftBukkit - add Bukkit remove cause
+                        }
+                    );
+                } else {
+                    thrownEnderpearl.setRemoved(Entity.RemovalReason.UNLOADED_WITH_PLAYER, org.bukkit.event.entity.EntityRemoveEvent.Cause.PLAYER_QUIT); // CraftBukkit - add Bukkit remove cause
+                }
+                // Canvas end - restore vanilla ender pearl behavior
             }
             // Paper end - Allow using old ender pearl behavior
         }
@@ -659,6 +_,7 @@
         player.retireScheduler(); // Paper - Folia schedulers
         player.getAdvancements().stopListening();
         this.players.remove(player);
+        this.removeFromBuckets(player); // Canvas - optimize playerlist tick
         this.playersByName.remove(player.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot
         this.server.getCustomBossEvents().onPlayerDisconnect(player);
         UUID uuid = player.getUUID();
@@ -685,6 +_,7 @@
         // This removes the scoreboard (and player reference) for the specific player in the manager
         this.cserver.getScoreboardManager().removePlayer(player.getBukkitEntity());
         // CraftBukkit end
+        new io.canvasmc.canvas.event.PlayerSaveEvent(player.getBukkitEntity(), true).callEvent(); // Canvas - player save event
         return playerQuitEvent.quitMessage(); // Paper - Adventure
     }
 
@@ -758,6 +_,7 @@
         // Folia end - region threading
         player.stopRiding(); // CraftBukkit
         this.players.remove(player);
+        this.removeFromBuckets(player); // Canvas - optimize playerlist tick
         this.playersByName.remove(player.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot
         player.level().removePlayerImmediately(player, reason);
         // TeleportTransition teleportTransition = player.findRespawnPositionAndUseSpawnBlock(!keepInventory, TeleportTransition.DO_NOTHING);
@@ -835,6 +_,7 @@
         if (!serverPlayer.connection.isDisconnected()) {
             level.addRespawnedPlayer(serverPlayer);
             this.players.add(serverPlayer);
+            this.pushToBuckets(serverPlayer); // Canvas - optimize playerlist tick
             this.playersByName.put(serverPlayer.getScoreboardName().toLowerCase(java.util.Locale.ROOT), serverPlayer); // Spigot
             this.playersByUUID.put(serverPlayer.getUUID(), serverPlayer);
         }
@@ -939,6 +_,20 @@
     }
 
     public void tick() {
+        // Canvas start - optimize playerlist tick
+        if (io.canvasmc.canvas.Config.INSTANCE.networking.optimizePlayerListTicking) {
+            io.canvasmc.canvas.util.PlayerListBucket bucket = this.infoBuckets[this.sendAllPlayerInfoIn];
+
+            if (bucket != null) {
+                bucket.tick(this.players.toArray(new ServerPlayer[0]));
+            }
+
+            if (++this.sendAllPlayerInfoIn >= SEND_PLAYER_INFO_INTERVAL) {
+                this.sendAllPlayerInfoIn = 0;
+            }
+            return;
+        }
+        // Canvas end - optimize playerlist tick
         if (++this.sendAllPlayerInfoIn > 600) {
             // CraftBukkit start
             ServerPlayer[] players = this.players.toArray(new ServerPlayer[0]); // Folia - region threading
@@ -950,6 +_,45 @@
             this.sendAllPlayerInfoIn = 0;
         }
     }
+    // Canvas start - optimize playerlist tick
+
+    public void pushToBuckets(ServerPlayer player) {
+        if (!io.papermc.paper.threadedregions.RegionizedServer.isGlobalTickThread()) {
+            io.papermc.paper.threadedregions.RegionizedServer.getInstance().addTask(() -> pushToBuckets(player));
+            return;
+        }
+        io.canvasmc.canvas.util.PlayerListBucket bucket = this.infoBuckets[player.infoBucketIndex];
+        if (bucket == null) {
+            this.infoBuckets[player.infoBucketIndex] = new io.canvasmc.canvas.util.PlayerListBucket(new ServerPlayer[]{player});
+            return;
+        }
+        this.infoBuckets[player.infoBucketIndex] = bucket = new io.canvasmc.canvas.util.PlayerListBucket(java.util.Arrays.copyOf(bucket.bucket(), bucket.bucket().length + 1));
+        bucket.bucket()[bucket.bucket().length - 1] = player;
+    }
+
+    public void removeFromBuckets(ServerPlayer player) {
+        if (!io.papermc.paper.threadedregions.RegionizedServer.isGlobalTickThread()) {
+            io.papermc.paper.threadedregions.RegionizedServer.getInstance().addTask(() -> removeFromBuckets(player));
+            return;
+        }
+        io.canvasmc.canvas.util.PlayerListBucket bucket = this.infoBuckets[player.infoBucketIndex];
+        if (bucket != null) {
+            if (bucket.bucket().length == 1) {
+                if (bucket.bucket()[0] == player) {
+                    this.infoBuckets[player.infoBucketIndex] = null;
+                }
+                return;
+            }
+
+            for (int i = 0; i < bucket.bucket().length; i++) {
+                if (bucket.bucket()[i] == player) {
+                    bucket.bucket()[i] = bucket.bucket()[bucket.bucket().length - 1];
+                    this.infoBuckets[player.infoBucketIndex] = new io.canvasmc.canvas.util.PlayerListBucket(java.util.Arrays.copyOf(bucket.bucket(), bucket.bucket().length - 1));
+                }
+            }
+        }
+    }
+    // Canvas end - optimize playerlist tick
 
     // CraftBukkit start - add a world/entity limited version
     public void broadcastAll(Packet packet, net.minecraft.world.entity.player.Player entityhuman) {
@@ -1172,7 +_,7 @@
         io.papermc.paper.util.MCUtil.ensureMain("Save Players" , () -> { // Paper - Ensure main
         int numSaved = 0;
         final long now = System.nanoTime(); // Folia - region threading
-        long timeInterval = (long)interval * io.papermc.paper.threadedregions.TickRegionScheduler.TIME_BETWEEN_TICKS; // Folia - region threading
+        long timeInterval = (long)interval * io.papermc.paper.threadedregions.TickRegionScheduler.getTimeBetweenTicks(); // Folia - region threading // Canvas - rewrite scheduler
         for (final ServerPlayer player : this.players) { // Folia - region threading
             // Folia start - region threading
             if (!ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(player)) {
@@ -1404,6 +_,7 @@
     }
 
     public boolean verifyChatTrusted(PlayerChatMessage message) {
+        if (io.canvasmc.canvas.Config.INSTANCE.enableNoChatReports) return true; // Canvas - no chat reports
         return message.hasSignature() && !message.hasExpiredServer(Instant.now());
     }
 
@@ -1454,7 +_,12 @@
 
         for (ServerLevel serverLevel : this.server.getAllLevels()) {
             if (serverLevel != null) {
-                serverLevel.getChunkSource().setViewDistance(viewDistance);
+                // Canvas start - per world distance
+                io.canvasmc.canvas.chunk.PerWorldDistanceConfig distanceConfig = serverLevel.serverLevelData.distanceConfig;
+                if (!distanceConfig.isViewDistanceOverridden()) {
+                    serverLevel.getChunkSource().setViewDistance(viewDistance);
+                }
+                // Canvas end - per world distance
             }
         }
     }
@@ -1465,7 +_,12 @@
 
         for (ServerLevel serverLevel : this.server.getAllLevels()) {
             if (serverLevel != null) {
-                serverLevel.getChunkSource().setSimulationDistance(simulationDistance);
+                // Canvas start - per world distance
+                io.canvasmc.canvas.chunk.PerWorldDistanceConfig distanceConfig = serverLevel.serverLevelData.distanceConfig;
+                if (!distanceConfig.isSimulationDistanceOverridden()) {
+                    serverLevel.getChunkSource().setSimulationDistance(simulationDistance);
+                }
+                // Canvas end - per world distance
             }
         }
     }
