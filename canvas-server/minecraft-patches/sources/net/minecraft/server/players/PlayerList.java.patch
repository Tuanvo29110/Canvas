--- a/net/minecraft/server/players/PlayerList.java
+++ b/net/minecraft/server/players/PlayerList.java
@@ -112,6 +_,7 @@
     private static final ThreadLocal<SimpleDateFormat> BAN_DATE_FORMAT = ThreadLocal.withInitial(() -> new SimpleDateFormat("yyyy-MM-dd 'at' HH:mm:ss z")); // Folia - region threading - SDF is not thread-safe
     private final MinecraftServer server;
     public final List<ServerPlayer> players = new java.util.concurrent.CopyOnWriteArrayList(); // CraftBukkit - ArrayList -> CopyOnWriteArrayList: Iterator safety
+    public final List<ServerPlayer> seeingEndCredits = new java.util.concurrent.CopyOnWriteArrayList<>(); // Canvas - fix end credits
     private final Map<UUID, ServerPlayer> playersByUUID = new java.util.concurrent.ConcurrentHashMap<>(); // Folia - region threading - change to CHM - Note: we do NOT expect concurrency PER KEY!
     private final UserBanList bans = new UserBanList(USERBANLIST_FILE);
     private final IpBanList ipBans = new IpBanList(IPBANLIST_FILE);
@@ -340,7 +_,7 @@
             ServerGamePacketListenerImpl serverGamePacketListenerImpl = new ServerGamePacketListenerImpl(this.server, connection, player, cookie);
             // Folia start - rewrite login process
             // only after setting the connection listener to game type, add the connection to this regions list
-            serverLevel.getCurrentWorldData().connections.add(connection);
+            serverLevel.getCurrentWorldData().addConnection(connection, player); // Canvas - rewrite tick scheduler
             // Folia end - rewrite login process
             connection.setupInboundProtocol(
                 GameProtocols.SERVERBOUND_TEMPLATE.bind(RegistryFriendlyByteBuf.decorator(this.server.registryAccess()), serverGamePacketListenerImpl),
@@ -496,6 +_,11 @@
                     serverLevel.getLightEngine(), (java.util.BitSet)null, (java.util.BitSet) null, true) // Paper - Anti-Xray
                 );
             }
+            // Canvas start - tpsbar
+            if (player.localEntry.enabled() && player.localEntry.placement().equals(io.canvasmc.canvas.RegionizedTpsBar.Placement.BOSS_BAR)) {
+                player.tpsBar.addViewer(player.getBukkitEntity());
+            }
+            // Canvas end - tpsbar
             // Paper end - Send empty chunk
         }
     }
@@ -585,6 +_,7 @@
         if (playerAdvancements != null) {
             playerAdvancements.save();
         }
+        new io.canvasmc.canvas.event.PlayerSaveEvent(player.getBukkitEntity(), false).callEvent(); // Canvas - player save event
     }
 
     public @Nullable net.kyori.adventure.text.Component remove(ServerPlayer player) { // CraftBukkit - return string // Paper - return Component
@@ -650,7 +_,17 @@
         for (ThrownEnderpearl thrownEnderpearl : player.getEnderPearls()) {
             // Paper start - Allow using old ender pearl behavior
             if (!thrownEnderpearl.level().paperConfig().misc.legacyEnderPearlBehavior) {
-                thrownEnderpearl.setRemoved(Entity.RemovalReason.UNLOADED_WITH_PLAYER, org.bukkit.event.entity.EntityRemoveEvent.Cause.PLAYER_QUIT); // CraftBukkit - add Bukkit remove cause
+                // Canvas start - restore vanilla ender pearl behavior
+                if (io.canvasmc.canvas.Config.INSTANCE.restoreVanillaEnderPearlBehavior) {
+                    io.papermc.paper.threadedregions.RegionizedServer.getInstance().taskQueue.queueTickTaskQueue(
+                        thrownEnderpearl.level().getMinecraftWorld(), thrownEnderpearl.chunkPosition().x, thrownEnderpearl.chunkPosition().z, () -> {
+                            thrownEnderpearl.setRemoved(Entity.RemovalReason.UNLOADED_WITH_PLAYER, org.bukkit.event.entity.EntityRemoveEvent.Cause.PLAYER_QUIT); // CraftBukkit - add Bukkit remove cause
+                        }
+                    );
+                } else {
+                    thrownEnderpearl.setRemoved(Entity.RemovalReason.UNLOADED_WITH_PLAYER, org.bukkit.event.entity.EntityRemoveEvent.Cause.PLAYER_QUIT); // CraftBukkit - add Bukkit remove cause
+                }
+                // Canvas end - restore vanilla ender pearl behavior
             }
             // Paper end - Allow using old ender pearl behavior
         }
@@ -685,6 +_,7 @@
         // This removes the scoreboard (and player reference) for the specific player in the manager
         this.cserver.getScoreboardManager().removePlayer(player.getBukkitEntity());
         // CraftBukkit end
+        new io.canvasmc.canvas.event.PlayerSaveEvent(player.getBukkitEntity(), true).callEvent(); // Canvas - player save event
         return playerQuitEvent.quitMessage(); // Paper - Adventure
     }
 
@@ -1404,6 +_,7 @@
     }
 
     public boolean verifyChatTrusted(PlayerChatMessage message) {
+        if (io.canvasmc.canvas.Config.INSTANCE.enableNoChatReports) return true; // Canvas - no chat reports
         return message.hasSignature() && !message.hasExpiredServer(Instant.now());
     }
 
@@ -1454,7 +_,12 @@
 
         for (ServerLevel serverLevel : this.server.getAllLevels()) {
             if (serverLevel != null) {
-                serverLevel.getChunkSource().setViewDistance(viewDistance);
+                // Canvas start - per world distance
+                io.canvasmc.canvas.chunk.PerWorldDistanceConfig distanceConfig = serverLevel.serverLevelData.distanceConfig;
+                if (!distanceConfig.isViewDistanceOverridden()) {
+                    serverLevel.getChunkSource().setViewDistance(viewDistance);
+                }
+                // Canvas end - per world distance
             }
         }
     }
@@ -1465,7 +_,12 @@
 
         for (ServerLevel serverLevel : this.server.getAllLevels()) {
             if (serverLevel != null) {
-                serverLevel.getChunkSource().setSimulationDistance(simulationDistance);
+                // Canvas start - per world distance
+                io.canvasmc.canvas.chunk.PerWorldDistanceConfig distanceConfig = serverLevel.serverLevelData.distanceConfig;
+                if (!distanceConfig.isSimulationDistanceOverridden()) {
+                    serverLevel.getChunkSource().setSimulationDistance(simulationDistance);
+                }
+                // Canvas end - per world distance
             }
         }
     }
