--- a/net/minecraft/world/level/BaseSpawner.java
+++ b/net/minecraft/world/level/BaseSpawner.java
@@ -45,14 +_,14 @@
     public SpawnData nextSpawnData;
     private double spin;
     private double oSpin;
-    public int minSpawnDelay = 200;
-    public int maxSpawnDelay = 800;
-    public int spawnCount = 4;
+    public int minSpawnDelay = io.canvasmc.canvas.Config.INSTANCE.spawner.minSpawnDelay; // Canvas - spawner configs
+    public int maxSpawnDelay = io.canvasmc.canvas.Config.INSTANCE.spawner.maxSpawnDelay; // Canvas - spawner configs
+    public int spawnCount = io.canvasmc.canvas.Config.INSTANCE.spawner.spawnCount; // Canvas - spawner configs
     @Nullable
     private Entity displayEntity;
-    public int maxNearbyEntities = 6;
-    public int requiredPlayerRange = 16;
-    public int spawnRange = 4;
+    public int maxNearbyEntities = io.canvasmc.canvas.Config.INSTANCE.spawner.maxNearbyEntities; // Canvas - spawner configs
+    public int requiredPlayerRange = io.canvasmc.canvas.Config.INSTANCE.spawner.requiredPlayerRange; // Canvas - spawner configs
+    public int spawnRange = io.canvasmc.canvas.Config.INSTANCE.spawner.spawnRange; // Canvas - spawner configs
     private int tickDelay = 0; // Paper - Configurable mob spawner tick rate
 
     public void setEntityId(EntityType<?> type, @Nullable Level level, RandomSource random, BlockPos pos) {
@@ -61,7 +_,7 @@
     }
 
     public boolean isNearPlayer(Level level, BlockPos pos) {
-        return level.hasNearbyAlivePlayerThatAffectsSpawning(pos.getX() + 0.5, pos.getY() + 0.5, pos.getZ() + 0.5, this.requiredPlayerRange); // Paper - Affects Spawning API
+        return level.hasNearbyAlivePlayerThatAffectsSpawningForSpawner(pos.getX() + 0.5, pos.getY() + 0.5, pos.getZ() + 0.5, this.requiredPlayerRange); // Paper - Affects Spawning API // Canvas - optimize spawners
     }
 
     public void clientTick(Level level, BlockPos pos) {
@@ -160,7 +_,7 @@
                                 return;
                             }
 
-                            int size = serverLevel.getEntities(
+                            int size = io.canvasmc.canvas.Config.INSTANCE.spawner.disableMaxNearbyEntitiesCheck ? Integer.MIN_VALUE : serverLevel.getEntities( // Canvas - spawner configs
                                     EntityTypeTest.forExactClass(entity.getClass()),
                                     new AABB(pos.getX(), pos.getY(), pos.getZ(), pos.getX() + 1, pos.getY() + 1, pos.getZ() + 1).inflate(this.spawnRange),
                                     EntitySelector.NO_SPECTATORS
@@ -191,6 +_,7 @@
                                     mob.aware = false;
                                 }
                                 // Spigot end
+                                mob.fromSpawner = true; // Canvas - spawner configs
                             }
 
                             // Paper start
