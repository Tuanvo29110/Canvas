--- a/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -425,6 +_,9 @@
         private final boolean ignitedByLava;
         @Deprecated
         private final boolean liquid;
+        public boolean isWater = false; // Canvas - optimize fluid pushing
+        public boolean isBubble = false; // Canvas - optimize fluid pushing
+        public boolean isLava = false; // Canvas - optimize fluid pushing
         @Deprecated
         private boolean legacySolid;
         private final PushReaction pushReaction;
@@ -470,6 +_,22 @@
         private boolean emptyCollisionShape;
         private boolean emptyConstantCollisionShape;
         private VoxelShape constantCollisionShape;
+        // Canvas start - optimize path type cache
+        // inspired by Cache-block-state-tags patch from Leaf
+        public byte pathType; // 8bit, better this enum, as it only has 25 values
+
+        public void cachePathType() {
+            this.pathType = (byte) net.minecraft.world.level.pathfinder.WalkNodeEvaluator.getPathTypeFromBlockState(this.asState()).ordinal();
+        }
+
+        public static void initPathTypeCache() {
+            for (Block block : BuiltInRegistries.BLOCK) {
+                for (BlockState blockState : block.getStateDefinition().getPossibleStates()) {
+                    blockState.cachePathType();
+                }
+            }
+        }
+        // Canvas end - optimize path type cache
 
         private static void initCaches(final VoxelShape shape, final boolean neighbours) {
             ((ca.spottedleaf.moonrise.patches.collisions.shape.CollisionVoxelShape)shape).moonrise$isFullBlock();
@@ -577,6 +_,9 @@
         protected boolean shapeExceedsCube = true; // Paper - moved from actual method to here
         public void initCache() {
             this.fluidState = this.owner.getFluidState(this.asState());
+            this.isWater = this.is(Blocks.WATER); // Canvas - optimize fluid pushing
+            this.isBubble = this.is(Blocks.BUBBLE_COLUMN); // Canvas - optimize fluid pushing
+            this.isLava = this.is(Blocks.LAVA); // Canvas - optimize fluid pushing
             this.isRandomlyTicking = this.owner.isRandomlyTicking(this.asState());
             if (!this.getBlock().hasDynamicShape()) {
                 this.cache = new BlockBehaviour.BlockStateBase.Cache(this.asState());
