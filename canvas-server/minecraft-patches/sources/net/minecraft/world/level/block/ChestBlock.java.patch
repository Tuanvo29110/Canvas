--- a/net/minecraft/world/level/block/ChestBlock.java
+++ b/net/minecraft/world/level/block/ChestBlock.java
@@ -78,6 +_,28 @@
             return Optional.empty();
         }
     };
+    // Canvas start - optimize hoppers
+    private static final DoubleBlockCombiner.Combiner<ChestBlockEntity, Container> NULLABLE_DIRECT_CONTAINER = new DoubleBlockCombiner.Combiner<ChestBlockEntity, Container>() {
+        @Override
+        public Container acceptDouble(ChestBlockEntity first, ChestBlockEntity second) {
+            return new CompoundContainer(first, second);
+        }
+
+        @Override
+        public Container acceptSingle(ChestBlockEntity single) {
+            return single;
+        }
+
+        @Override
+        public Container acceptNone() {
+            // the data flow issue is that all methods return non-null by default
+            // however when we use this we have nullability handling since we
+            // do expect the return value to be nullable
+            //noinspection DataFlowIssue
+            return null;
+        }
+    };
+    // Canvas end - optimize hoppers
     public static DoubleBlockCombiner.Combiner<ChestBlockEntity, Optional<MenuProvider>> MENU_PROVIDER_COMBINER = new DoubleBlockCombiner.Combiner<ChestBlockEntity, Optional<MenuProvider>>() {
         @Override
         public Optional<MenuProvider> acceptDouble(final ChestBlockEntity first, final ChestBlockEntity second) {
@@ -270,6 +_,15 @@
         return this.blockEntityType.get();
     }
 
+    // Canvas start - optimize hoppers
+    @Nullable
+    public static Container getContainerForHoppers(ChestBlock chest, BlockState state, Level level, BlockPos pos, boolean override, Container def) {
+        // when conducting tests, the code bellow the injected code took ~17.1ms out of the ~40.45ms total
+        // to tick the hoppers in our testing environment. ~20.14ms was from this method
+        return chest.combine(state, level, pos, override).apply(NULLABLE_DIRECT_CONTAINER);
+    }
+
+    // Canvas end
     @Nullable
     public static Container getContainer(ChestBlock chest, BlockState state, Level level, BlockPos pos, boolean override) {
         return chest.combine(state, level, pos, override).apply(CHEST_COMBINER).orElse(null);
