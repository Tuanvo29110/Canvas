--- a/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
@@ -2,6 +_,9 @@
 
 import java.util.Arrays;
 import javax.annotation.Nullable;
+import io.canvasmc.canvas.entity.SleepingBlockEntity;
+import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.block.Blocks;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.NonNullList;
@@ -24,7 +_,7 @@
 import net.minecraft.world.level.storage.ValueInput;
 import net.minecraft.world.level.storage.ValueOutput;
 
-public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements WorldlyContainer {
+public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements WorldlyContainer, SleepingBlockEntity { // Canvas - block entity sleeping
     private static final int INGREDIENT_SLOT = 3;
     private static final int FUEL_SLOT = 4;
     private static final int[] SLOTS_FOR_UP = new int[]{3};
@@ -42,6 +_,44 @@
     private boolean[] lastPotionCount;
     private Item ingredient;
     public int fuel;
+    // Canvas start
+    private LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper = null;
+    private TickingBlockEntity sleepingTicker = null;
+
+    @Override
+    public LevelChunk.RebindableTickingBlockEntityWrapper lithium$getTickWrapper() {
+        return tickWrapper;
+    }
+
+    @Override
+    public void lithium$setTickWrapper(LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper) {
+        this.tickWrapper = tickWrapper;
+        this.lithium$setSleepingTicker(null);
+    }
+
+    @Override
+    public TickingBlockEntity lithium$getSleepingTicker() {
+        return sleepingTicker;
+    }
+
+    @Override
+    public void lithium$setSleepingTicker(TickingBlockEntity sleepingTicker) {
+        this.sleepingTicker = sleepingTicker;
+    }
+
+    private void checkSleep(BlockState state) {
+        if (this.brewTime == 0 && state.is(Blocks.BREWING_STAND) && this.level != null) {
+            this.lithium$startSleeping();
+        }
+    }
+
+    @Override
+    public void lithium$handleSetChanged() {
+        if (this.isSleeping() && this.level != null && !this.level.isClientSide) {
+            this.wakeUpNow();
+        }
+    }
+    // Canvas end
     protected final ContainerData dataAccess = new ContainerData() {
         @Override
         public int get(int index) {
@@ -135,6 +_,8 @@
     }
 
     public static void serverTick(Level level, BlockPos pos, BlockState state, BrewingStandBlockEntity blockEntity) {
+        if (blockEntity.isSleeping()) return; // Canvas - sleeping block entities
+        blockEntity.checkSleep(state); // Canvas
         ItemStack itemStack = blockEntity.items.get(4);
         if (blockEntity.fuel <= 0 && itemStack.is(ItemTags.BREWING_FUEL)) {
             // CraftBukkit start
@@ -152,6 +_,7 @@
                 itemStack.shrink(1);
             }
             // CraftBukkit end
+            blockEntity.wakeUpNow(); // Canvas
             setChanged(level, pos, state);
         }
 
@@ -167,6 +_,7 @@
                 blockEntity.brewTime = 0;
             }
 
+            blockEntity.wakeUpNow(); // Canvas
             setChanged(level, pos, state);
         } else if (isBrewable && blockEntity.fuel > 0) {
             blockEntity.fuel--;
@@ -179,6 +_,7 @@
             blockEntity.brewTime = event.getBrewingTime(); // 400 -> event.getTotalBrewTime() // Paper - use brewing time from event
             // CraftBukkit end
             blockEntity.ingredient = itemStack1.getItem();
+            blockEntity.wakeUpNow(); // Canvas
             setChanged(level, pos, state);
         }
 
@@ -285,6 +_,11 @@
         }
 
         this.fuel = input.getByteOr("Fuel", (byte)0);
+        // Canvas start - block entity sleeping
+        if (this.isSleeping() && this.level != null && !this.level.isClientSide()) {
+            this.wakeUpNow();
+        }
+        // Canvas end
     }
 
     @Override
