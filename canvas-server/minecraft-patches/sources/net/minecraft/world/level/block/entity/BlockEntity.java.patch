--- a/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -49,6 +_,7 @@
     protected boolean remove;
     private BlockState blockState;
     private DataComponentMap components = DataComponentMap.EMPTY;
+    public boolean isValid; // Canvas - optimize block entities
 
     // Folia start - region ticking
     public void updateTicks(final long fromTickOffset, final long fromRedstoneTimeOffset) {
@@ -62,6 +_,7 @@
         this.validateBlockState(blockState);
         this.blockState = blockState;
         this.persistentDataContainer = new org.bukkit.craftbukkit.persistence.CraftPersistentDataContainer(DATA_TYPE_REGISTRY); // Paper - always init
+        this.isValid = type.isValid(blockState); // Canvas - optimize block entities
     }
 
     private void validateBlockState(BlockState state) {
@@ -237,6 +_,11 @@
             if (IGNORE_TILE_UPDATES.get().booleanValue()) return; // Paper - Perf: Optimize Hoppers // Folia - region threading
             setChanged(this.level, this.worldPosition, this.blockState);
         }
+        // Canvas start - block entity sleeping
+        if (this instanceof io.canvasmc.canvas.chunk.block.SleepingBlockEntity sleepingBlockEntity) {
+            sleepingBlockEntity.onChange();
+        }
+        // Canvas end - block entity sleeping
     }
 
     protected static void setChanged(Level level, BlockPos pos, BlockState state) {
@@ -308,6 +_,7 @@
     public void setBlockState(BlockState blockState) {
         this.validateBlockState(blockState);
         this.blockState = blockState;
+        this.isValid = this.type.isValid(blockState); // Canvas - optimize block entities
     }
 
     protected void applyImplicitComponents(DataComponentGetter componentGetter) {
@@ -383,7 +_,7 @@
 
     // CraftBukkit start - add method
     public org.bukkit.inventory.InventoryHolder getOwner() {
-        return getOwner(true);
+        return getOwner(io.canvasmc.canvas.Config.INSTANCE.tileEntitySnapshotCreation); // Canvas - don't use snapshots for acquiring blockstate
     }
 
     public org.bukkit.inventory.InventoryHolder getOwner(boolean useSnapshot) {
