--- a/net/minecraft/world/level/block/entity/CrafterBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/CrafterBlockEntity.java
@@ -22,7 +_,7 @@
 import net.minecraft.world.level.storage.ValueInput;
 import net.minecraft.world.level.storage.ValueOutput;
 
-public class CrafterBlockEntity extends RandomizableContainerBlockEntity implements CraftingContainer {
+public class CrafterBlockEntity extends RandomizableContainerBlockEntity implements CraftingContainer, io.canvasmc.canvas.chunk.block.SleepingBlockEntity { // Canvas - block entity sleeping
     public static final int CONTAINER_WIDTH = 3;
     public static final int CONTAINER_HEIGHT = 3;
     public static final int CONTAINER_SIZE = 9;
@@ -34,6 +_,45 @@
     private static final int DEFAULT_TRIGGERED = 0;
     private NonNullList<ItemStack> items = NonNullList.withSize(9, ItemStack.EMPTY);
     public int craftingTicksRemaining = 0;
+    // Canvas start - block entity sleeping
+    private net.minecraft.world.level.chunk.LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper = null;
+    private TickingBlockEntity sleepingTicker = null;
+
+    @Override
+    public net.minecraft.world.level.chunk.LevelChunk.RebindableTickingBlockEntityWrapper lithium$getTickWrapper() {
+        return this.tickWrapper;
+    }
+
+    @Override
+    public void lithium$setTickWrapper(final net.minecraft.world.level.chunk.LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper) {
+        this.tickWrapper = tickWrapper;
+        this.lithium$setSleepingTicker(null);
+    }
+
+    @Override
+    public TickingBlockEntity lithium$getSleepingTicker() {
+        return this.sleepingTicker;
+    }
+
+    @Override
+    public void lithium$setSleepingTicker(final TickingBlockEntity sleepingTicker) {
+        this.sleepingTicker = sleepingTicker;
+    }
+
+    private void checkSleep() {
+        if (this.craftingTicksRemaining == 0) {
+            this.lithium$startSleeping();
+        }
+    }
+
+    @Override
+    public void onChange() {
+        if (this.isSleeping() && this.level != null && !this.level.isClientSide) {
+            this.wakeUpNow();
+        }
+    }
+
+    // Canvas end - block entity sleeping
     protected final ContainerData containerData = new ContainerData() {
         private final int[] slotStates = new int[9];
         private int triggered = 0;
@@ -169,6 +_,11 @@
             }
         });
         this.containerData.set(9, input.getIntOr("triggered", 0));
+        // Canvas start - block entity sleeping
+        if (this.isSleeping() && this.level != null && !this.level.isClientSide) {
+            this.wakeUpNow();
+        }
+        // Canvas end
     }
 
     @Override
@@ -278,6 +_,11 @@
                 level.setBlock(pos, state.setValue(CrafterBlock.CRAFTING, false), 3);
             }
         }
+        // Canvas start - block entity sleeping
+        if (i < 0) {
+            (crafter).checkSleep();
+        }
+        // Canvas end
     }
 
     public void setCraftingTicksRemaining(int craftingTicksRemaining) {
