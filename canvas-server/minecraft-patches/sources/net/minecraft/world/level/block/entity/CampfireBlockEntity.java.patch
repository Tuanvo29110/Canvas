--- a/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
@@ -38,7 +_,7 @@
 import net.minecraft.world.level.storage.ValueOutput;
 import org.slf4j.Logger;
 
-public class CampfireBlockEntity extends BlockEntity implements Clearable {
+public class CampfireBlockEntity extends BlockEntity implements Clearable, io.canvasmc.canvas.chunk.block.SleepingBlockEntity { // Canvas - block entity sleeping
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final int BURN_COOL_SPEED = 2;
     private static final int NUM_SLOTS = 4;
@@ -46,6 +_,31 @@
     public final int[] cookingProgress = new int[4];
     public final int[] cookingTime = new int[4];
     public final boolean[] stopCooking = new boolean[4]; // Paper - Add more Campfire API
+    // Canvas start - block entity sleeping
+    private net.minecraft.world.level.chunk.LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper = null;
+    private TickingBlockEntity sleepingTicker = null;
+
+    @Override
+    public net.minecraft.world.level.chunk.LevelChunk.RebindableTickingBlockEntityWrapper lithium$getTickWrapper() {
+        return this.tickWrapper;
+    }
+
+    @Override
+    public void lithium$setTickWrapper(net.minecraft.world.level.chunk.LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper) {
+        this.tickWrapper = tickWrapper;
+        this.lithium$setSleepingTicker(null);
+    }
+
+    @Override
+    public TickingBlockEntity lithium$getSleepingTicker() {
+        return this.sleepingTicker;
+    }
+
+    @Override
+    public void lithium$setSleepingTicker(TickingBlockEntity sleepingTicker) {
+        this.sleepingTicker = sleepingTicker;
+    }
+    // Canvas end - block entity sleeping
 
     public CampfireBlockEntity(BlockPos pos, BlockState blockState) {
         super(BlockEntityType.CAMPFIRE, pos, blockState);
@@ -112,6 +_,10 @@
 
         if (flag) {
             setChanged(level, pos, state);
+        // Canvas start - block entity sleeping
+        } else {
+            campfire.lithium$startSleeping();
+        // Canvas end - block entity sleeping
         }
     }
 
@@ -127,6 +_,10 @@
 
         if (flag) {
             setChanged(level, pos, state);
+        // Canvas start - block entity sleeping
+        } else {
+            blockEntity.lithium$startSleeping();
+        // Canvas end - block entity sleeping
         }
     }
 
@@ -183,6 +_,7 @@
             System.arraycopy(cookingState, 0, this.stopCooking, 0, Math.min(this.stopCooking.length, bytes.capacity()));
         });
         // Paper end - Add more Campfire API
+        this.wakeUpNow(); // Canvas - block entity sleeping
     }
 
     @Override
@@ -238,6 +_,7 @@
                 // CraftBukkit end
                 this.cookingProgress[i] = 0;
                 this.items.set(i, stack.consumeAndReturn(1, entity));
+                this.wakeUpNow(); // Canvas - block entity sleeping
                 level.gameEvent(GameEvent.BLOCK_CHANGE, this.getBlockPos(), GameEvent.Context.of(entity, this.getBlockState()));
                 this.markUpdated();
                 return true;
