--- a/net/minecraft/world/level/levelgen/structure/structures/StrongholdPieces.java
+++ b/net/minecraft/world/level/levelgen/structure/structures/StrongholdPieces.java
@@ -1,6 +_,7 @@
 package net.minecraft.world.level.levelgen.structure.structures;
 
 import com.google.common.collect.Lists;
+import java.util.Collections;
 import com.mojang.serialization.Codec;
 import java.util.List;
 import javax.annotation.Nullable;
@@ -65,32 +_,32 @@
             }
         }
     };
-    private static List<StrongholdPieces.PieceWeight> currentPieces;
-    static Class<? extends StrongholdPieces.StrongholdPiece> imposedPiece;
-    private static int totalWeight;
+    private static final ThreadLocal<List<PieceWeight>> currentPieces = new ThreadLocal<List<PieceWeight>>(); // Canvas - rewrite moonrise executor - fix threading issues
+    static final ThreadLocal<Class<? extends StrongholdPiece>> imposedPiece = new ThreadLocal<Class<? extends StrongholdPiece>>(); // Canvas - rewrite moonrise executor - fix threading issues
+    private static final ThreadLocal<Integer> totalWeight = ThreadLocal.withInitial(() -> 0); // Canvas - rewrite moonrise executor - fix threading issues
     static final StrongholdPieces.SmoothStoneSelector SMOOTH_STONE_SELECTOR = new StrongholdPieces.SmoothStoneSelector();
 
     public static void resetPieces() {
-        currentPieces = Lists.newArrayList();
+        currentPieces.set(Lists.newArrayList()); // Canvas - rewrite moonrise executor - fix threading issues
 
         for (StrongholdPieces.PieceWeight pieceWeight : STRONGHOLD_PIECE_WEIGHTS) {
-            pieceWeight.placeCount = 0;
-            currentPieces.add(pieceWeight);
+            pieceWeight.placeCount.set(0); // Canvas - rewrite moonrise executor - fix threading issues
+            currentPieces.get().add(pieceWeight); // Canvas - rewrite moonrise executor - fix threading issues
         }
 
-        imposedPiece = null;
+        imposedPiece.set(null); // Canvas - rewrite moonrise executor - fix threading issues
     }
 
     private static boolean updatePieceWeight() {
         boolean flag = false;
-        totalWeight = 0;
+        totalWeight.set(0); // Canvas - rewrite moonrise executor - fix threading issues
 
-        for (StrongholdPieces.PieceWeight pieceWeight : currentPieces) {
-            if (pieceWeight.maxPlaceCount > 0 && pieceWeight.placeCount < pieceWeight.maxPlaceCount) {
+        for (StrongholdPieces.PieceWeight pieceWeight : currentPieces.get()) { // Canvas - rewrite moonrise executor - fix threading issues
+            if (pieceWeight.maxPlaceCount > 0 && pieceWeight.placeCount.get() < pieceWeight.maxPlaceCount) { // Canvas - rewrite moonrise executor - fix threading issues
                 flag = true;
             }
 
-            totalWeight = totalWeight + pieceWeight.weight;
+            totalWeight.set(totalWeight.get() + pieceWeight.weight); // Canvas - rewrite moonrise executor - fix threading issues
         }
 
         return flag;
@@ -140,9 +_,9 @@
         if (!updatePieceWeight()) {
             return null;
         } else {
-            if (imposedPiece != null) {
-                StrongholdPieces.StrongholdPiece strongholdPiece = findAndCreatePieceFactory(imposedPiece, pieces, random, x, y, z, direction, genDepth);
-                imposedPiece = null;
+            if (imposedPiece.get() != null) { // Canvas - rewrite moonrise executor - fix threading issues
+                StrongholdPieces.StrongholdPiece strongholdPiece = findAndCreatePieceFactory(imposedPiece.get(), pieces, random, x, y, z, direction, genDepth); // Canvas - rewrite moonrise executor - fix threading issues
+                imposedPiece.set(null); // Canvas - rewrite moonrise executor - fix threading issues
                 if (strongholdPiece != null) {
                     return strongholdPiece;
                 }
@@ -152,9 +_,9 @@
 
             while (i < 5) {
                 i++;
-                int randomInt = random.nextInt(totalWeight);
+                int randomInt = random.nextInt(totalWeight.get()); // Canvas - rewrite moonrise executor - fix threading issues
 
-                for (StrongholdPieces.PieceWeight pieceWeight : currentPieces) {
+                for (StrongholdPieces.PieceWeight pieceWeight : currentPieces.get()) { // Canvas - rewrite moonrise executor - fix threading issues
                     randomInt -= pieceWeight.weight;
                     if (randomInt < 0) {
                         if (!pieceWeight.doPlace(genDepth) || pieceWeight == piece.previousPiece) {
@@ -165,10 +_,10 @@
                             pieceWeight.pieceClass, pieces, random, x, y, z, direction, genDepth
                         );
                         if (strongholdPiece1 != null) {
-                            pieceWeight.placeCount++;
+                            pieceWeight.placeCount.set(pieceWeight.placeCount.get() + 1); // Canvas - rewrite moonrise executor - fix threading issues
                             piece.previousPiece = pieceWeight;
                             if (!pieceWeight.isValid()) {
-                                currentPieces.remove(pieceWeight);
+                                currentPieces.get().remove(pieceWeight); // Canvas - rewrite moonrise executor - fix threading issues
                             }
 
                             return strongholdPiece1;
@@ -204,7 +_,7 @@
         private static final int WIDTH = 5;
         private static final int HEIGHT = 5;
         private static final int DEPTH = 7;
-        private boolean hasPlacedChest;
+        private volatile boolean hasPlacedChest; // Canvas - rewrite moonrise executor - fix threading issues - volatile
 
         public ChestCorridor(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
             super(StructurePieceType.STRONGHOLD_CHEST_CORRIDOR, genDepth, box);
@@ -690,7 +_,7 @@
     static class PieceWeight {
         public final Class<? extends StrongholdPieces.StrongholdPiece> pieceClass;
         public final int weight;
-        public int placeCount;
+        public final ThreadLocal<Integer> placeCount = ThreadLocal.withInitial(() -> 0); // Canvas - rewrite moonrise executor - fix threading issues
         public final int maxPlaceCount;
 
         public PieceWeight(Class<? extends StrongholdPieces.StrongholdPiece> pieceClass, int weight, int maxPlaceCount) {
@@ -700,11 +_,11 @@
         }
 
         public boolean doPlace(int genDepth) {
-            return this.maxPlaceCount == 0 || this.placeCount < this.maxPlaceCount;
+            return this.maxPlaceCount == 0 || this.placeCount.get() < this.maxPlaceCount; // Canvas - rewrite moonrise executor - fix threading issues
         }
 
         public boolean isValid() {
-            return this.maxPlaceCount == 0 || this.placeCount < this.maxPlaceCount;
+            return this.maxPlaceCount == 0 || this.placeCount.get() < this.maxPlaceCount; // Canvas - rewrite moonrise executor - fix threading issues
         }
     }
 
@@ -712,7 +_,7 @@
         protected static final int WIDTH = 11;
         protected static final int HEIGHT = 8;
         protected static final int DEPTH = 16;
-        private boolean hasPlacedSpawner;
+        private volatile boolean hasPlacedSpawner; // Canvas - rewrite moonrise executor - fix threading issues - volatile
 
         public PortalRoom(int genDepth, BoundingBox box, Direction orientation) {
             super(StructurePieceType.STRONGHOLD_PORTAL_ROOM, genDepth, box);
@@ -1174,7 +_,7 @@
         @Override
         public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
             if (this.isSource) {
-                StrongholdPieces.imposedPiece = StrongholdPieces.FiveCrossing.class;
+                StrongholdPieces.imposedPiece.set(StrongholdPieces.FiveCrossing.class); // Canvas - rewrite moonrise executor - fix threading issues
             }
 
             this.generateSmallDoorChildForward((StrongholdPieces.StartPiece)piece, pieces, random, 1, 1);
@@ -1223,10 +_,10 @@
     }
 
     public static class StartPiece extends StrongholdPieces.StairsDown {
-        public StrongholdPieces.PieceWeight previousPiece;
+        public volatile StrongholdPieces.PieceWeight previousPiece; // Canvas - rewrite moonrise executor - fix threading issues - volatile
         @Nullable
-        public StrongholdPieces.PortalRoom portalRoomPiece;
-        public final List<StructurePiece> pendingChildren = Lists.newArrayList();
+        public volatile StrongholdPieces.PortalRoom portalRoomPiece; // Canvas - rewrite moonrise executor - fix threading issues - volatile
+        public final List<StructurePiece> pendingChildren = Collections.synchronizedList(Lists.newArrayList()); // Canvas - rewrite moonrise executor - fix threading issues - synchronized
 
         public StartPiece(RandomSource random, int x, int z) {
             super(StructurePieceType.STRONGHOLD_START, 0, x, z, getRandomHorizontalDirection(random));
@@ -1377,7 +_,7 @@
         }
     }
 
-    abstract static class StrongholdPiece extends StructurePiece {
+    public abstract static class StrongholdPiece extends StructurePiece { // Canvas - rewrite moonrise executor - fix threading issues - public
         protected StrongholdPieces.StrongholdPiece.SmallDoorType entryDoor = StrongholdPieces.StrongholdPiece.SmallDoorType.OPENING;
 
         protected StrongholdPiece(StructurePieceType type, int genDepth, BoundingBox boundingBox) {
