--- a/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
+++ b/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
@@ -75,8 +_,8 @@
     public static final String ENTITY_TAG_BLOCKPOS = "blockPos";
     public static final String ENTITY_TAG_NBT = "nbt";
     public static final String SIZE_TAG = "size";
-    public final List<StructureTemplate.Palette> palettes = Lists.newArrayList();
-    public final List<StructureTemplate.StructureEntityInfo> entityInfoList = Lists.newArrayList();
+    public final List<StructureTemplate.Palette> palettes = java.util.Collections.synchronizedList(Lists.newArrayList()); // Canvas - synchronize
+    public final List<StructureTemplate.StructureEntityInfo> entityInfoList = java.util.Collections.synchronizedList(Lists.newArrayList()); // Canvas - synchronize
     private Vec3i size = Vec3i.ZERO;
     private String author = "?";
     // CraftBukkit start - data containers
@@ -254,6 +_,12 @@
     public static BlockPos calculateRelativePosition(StructurePlaceSettings decorator, BlockPos pos) {
         return transform(pos, decorator.getMirror(), decorator.getRotation(), decorator.getRotationPivot());
     }
+    // Canvas start - optimize structure gen
+
+    private List<StructureTemplate.StructureBlockInfo> structureLayoutOptimizer$shrinkStructureTemplateBlocksList(StructureTemplate.Palette palette, BlockPos offset, StructurePlaceSettings settings) {
+        return io.canvasmc.canvas.util.structure.StructureTemplateOptimizer.getStructureBlockInfosInBounds(palette, offset, settings);
+    }
+    // Canvas end - optimize structure gen
 
     public boolean placeInWorld(ServerLevelAccessor serverLevel, BlockPos offset, BlockPos pos, StructurePlaceSettings settings, RandomSource random, int flags) {
         if (this.palettes.isEmpty()) {
@@ -272,7 +_,7 @@
                 }
             }
             // CraftBukkit end
-            List<StructureTemplate.StructureBlockInfo> list = settings.getRandomPalette(this.palettes, offset).blocks();
+            List<StructureTemplate.StructureBlockInfo> list = io.canvasmc.canvas.Config.INSTANCE.chunks.structures.optimizeStructureGen ? structureLayoutOptimizer$shrinkStructureTemplateBlocksList(settings.getRandomPalette(this.palettes, offset), offset, settings) : settings.getRandomPalette(this.palettes, offset).blocks(); // Canvas - optimize structure gen
             if ((!list.isEmpty() || !settings.isIgnoreEntities() && !this.entityInfoList.isEmpty())
                 && this.size.getX() >= 1
                 && this.size.getY() >= 1
@@ -882,7 +_,7 @@
         private List<StructureTemplate.JigsawBlockInfo> cachedJigsaws;
 
         Palette(List<StructureTemplate.StructureBlockInfo> blocks) {
-            this.blocks = blocks;
+            this.blocks = io.canvasmc.canvas.Config.INSTANCE.chunks.structures.optimizeStructureGen ? new io.canvasmc.canvas.util.structure.PalettedStructureBlockInfoList(blocks) : blocks; // Canvas - optimize structure gen
         }
 
         public List<StructureTemplate.JigsawBlockInfo> jigsaws() {
