--- a/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
+++ b/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
@@ -68,8 +_,10 @@
         Aquifer.FluidStatus fluidStatus = new Aquifer.FluidStatus(-54, Blocks.LAVA.defaultBlockState());
         int seaLevel = settings.seaLevel();
         Aquifer.FluidStatus fluidStatus1 = new Aquifer.FluidStatus(seaLevel, settings.defaultFluid());
-        Aquifer.FluidStatus fluidStatus2 = new Aquifer.FluidStatus(DimensionType.MIN_Y * 2, Blocks.AIR.defaultBlockState());
-        return (x, y, z) -> y < Math.min(-54, seaLevel) ? fluidStatus : fluidStatus1;
+        // Leaf start - C2ME - Optimize world gen math
+        final int min = Math.min(-54, seaLevel);
+        return (x, y, z) -> y < min ? fluidStatus : fluidStatus1;
+        // Leaf end - C2ME - Optimize world gen math
     }
 
     @Override
@@ -297,6 +_,15 @@
         int i = Mth.floorDiv(minY, noiseSettings.getCellHeight());
         int i1 = Mth.floorDiv(noiseSettings.height(), noiseSettings.getCellHeight());
         return i1 <= 0 ? CompletableFuture.completedFuture(chunk) : CompletableFuture.supplyAsync(() -> {
+            // Canvas start - optimize noise gen
+            if (io.canvasmc.canvas.Config.INSTANCE.chunks.optimizeNoiseGeneration) {
+                // remove the rest of this bs, we don't need it
+                @Nullable ChunkAccess chunkWithNoise = this.doFill(
+                    blender, structureManager, randomState, chunk, i, i1);
+
+                return chunkWithNoise;
+            }
+            // Canvas end - optimize noise gen
             int sectionIndex = chunk.getSectionIndex(i1 * noiseSettings.getCellHeight() - 1 + minY);
             int sectionIndex1 = chunk.getSectionIndex(minY);
             Set<LevelChunkSection> set = Sets.newHashSet();
@@ -375,7 +_,10 @@
 
                                 interpolatedState = this.debugPreliminarySurfaceLevel(noiseChunk, i10, i7, i13, interpolatedState);
                                 if (interpolatedState != AIR && !SharedConstants.debugVoidTerrain(chunk.getPos())) {
-                                    section.setBlockState(i11, i8, i14, interpolatedState, false);
+                                    // Canvas start - optimize noise gen
+                                    if (!io.canvasmc.canvas.Config.INSTANCE.chunks.optimizeNoiseGeneration) section.setBlockState(i11, i8, i14, interpolatedState, false);
+                                    else populateNoiseWrapSetBlockStateOperation(section, i11, i8, i14, interpolatedState, false);
+                                    // Canvas end - optimize noise gen
                                     heightmapUnprimed.update(i11, i7, i14, interpolatedState);
                                     heightmapUnprimed1.update(i11, i7, i14, interpolatedState);
                                     if (aquifer.shouldScheduleFluidUpdate() && !interpolatedState.getFluidState().isEmpty()) {
@@ -395,6 +_,28 @@
         noiseChunk.stopInterpolation();
         return chunk;
     }
+    // Canvas start - optimize noise gen
+
+    private BlockState populateNoiseWrapSetBlockStateOperation(LevelChunkSection chunkSection, int chunkSectionBlockPosX, int chunkSectionBlockPosY, int chunkSectionBlockPosZ, BlockState blockState, boolean lock) {
+        chunkSection.nonEmptyBlockCount += 1;
+
+        if (!blockState.getFluidState().isEmpty()) {
+            chunkSection.tickingFluidCount += 1;
+        }
+
+        if (blockState.isRandomlyTicking()) {
+            chunkSection.tickingBlockCount += 1;
+        }
+
+        var blockStateId = chunkSection.states.data.palette.idFor(blockState);
+        chunkSection.states.data.storage().set(
+            chunkSection.states.strategy.getIndex(chunkSectionBlockPosX, chunkSectionBlockPosY,
+                chunkSectionBlockPosZ
+            ), blockStateId);
+
+        return blockState;
+    }
+    // Canvas end - optimize noise gen
 
     private BlockState debugPreliminarySurfaceLevel(NoiseChunk chunk, int x, int y, int z, BlockState state) {
         return state;
