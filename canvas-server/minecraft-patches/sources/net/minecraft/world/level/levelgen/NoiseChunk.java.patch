--- a/net/minecraft/world/level/levelgen/NoiseChunk.java
+++ b/net/minecraft/world/level/levelgen/NoiseChunk.java
@@ -7,6 +_,8 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.locks.ReentrantLock;
+import java.util.concurrent.locks.StampedLock;
 import javax.annotation.Nullable;
 import net.minecraft.core.QuartPos;
 import net.minecraft.core.SectionPos;
@@ -56,7 +_,8 @@
     long interpolationCounter;
     long arrayInterpolationCounter;
     int arrayIndex;
-    private final DensityFunction.ContextProvider sliceFillingContextProvider = new DensityFunction.ContextProvider() {
+    // Canvas start - dfc
+    public class NoiseChunkSliceFillingContextProvider implements DensityFunction.ContextProvider {
         @Override
         public DensityFunction.FunctionContext forIndex(int arrayIndex) {
             NoiseChunk.this.cellStartBlockY = (arrayIndex + NoiseChunk.this.cellNoiseMinY) * NoiseChunk.this.cellHeight;
@@ -76,7 +_,9 @@
                 values[i] = function.compute(NoiseChunk.this);
             }
         }
-    };
+    }
+    private final DensityFunction.ContextProvider sliceFillingContextProvider = new NoiseChunkSliceFillingContextProvider();
+    // Canvas end
 
     public static NoiseChunk forChunk(
         ChunkAccess chunk,
@@ -236,7 +_,9 @@
         this.arrayInterpolationCounter++;
     }
 
+    private final ReentrantLock firstCellLock = new ReentrantLock(); // Canvas - interpolation lock
     public void initializeForFirstCellX() {
+        firstCellLock.lock(); // Canvas - interpolation lock // TODO - come back to this, wtf is going on?
         if (this.interpolating) {
             throw new IllegalStateException("Staring interpolation twice");
         } else {
@@ -329,6 +_,7 @@
         if (!this.interpolating) {
             throw new IllegalStateException("Staring interpolation twice");
         } else {
+            this.firstCellLock.unlock(); // Canvas - interpolation lock
             this.interpolating = false;
         }
     }
