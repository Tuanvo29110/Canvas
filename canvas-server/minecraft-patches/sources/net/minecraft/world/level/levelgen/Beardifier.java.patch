--- a/net/minecraft/world/level/levelgen/Beardifier.java
+++ b/net/minecraft/world/level/levelgen/Beardifier.java
@@ -29,6 +_,16 @@
     });
     private final ObjectListIterator<Beardifier.Rigid> pieceIterator;
     private final ObjectListIterator<JigsawJunction> junctionIterator;
+    // Canvas start - optimize beardifier
+    private @javax.annotation.Nullable Beardifier.Rigid[] pieceArray;
+    private @javax.annotation.Nullable JigsawJunction[] junctionArray;
+    private void initArrays() {
+        this.pieceArray = com.google.common.collect.Iterators.toArray(this.pieceIterator, Beardifier.Rigid.class);
+        this.pieceIterator.back(Integer.MAX_VALUE);
+        this.junctionArray = com.google.common.collect.Iterators.toArray(this.junctionIterator, JigsawJunction.class);
+        this.junctionIterator.back(Integer.MAX_VALUE);
+    }
+    // Canvas end
 
     public static Beardifier forStructuresInChunk(StructureManager structureManager, ChunkPos chunkPos) {
         int minBlockX = chunkPos.getMinBlockX();
@@ -77,6 +_,44 @@
 
     @Override
     public double compute(DensityFunction.FunctionContext context) {
+        // Canvas start - optimize beardifier
+        if (io.canvasmc.canvas.Config.INSTANCE.chunks.optimizeBeardifier) {
+            if (this.pieceArray == null || this.junctionArray == null) {
+                this.initArrays();
+            }
+
+            int i = context.blockX();
+            int j = context.blockY();
+            int k = context.blockZ();
+            double d = 0.0;
+
+            for (Beardifier.Rigid piece : this.pieceArray) {
+                BoundingBox blockBox = piece.box();
+                int l = piece.groundLevelDelta();
+                int m = Math.max(0, Math.max(blockBox.minX() - i, i - blockBox.maxX()));
+                int n = Math.max(0, Math.max(blockBox.minZ() - k, k - blockBox.maxZ()));
+                int o = blockBox.minY() + l;
+                int p = j - o;
+
+                d += switch (piece.terrainAdjustment()) {
+                    case NONE -> 0.0;
+                    case BURY -> getBuryContribution(m, (double)p / 2.0, n);
+                    case BEARD_THIN -> getBeardContribution(m, p, n, p) * 0.8;
+                    case BEARD_BOX -> getBeardContribution(m, Math.max(0, Math.max(o - j, j - blockBox.maxY())), n, p) * 0.8;
+                    case ENCAPSULATE -> getBuryContribution((double)m / 2.0, (double)Math.max(0, Math.max(blockBox.minY() - j, j - blockBox.maxY())) / 2.0, (double)n / 2.0) * 0.8;
+                };
+            }
+
+            for (JigsawJunction jigsawJunction : this.junctionArray) {
+                int r = i - jigsawJunction.getSourceX();
+                int l = j - jigsawJunction.getSourceGroundY();
+                int m = k - jigsawJunction.getSourceZ();
+                d += getBeardContribution(r, l, m, l) * 0.4;
+            }
+
+            return d;
+        }
+        // Canvas end
         int i = context.blockX();
         int i1 = context.blockY();
         int i2 = context.blockZ();
