--- a/net/minecraft/world/level/levelgen/synth/PerlinNoise.java
+++ b/net/minecraft/world/level/levelgen/synth/PerlinNoise.java
@@ -26,6 +_,10 @@
     private final double lowestFreqValueFactor;
     private final double lowestFreqInputFactor;
     private final double maxValue;
+    // Canvas start - optimize noise generation
+    private final int octaveSamplersCount;
+    private final double [] amplitudesArray;
+    // Canvas end - optimize noise generation
 
     @Deprecated
     public static PerlinNoise createLegacyForBlendedNoise(RandomSource random, IntStream octaves) {
@@ -127,6 +_,10 @@
         this.lowestFreqInputFactor = Math.pow(2.0, -i);
         this.lowestFreqValueFactor = Math.pow(2.0, size - 1) / (Math.pow(2.0, size) - 1.0);
         this.maxValue = this.edgeValue(2.0);
+        // Canvas start - optimize noise generation
+        this.octaveSamplersCount = this.noiseLevels.length;
+        this.amplitudesArray = this.amplitudes.toDoubleArray();
+        // Canvas end - optimize noise generation
     }
 
     protected double maxValue() {
@@ -138,7 +_,27 @@
     }
 
     public double getValue(double x, double y, double z) {
-        return this.getValue(x, y, z, 0.0, 0.0, false);
+        // Canvas start - optimize for common cases
+        double d = 0.0;
+        double e = this.lowestFreqInputFactor;
+        double f = this.lowestFreqValueFactor;
+
+        for (int i = 0; i < this.octaveSamplersCount; ++i) {
+            ImprovedNoise perlinNoiseSampler = this.noiseLevels[i];
+            if (perlinNoiseSampler != null) {
+                @SuppressWarnings("deprecation")
+                double g = perlinNoiseSampler.noise(
+                    wrap(x * e), wrap(y * e), wrap(z * e), 0.0, 0.0
+                );
+                d += this.amplitudesArray[i] * g * f;
+            }
+
+            e *= 2.0;
+            f /= 2.0;
+        }
+
+        return d;
+        // Canvas end - optimize for common cases
     }
 
     @Deprecated
@@ -187,7 +_,7 @@
     }
 
     public static double wrap(double value) {
-        return value - Mth.lfloor(value / 3.3554432E7 + 0.5) * 3.3554432E7;
+        return value - Math.floor(value / 3.3554432E7 + 0.5) * 3.3554432E7; // Canvas - optimize noise generation
     }
 
     protected int firstOctave() {
