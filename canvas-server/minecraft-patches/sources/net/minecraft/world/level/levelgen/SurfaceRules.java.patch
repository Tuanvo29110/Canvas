--- a/net/minecraft/world/level/levelgen/SurfaceRules.java
+++ b/net/minecraft/world/level/levelgen/SurfaceRules.java
@@ -313,8 +_,15 @@
         }
 
         protected void updateY(int stoneDepthAbove, int stoneDepthBelow, int waterHeight, int blockX, int blockY, int blockZ) {
-            this.lastUpdateY++;
-            this.biome = Suppliers.memoize(() -> this.biomeGetter.apply(this.pos.set(blockX, blockY, blockZ)));
+            // Canvas start - reduce worldgen allocations
+            // reuse supplier object instead of creating new ones every time
+            ++this.lastUpdateY;
+            Supplier<Holder<Biome>> getter = this.biome;
+            if (getter == null) {
+                this.biome = getter = new io.canvasmc.canvas.util.PositionalBiomeGetter(this.biomeGetter, this.pos);
+            }
+            ((io.canvasmc.canvas.util.PositionalBiomeGetter) getter).update(blockX, blockY, blockZ);
+            // Canvas end
             this.blockY = blockY;
             this.waterHeight = waterHeight;
             this.stoneDepthBelow = stoneDepthBelow;
@@ -582,8 +_,13 @@
         @Nullable
         @Override
         public BlockState tryApply(int x, int y, int z) {
-            for (SurfaceRules.SurfaceRule surfaceRule : this.rules) {
-                BlockState blockState = surfaceRule.tryApply(x, y, z);
+            // Canvas start - reduce worldgen allocations
+            // avoid iterator allocation
+            int size = this.rules.size();
+            //noinspection ForLoopReplaceableByForEach
+            for (int i = 0; i < size; i++) {
+                BlockState blockState = this.rules.get(i).tryApply(x, y, z);
+            // Canvas end
                 if (blockState != null) {
                     return blockState;
                 }
