--- a/net/minecraft/world/level/levelgen/SurfaceRules.java
+++ b/net/minecraft/world/level/levelgen/SurfaceRules.java
@@ -313,8 +_,15 @@
         }
 
         protected void updateY(int stoneDepthAbove, int stoneDepthBelow, int waterHeight, int blockX, int blockY, int blockZ) {
-            this.lastUpdateY++;
-            this.biome = Suppliers.memoize(() -> this.biomeGetter.apply(this.pos.set(blockX, blockY, blockZ)));
+            // Canvas start - reduce worldgen allocations
+            // reuse supplier object instead of creating new ones every time
+            ++this.lastUpdateY;
+            Supplier<Holder<Biome>> getter = this.biome;
+            if (getter == null) {
+                this.biome = getter = new io.canvasmc.canvas.util.PositionalBiomeGetter(this.biomeGetter, this.pos);
+            }
+            ((io.canvasmc.canvas.util.PositionalBiomeGetter) getter).update(blockX, blockY, blockZ);
+            // Canvas end - reduce worldgen allocations
             this.blockY = blockY;
             this.waterHeight = waterHeight;
             this.stoneDepthBelow = stoneDepthBelow;
@@ -397,6 +_,22 @@
 
             @Override
             protected boolean compute() {
+                // Canvas start - MC-258859
+                if (io.canvasmc.canvas.Config.INSTANCE.fixes.mc258859) {
+                    int x = this.context.blockX & 15;
+                    int z = this.context.blockZ & 15;
+                    ChunkAccess chunk = this.context.chunk;
+                    int south = chunk.getHeight(Heightmap.Types.WORLD_SURFACE_WG, x, Math.max(z - 1, 0));
+                    int north = chunk.getHeight(Heightmap.Types.WORLD_SURFACE_WG, x, Math.min(z + 1, 15));
+                    if (Math.abs(north - south) >= 4) {
+                        return true;
+                    } else {
+                        int west = chunk.getHeight(Heightmap.Types.WORLD_SURFACE_WG, Math.max(x - 1, 0), z);
+                        int east = chunk.getHeight(Heightmap.Types.WORLD_SURFACE_WG, Math.min(x + 1, 15), z);
+                        return Math.abs(west - east) >= 4;
+                    }
+                }
+                // Canvas end - MC-258859
                 int i = this.context.blockX & 15;
                 int i1 = this.context.blockZ & 15;
                 int max = Math.max(i1 - 1, 0);
@@ -582,8 +_,13 @@
         @Nullable
         @Override
         public BlockState tryApply(int x, int y, int z) {
-            for (SurfaceRules.SurfaceRule surfaceRule : this.rules) {
-                BlockState blockState = surfaceRule.tryApply(x, y, z);
+            // Canvas start - reduce worldgen allocations
+            // avoid iterator allocation
+            int size = this.rules.size();
+            //noinspection ForLoopReplaceableByForEach
+            for (int i = 0; i < size; i++) {
+                BlockState blockState = this.rules.get(i).tryApply(x, y, z);
+            // Canvas end - reduce worldgen allocations
                 if (blockState != null) {
                     return blockState;
                 }
