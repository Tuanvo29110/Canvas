--- a/net/minecraft/world/level/border/WorldBorder.java
+++ b/net/minecraft/world/level/border/WorldBorder.java
@@ -350,6 +_,8 @@
         WorldBorder.BorderExtent update();
 
         VoxelShape getCollisionShape();
+        long getIdentifier(); // Canvas - optimize block entities
+        boolean isMoving(); // Canvas - optimize block entities
     }
 
     public record DistancePerDirection(Direction direction, double distance) {
@@ -369,6 +_,18 @@
             this.lerpBegin = Util.getMillis();
             this.lerpEnd = this.lerpBegin + lerpDuration;
         }
+        // Canvas start - optimize block entities
+
+        @Override
+        public long getIdentifier() {
+            return Long.MIN_VALUE;
+        }
+
+        @Override
+        public boolean isMoving() {
+            return true;
+        }
+        // Canvas end - optimize block entities
 
         @Override
         public double getMinX() {
@@ -645,7 +_,22 @@
                 ),
                 BooleanOp.ONLY_FIRST
             );
-        }
+        // Canvas start - optimize block entities
+            this.identifier = computeIdentifier(this.size, centerX, centerZ);
+        }
+        private long identifier;
+
+        private static long computeIdentifier(double size, double centerX, double centerZ) {
+            long hash = 1469598103934665603L;
+            hash ^= Double.doubleToRawLongBits(size);
+            hash *= 1099511628211L;
+            hash ^= Double.doubleToRawLongBits(centerX);
+            hash *= 1099511628211L;
+            hash ^= Double.doubleToRawLongBits(centerZ);
+            hash *= 1099511628211L;
+            return hash;
+        }
+        // Canvas end - optimize block entities
 
         @Override
         public void onAbsoluteMaxSizeChange() {
@@ -666,5 +_,17 @@
         public VoxelShape getCollisionShape() {
             return this.shape;
         }
+        // Canvas start - optimize block entities
+
+        @Override
+        public long getIdentifier() {
+            return identifier;
+        }
+
+        @Override
+        public boolean isMoving() {
+            return false;
+        }
+        // Canvas end - optimize block entities
     }
 }
