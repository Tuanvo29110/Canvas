--- a/net/minecraft/world/level/EntityGetter.java
+++ b/net/minecraft/world/level/EntityGetter.java
@@ -188,6 +_,93 @@
         return false;
     }
     // Paper end - Affects Spawning API
+    // Canvas start - optimize spawner
+    // patch originally from Leaf, modified to work with region
+    // threading and to be more optimized by reducing the distance
+    // of the nearby players map to be dynamic with the range
+
+    default boolean hasNearbyAlivePlayerThatAffectsSpawningForSpawner(double x, double y, double z, double range) {
+        if (range > 33) {
+            return hasNearbyAlivePlayerThatAffectsSpawningForLargerRangeSpawner(x, y, z, range);
+        }
+
+        final net.minecraft.core.BlockPos.MutableBlockPos mutablePos = new net.minecraft.core.BlockPos.MutableBlockPos();
+
+        mutablePos.set(x, y, z);
+
+        final ca.spottedleaf.moonrise.common.list.ReferenceList<net.minecraft.server.level.ServerPlayer> players = ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel) this).moonrise$getNearbyPlayers().getPlayers(
+            mutablePos,
+            range <= 16 ? ca.spottedleaf.moonrise.common.misc.NearbyPlayers.NearbyMapType.GENERAL_REALLY_REALLY_SMALL : ca.spottedleaf.moonrise.common.misc.NearbyPlayers.NearbyMapType.GENERAL_REALLY_SMALL // NearbyPlayers.GENERAL_AREA_VIEW_DISTANCE: 33
+        );
+
+        if (players == null) {
+            return false;
+        }
+
+        final net.minecraft.server.level.ServerPlayer[] raw = players.getRawDataUnchecked();
+        final int len = players.size();
+
+        java.util.Objects.checkFromIndexSize(0, len, raw.length);
+
+        for (int i = 0; i < len; ++i) {
+            final net.minecraft.server.level.ServerPlayer player = raw[i];
+            final double distanceSqr = player.distanceToSqr(x, y, z);
+
+            if (range < 0.0D || distanceSqr < range * range) {
+                if (!player.isSpectator() && player.isAlive() && player.affectsSpawning) {
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
+    default boolean hasNearbyAlivePlayerThatAffectsSpawningForLargerRangeSpawner(double x, double y, double z, double range) {
+        for (Player player : this.getLocalPlayers()) {
+            double distanceSqr = player.distanceToSqr(x, y, z);
+            if (range < 0.0D || distanceSqr < range * range) {
+                if (!player.isSpectator() && player.isAlive() && player.affectsSpawning) {
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
+    default boolean hasNearbyAlivePlayerThatAffectsSpawningForZombie(int x, int y, int z, double range) {
+        final net.minecraft.core.BlockPos.MutableBlockPos mutablePos = new net.minecraft.core.BlockPos.MutableBlockPos();
+
+        mutablePos.set(x, y, z);
+
+        final ca.spottedleaf.moonrise.common.list.ReferenceList<net.minecraft.server.level.ServerPlayer> players = ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel) this).moonrise$getNearbyPlayers().getPlayers(
+            mutablePos, ca.spottedleaf.moonrise.common.misc.NearbyPlayers.NearbyMapType.GENERAL_REALLY_REALLY_SMALL
+        );
+
+        if (players == null) {
+            return false;
+        }
+
+        final net.minecraft.server.level.ServerPlayer[] raw = players.getRawDataUnchecked();
+        final int len = players.size();
+
+        java.util.Objects.checkFromIndexSize(0, len, raw.length);
+
+        for (int i = 0; i < len; ++i) {
+            final net.minecraft.server.level.ServerPlayer player = raw[i];
+            final double distanceSqr = player.distanceToSqr(x, y, z);
+
+            if (range < 0.0D || distanceSqr < range * range) {
+                if (!player.isSpectator() && player.isAlive() && player.affectsSpawning) {
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+    // Canvas end - optimize spawner
 
     default boolean hasNearbyAlivePlayer(double x, double y, double z, double distance) {
         for (Player player : this.getLocalPlayers()) { // Folia - region threading
