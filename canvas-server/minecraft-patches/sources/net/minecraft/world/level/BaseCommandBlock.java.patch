--- a/net/minecraft/world/level/BaseCommandBlock.java
+++ b/net/minecraft/world/level/BaseCommandBlock.java
@@ -3,6 +_,9 @@
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import javax.annotation.Nullable;
+import com.mojang.brigadier.CommandDispatcher;
+import com.mojang.brigadier.ParseResults;
+import io.canvasmc.canvas.Config;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
@@ -22,7 +_,7 @@
 import net.minecraft.world.phys.Vec3;
 
 public abstract class BaseCommandBlock implements CommandSource {
-    private static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat("HH:mm:ss");
+    private static final ThreadLocal<SimpleDateFormat> TIME_FORMAT = ThreadLocal.withInitial(() -> new SimpleDateFormat("HH:mm:ss")); // Canvas - SDF isn't thread safe
     private static final Component DEFAULT_NAME = Component.literal("@");
     private static final int NO_LAST_EXECUTION = -1;
     private long lastExecution = -1L;
@@ -34,6 +_,8 @@
     private String command = "";
     @Nullable
     private Component customName;
+    private String lastExecutedCommand; // Canvas
+    private ParseResults<CommandSourceStack> parseResultsCache; // Canvas
     // CraftBukkit start
     @Override
     public abstract org.bukkit.command.CommandSender getBukkitSender(CommandSourceStack wrapper);
@@ -113,6 +_,34 @@
                             this.successCount++;
                         }
                     });
+                    // Canvas start - optimize command blocks
+                    if (Config.INSTANCE.blocks.cacheCommandBlockParseResults) {
+                        // Prepare the command cache first
+                        String commandCache = this.command;
+                        com.google.common.base.Joiner joiner = com.google.common.base.Joiner.on(" ");
+                        if (commandCache.startsWith("/")) {
+                            commandCache = commandCache.substring(1);
+                        }
+                        // Ensure the event is still called
+                        org.bukkit.event.server.ServerCommandEvent event = new org.bukkit.event.server.ServerCommandEvent(commandSourceStack.getBukkitSender(), commandCache);
+                        org.bukkit.Bukkit.getPluginManager().callEvent(event);
+                        if (event.callEvent()) {
+                            commandCache = event.getCommand();
+                            String[] args = commandCache.split(" ");
+                            // Dont try and run empty commands
+                            if (args.length != 0) {
+                                String newCommand = joiner.join(args);
+                                // We cache if we need to
+                                if (!newCommand.equals(lastExecutedCommand) || parseResultsCache == null) {
+                                    // Re-compile cache
+                                    MinecraftServer.LOGGER.info("Recompiling parse results cache for command block at ({}, {}, {})", this.getPosition().x, this.getPosition().y, this.getPosition().z);
+                                    this.cache(server.getCommands().getDispatcher(), commandSourceStack, newCommand);
+                                }
+                                server.getCommands().performCommand(parseResultsCache, newCommand);
+                            }
+                        } else return true;
+                    } else {
+                    // Canvas end
                     // Paper start - ServerCommandEvent
                     org.bukkit.event.server.ServerCommandEvent event = new org.bukkit.event.server.ServerCommandEvent(commandSourceStack.getBukkitSender(), net.minecraft.commands.Commands.trimOptionalPrefix(this.command));
                     if (!event.callEvent()) {
@@ -120,6 +_,7 @@
                     }
                     server.getCommands().performPrefixedCommand(commandSourceStack, event.getCommand());
                     // Paper end - ServerCommandEvent
+                    } // Canvas - optimize command blocks
                 } catch (Throwable var6) {
                     CrashReport crashReport = CrashReport.forThrowable(var6, "Executing command block");
                     CrashReportCategory crashReportCategory = crashReport.addCategory("Command to be executed");
@@ -138,6 +_,13 @@
             return true;
         }
     }
+    // Canvas start - optimize command blocks
+
+    private void cache(CommandDispatcher<CommandSourceStack> dispatcher, CommandSourceStack commandSourceStack, String commandCache) {
+        this.parseResultsCache = dispatcher.parse(commandCache, commandSourceStack);
+        this.lastExecutedCommand = commandCache;
+    }
+    // Canvas end
 
     public Component getName() {
         return this.customName != null ? this.customName : DEFAULT_NAME;
@@ -156,7 +_,7 @@
     public void sendSystemMessage(Component component) {
         if (this.trackOutput) {
             org.spigotmc.AsyncCatcher.catchOp("sendSystemMessage to a command block"); // Paper - Don't broadcast messages to command blocks
-            this.lastOutput = Component.literal("[" + TIME_FORMAT.format(new Date()) + "] ").append(component);
+            this.lastOutput = Component.literal("[" + TIME_FORMAT.get().format(new Date()) + "] ").append(component); // Canvas - SDF isn't thread safe
             this.onUpdated();
         }
     }
