--- a/net/minecraft/world/ticks/LevelTicks.java
+++ b/net/minecraft/world/ticks/LevelTicks.java
@@ -23,8 +_,6 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
 import net.minecraft.core.Vec3i;
-import net.minecraft.util.profiling.Profiler;
-import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
@@ -148,20 +_,13 @@
     }
 
     public void tick(long gameTime, int maxAllowedTicks, BiConsumer<BlockPos, T> ticker) {
-        ProfilerFiller profilerFiller = Profiler.get();
-        profilerFiller.push("collect");
-        this.collectTicks(gameTime, maxAllowedTicks, profilerFiller);
-        profilerFiller.popPush("run");
-        profilerFiller.incrementCounter("ticksToRun", this.toRunThisTick.size());
+        this.collectTicks(gameTime, maxAllowedTicks);
         this.runCollectedTicks(ticker);
-        profilerFiller.popPush("cleanup");
         this.cleanupAfterTick();
-        profilerFiller.pop();
     }
 
-    private void collectTicks(long gameTime, int maxAllowedTicks, ProfilerFiller profiler) {
+    private void collectTicks(long gameTime, int maxAllowedTicks) {
         this.sortContainersToTick(gameTime);
-        profiler.incrementCounter("containersToTick", this.containersToTick.size());
         this.drainContainers(gameTime, maxAllowedTicks);
         this.rescheduleLeftoverContainers();
     }
@@ -247,12 +_,6 @@
     }
 
     private void runCollectedTicks(BiConsumer<BlockPos, T> ticker) {
-        // Folia start - profiler
-        io.papermc.paper.threadedregions.TickRegionScheduler.getProfiler().addCounter(
-            ca.spottedleaf.leafprofiler.LProfilerRegistry.BLOCK_OR_FLUID_TICK_COUNT,
-            (long)this.toRunThisTick.size()
-        );
-        // Folia end - profiler
         while (!this.toRunThisTick.isEmpty()) {
             ScheduledTick<T> scheduledTick = this.toRunThisTick.poll();
             if (!this.toRunThisTickSet.isEmpty()) {
