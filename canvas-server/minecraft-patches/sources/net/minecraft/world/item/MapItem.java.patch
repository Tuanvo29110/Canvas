--- a/net/minecraft/world/item/MapItem.java
+++ b/net/minecraft/world/item/MapItem.java
@@ -5,6 +_,7 @@
 import com.google.common.collect.Multiset;
 import com.google.common.collect.Multisets;
 import javax.annotation.Nullable;
+import io.canvasmc.canvas.Config;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Holder;
@@ -194,6 +_,7 @@
     public static void renderBiomePreviewMap(ServerLevel serverLevel, ItemStack stack) {
         MapItemSavedData savedData = getSavedData(stack, serverLevel);
         if (savedData != null) {
+            synchronized (savedData) { // Canvas - threadsafe
             savedData.isExplorerMap = true; // Purpur - Explorer Map API
             if (serverLevel.dimension() == savedData.dimension) {
                 int i = 1 << savedData.scale;
@@ -264,6 +_,7 @@
                     }
                 }
             }
+            } // Canvas - threadsafe
         }
     }
 
@@ -271,13 +_,26 @@
     public void inventoryTick(ItemStack stack, ServerLevel level, Entity entity, @Nullable EquipmentSlot slot) {
         MapItemSavedData savedData = getSavedData(stack, level);
         if (savedData != null) {
+            synchronized (savedData) { // Canvas - threadsafe
             if (entity instanceof Player player) {
                 savedData.tickCarriedBy(player, stack);
             }
 
-            if (!savedData.locked && slot != null && slot.getType() == EquipmentSlot.Type.HAND) {
+            // Canvas start - don't update maps if t hey don't have the CraftMapRenderer in the render list
+            boolean shouldUpdateMap = !savedData.locked && slot != null && slot.getType() == EquipmentSlot.Type.HAND;
+            if (Config.INSTANCE.skipMapItemDataUpdates) {
+                    for (org.bukkit.map.MapRenderer mapRenderer : savedData.mapView.getRenderers()) {
+                        if (mapRenderer.getClass() == org.bukkit.craftbukkit.map.CraftMapRenderer.class) {
+                            shouldUpdateMap = true;
+                            break;
+                        }
+                    }
+            }
+            if (shouldUpdateMap) {
+            // Canvas end
                 this.update(level, entity, savedData);
             }
+            } // Canvas - threadsafe
         }
     }
 
