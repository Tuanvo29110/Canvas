--- a/net/minecraft/world/entity/LivingEntity.java
+++ b/net/minecraft/world/entity/LivingEntity.java
@@ -10,6 +_,8 @@
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.region.ServerRegions;
 import it.unimi.dsi.fastutil.doubles.DoubleDoubleImmutablePair;
 import it.unimi.dsi.fastutil.objects.Reference2ObjectArrayMap;
 import it.unimi.dsi.fastutil.objects.Reference2ObjectMap;
@@ -198,7 +_,7 @@
     };
     private final AttributeMap attributes;
     public CombatTracker combatTracker = new CombatTracker(this);
-    public final Map<Holder<MobEffect>, MobEffectInstance> activeEffects = Maps.newHashMap();
+    public final Map<Holder<MobEffect>, MobEffectInstance> activeEffects = Maps.newConcurrentMap(); // Canvas - concurrent
     private final Map<EquipmentSlot, ItemStack> lastEquipmentItems = Util.makeEnumMap(EquipmentSlot.class, slot -> ItemStack.EMPTY);
     public boolean swinging;
     private boolean discardFriction = false;
@@ -264,7 +_,7 @@
     protected final EntityEquipment equipment;
     // CraftBukkit start
     public int expToDrop;
-    public List<DefaultDrop> drops = new java.util.ArrayList<>(); // Paper - Restore vanilla drops behavior
+    public List<DefaultDrop> drops = new java.util.concurrent.CopyOnWriteArrayList<>(); // Paper - Restore vanilla drops behavior // Canvas - concurrent
     public final org.bukkit.craftbukkit.attribute.CraftAttributeMap craftAttributes;
     public boolean collides = true;
     public Set<UUID> collidableExemptions = new java.util.HashSet<>();
@@ -507,6 +_,7 @@
             }
         }
 
+        lagCompensation(); // Canvas
         this.tickEffects();
         this.yHeadRotO = this.yHeadRot;
         this.yBodyRotO = this.yBodyRot;
@@ -514,6 +_,17 @@
         this.xRotO = this.getXRot();
         profilerFiller.pop();
     }
+    // Canvas start
+
+    private void lagCompensation() {
+        if (!Config.INSTANCE.lagCompensation.enabled || !Config.INSTANCE.lagCompensation.potionEffectAcceleration) return;
+        if (this.level().isClientSide()) return;
+
+        for (int i = 0; i < ServerRegions.getTickData((ServerLevel) this.level()).tpsCalculator.applicableMissedTicks(); i++) { // Canvas - Threaded Regions
+            tickEffects();
+        }
+    }
+    // Canvas end
 
     @Override
     protected float getBlockSpeedFactor() {
@@ -992,12 +_,16 @@
     }
 
     private void updateSynchronizedMobEffectParticles() {
-        List<ParticleOptions> list = this.activeEffects
-            .values()
-            .stream()
-            .filter(MobEffectInstance::isVisible)
-            .map(MobEffectInstance::getParticleOptions)
-            .toList();
+        // Canvas start - replace stream
+        List<ParticleOptions> list = new java.util.ArrayList<>();
+        for (MobEffectInstance mobEffectInstance : this.activeEffects
+            .values()) {
+            if (mobEffectInstance.isVisible()) {
+                ParticleOptions particleOptions = mobEffectInstance.getParticleOptions();
+                list.add(particleOptions);
+            }
+        }
+        // Canvas end
         this.entityData.set(DATA_EFFECT_PARTICLES, list);
         this.entityData.set(DATA_EFFECT_AMBIENCE_ID, areAllEffectsAmbient(this.activeEffects.values()));
     }
@@ -1555,7 +_,7 @@
             boolean flag2 = !flag; // CraftBukkit - Ensure to return false if damage is blocked
             if (flag2) {
                 this.lastDamageSource = damageSource;
-                this.lastDamageStamp = this.level().getGameTime();
+                this.lastDamageStamp = this.tickCount; // Canvas - use tickCount for damage source timestamps
 
                 for (MobEffectInstance mobEffectInstance : this.getActiveEffects()) {
                     mobEffectInstance.onMobHurt(level, this, damageSource, amount);
@@ -1797,7 +_,7 @@
 
     @Nullable
     public DamageSource getLastDamageSource() {
-        if (this.level().getGameTime() - this.lastDamageStamp > 40L) {
+        if (this.tickCount - this.lastDamageStamp > 40L) { // Canvas - use tickCount for damage source timestamps
             this.lastDamageSource = null;
         }
 
@@ -1835,7 +_,9 @@
         }
     }
 
+    public boolean processingDeath = false; // Canvas - item entity spread
     public void die(DamageSource damageSource) {
+        processingDeath = true; // Canvas - item entity spread
         if (!this.isRemoved() && !this.dead) {
             Entity entity = damageSource.getEntity();
             LivingEntity killCredit = this.getKillCredit();
@@ -1901,6 +_,7 @@
             }
             // Paper end
         }
+        processingDeath = false; // Canvas
     }
 
     protected void createWitherRose(@Nullable LivingEntity entitySource) {
@@ -2623,7 +_,7 @@
         }
 
         this.lastDamageSource = damageSource;
-        this.lastDamageStamp = this.level().getGameTime();
+        this.lastDamageStamp = this.tickCount; // Canvas - use tickCount for damage source timestamps
     }
 
     @Override
@@ -3024,7 +_,7 @@
                 f2 *= 0.5F;
             }
 
-            if (f2 > 0.0F) {
+            if (f2 > 0.0F && (!Config.INSTANCE.fixes.mc136249 || autoSpinAttackTicks == 0)) { // Canvas - mc136249
                 f += (0.54600006F - f) * f2;
                 f1 += (this.getSpeed() - f1) * f2;
             }
@@ -3709,6 +_,7 @@
     }
 
     protected void pushEntities() {
+        if (Config.INSTANCE.entities.onlyPlayersPushEntities && !(this instanceof ServerPlayer)) return; // Canvas - only players push entities config
         // Paper start - don't run getEntities if we're not going to use its result
         if (!this.isPushable()) {
             return;
@@ -3796,6 +_,11 @@
     public void stopRiding() {
         // Paper start - Force entity dismount during teleportation
         this.stopRiding(false);
+        // Canvas start
+        if (this instanceof Mob navigatingEntity) {
+            navigatingEntity.lithium$updateNavigationRegistration();
+        }
+        // Canvas end
     }
 
     @Override
@@ -4009,6 +_,18 @@
                 );
             }
 
+            // Canvas start - item entity spread
+            if (processingDeath) {
+                float halfedRandom = this.random.nextFloat() * 0.5F;
+                float piRandom = this.random.nextFloat() * (float) (Math.PI * 2);
+                double factor = Config.INSTANCE.entities.itemEntitySpreadFactor;
+                itemEntity.setDeltaMovement(
+                    (-Mth.sin(piRandom) * halfedRandom) * factor,
+                    0.2F * factor,
+                    (Mth.cos(piRandom) * halfedRandom) * factor
+                );
+            }
+            // Canvas end
             return itemEntity;
         }
     }
