--- a/net/minecraft/world/entity/LivingEntity.java
+++ b/net/minecraft/world/entity/LivingEntity.java
@@ -208,7 +_,7 @@
     private static final Dynamic<?> EMPTY_BRAIN = new Dynamic<>(JavaOps.INSTANCE, Map.of("memories", Map.of()));
     private final AttributeMap attributes;
     public CombatTracker combatTracker = new CombatTracker(this);
-    public final Map<Holder<MobEffect>, MobEffectInstance> activeEffects = Maps.newHashMap();
+    public final Map<Holder<MobEffect>, MobEffectInstance> activeEffects = new it.unimi.dsi.fastutil.objects.Reference2ReferenceOpenHashMap<>(); // Canvas - optimized collection
     private final Map<EquipmentSlot, ItemStack> lastEquipmentItems = Util.makeEnumMap(EquipmentSlot.class, slot -> ItemStack.EMPTY);
     public boolean swinging;
     private boolean discardFriction = false;
@@ -392,7 +_,7 @@
         if (this.level() instanceof ServerLevel serverLevel && onGround && this.fallDistance > 0.0) {
             this.onChangedBlock(serverLevel, pos);
             double d = Math.max(0, Mth.floor(this.calculateFallPower(this.fallDistance)));
-            if (d > 0.0 && !state.isAir()) {
+            if (d > 0.0 && !(state.isAir() || (io.canvasmc.canvas.Config.INSTANCE.fixes.mc30391 && (this instanceof net.minecraft.world.entity.animal.Chicken || this instanceof net.minecraft.world.entity.monster.Blaze || this instanceof WitherBoss)))) { // Canvas - MC-30391
                 double x = this.getX();
                 double y1 = this.getY();
                 double z = this.getZ();
@@ -453,7 +_,7 @@
 
         if (this.isAlive() && this.level() instanceof ServerLevel serverLevel1) {
             boolean flag = this instanceof Player;
-            if (this.isInWall()) {
+            if (shouldCheckForSuffocation() && this.isInWall()) { // Pufferfish - optimize suffocation
                 this.hurtServer(serverLevel1, this.damageSources().inWall(), 1.0F);
             } else if (flag && !serverLevel1.getWorldBorder().isWithinBounds(this.getBoundingBox())) {
                 double d = serverLevel1.getWorldBorder().getDistanceToBorder(this) + serverLevel1.getWorldBorder().getDamageSafeZone();
@@ -465,7 +_,7 @@
                 }
             }
 
-            if (this.isEyeInFluid(FluidTags.WATER)
+            if (this.isEyeInWater() // Canvas - optimize fluidOnEyes
                 && !serverLevel1.getBlockState(BlockPos.containing(this.getX(), this.getEyeY(), this.getZ())).is(Blocks.BUBBLE_COLUMN)) {
                 boolean flag1 = !this.canBreatheUnderwater()
                     && !MobEffectUtil.hasWaterBreathing(this)
@@ -532,6 +_,19 @@
         this.yRotO = this.getYRot();
         this.xRotO = this.getXRot();
     }
+    // Pufferfish start - optimize suffocation
+
+    public boolean couldPossiblyBeHurt(float amount) {
+        if ((float) this.invulnerableTime > (float) this.invulnerableDuration / 2.0F && amount <= this.lastHurt) {
+            return false;
+        }
+        return true;
+    }
+
+    public boolean shouldCheckForSuffocation() {
+        return !io.canvasmc.canvas.Config.INSTANCE.enableSuffocationOptimization || (tickCount % 10 == 0 && couldPossiblyBeHurt(1.0F));
+    }
+    // Pufferfish end
 
     @Override
     protected float getBlockSpeedFactor() {
@@ -552,9 +_,9 @@
     }
 
     protected void tryAddFrost() {
-        if (!this.getBlockStateOnLegacy().isAir()) {
+        if (true) { // Canvas - check frozen ticks before landing block
             int ticksFrozen = this.getTicksFrozen();
-            if (ticksFrozen > 0) {
+            if (ticksFrozen > 0 && !this.getBlockStateOnLegacy().isAir()) { // Canvas - check frozen ticks before landing block
                 AttributeInstance attribute = this.getAttribute(Attributes.MOVEMENT_SPEED);
                 if (attribute == null) {
                     return;
@@ -1022,14 +_,18 @@
     }
 
     private void updateSynchronizedMobEffectParticles() {
-        List<ParticleOptions> list = this.activeEffects
-            .values()
-            .stream()
-            .filter(MobEffectInstance::isVisible)
-            .map(MobEffectInstance::getParticleOptions)
-            .toList();
+        // Canvas start - remove streams
+        List<ParticleOptions> list = new java.util.ArrayList<>();
+        final Collection<MobEffectInstance> effectsValues = this.activeEffects.values(); // Canvas - optimized collection
+
+        for (MobEffectInstance effect : effectsValues) { // Canvas - optimized collection
+            if (effect.isVisible()) {
+                list.add(effect.getParticleOptions());
+            }
+        }
+        // Canvas end - remove streams
         this.entityData.set(DATA_EFFECT_PARTICLES, list);
-        this.entityData.set(DATA_EFFECT_AMBIENCE_ID, areAllEffectsAmbient(this.activeEffects.values()));
+        this.entityData.set(DATA_EFFECT_AMBIENCE_ID, areAllEffectsAmbient(effectsValues)); // Canvas - optimized collection
     }
 
     private void updateGlowingStatus() {
@@ -1462,7 +_,7 @@
             }
 
             boolean flag1 = true;
-            if (this.invulnerableTime > (float) this.invulnerableDuration / 2.0F && !damageSource.is(DamageTypeTags.BYPASSES_COOLDOWN)) { // CraftBukkit - restore use of maxNoDamageTicks
+            if (this.invulnerableTime > 0.0F && !damageSource.is(DamageTypeTags.BYPASSES_COOLDOWN)) { // CraftBukkit - restore use of maxNoDamageTicks // Canvas - combat configs
                 if (amount <= this.lastHurt) {
                     return false;
                 }
@@ -1491,7 +_,7 @@
                 }
                 if (this instanceof ServerPlayer && event.getDamage() == 0 && originAmount == 0) return false; // Paper - revert to vanilla damage - players are not affected by damage that is 0 - skip damage if the vanilla damage is 0 and was not modified by plugins in the event.
                 this.lastHurt = amount;
-                this.invulnerableTime = this.invulnerableDuration; // CraftBukkit - restore use of maxNoDamageTicks
+                this.invulnerableTime = io.canvasmc.canvas.Config.INSTANCE.combat.invulnerabilityTicks; // CraftBukkit - restore use of maxNoDamageTicks // Canvas - combat configs
                 // this.actuallyHurt(level, damageSource, amount);
                 // CraftBukkit end
                 this.hurtDuration = 10;
@@ -2138,6 +_,19 @@
     public Optional<BlockPos> getLastClimbablePos() {
         return this.lastClimbablePos;
     }
+    // Pufferfish start
+
+    private boolean cachedOnClimable = false;
+    private BlockPos lastClimbingPosition = null;
+
+    public boolean onClimbableCached() {
+        if (!this.blockPosition().equals(this.lastClimbingPosition)) {
+            this.cachedOnClimable = this.onClimbable();
+            this.lastClimbingPosition = this.blockPosition();
+        }
+        return this.cachedOnClimable;
+    }
+    // Pufferfish end
 
     public boolean onClimbable() {
         if (this.isSpectator()) {
@@ -2601,7 +_,7 @@
     @Override
     public void handleDamageEvent(DamageSource damageSource) {
         this.walkAnimation.setSpeed(1.5F);
-        this.invulnerableTime = 20;
+        this.invulnerableTime = io.canvasmc.canvas.Config.INSTANCE.combat.invulnerabilityTicks; // Canvas - combat configs
         this.hurtDuration = 10;
         this.hurtTime = this.hurtDuration;
         SoundEvent hurtSound = this.getHurtSound(damageSource);
@@ -2717,6 +_,7 @@
     }
 
     protected void updateSwingTime() {
+        if (!this.swinging && this.swingTime == 0) return; // Canvas - skip unnecessary calculations if player is not flying or swing
         int currentSwingDuration = this.getCurrentSwingDuration();
         if (this.swinging) {
             this.swingTime++;
@@ -3031,7 +_,7 @@
                 f2 *= 0.5F;
             }
 
-            if (f2 > 0.0F) {
+            if (f2 > 0.0F && (!io.canvasmc.canvas.Config.INSTANCE.fixes.mc136249 || autoSpinAttackTicks == 0)) { // Canvas - MC-136249
                 f += (0.54600006F - f) * f2;
                 f1 += (this.getSpeed() - f1) * f2;
             }
@@ -3569,7 +_,7 @@
             this.checkAutoSpinAttack(boundingBox, this.getBoundingBox());
         }
 
-        this.pushEntities();
+        if (io.canvasmc.canvas.Config.INSTANCE.entityCollisionMode.allEntitiesCanBePushed()) this.pushEntities(); // Canvas - entity collision mode config
         // Paper start - Add EntityMoveEvent
         if (((ServerLevel) this.level()).getCurrentWorldData().hasEntityMoveEvent && !(this instanceof Player)) { // Folia - region threading
             if (this.xo != this.getX() || this.yo != this.getY() || this.zo != this.getZ() || this.yRotO != this.getYRot() || this.xRotO != this.getXRot()) {
@@ -3605,6 +_,7 @@
     protected void updateFallFlying() {
         this.checkFallDistanceAccumulation();
         if (!this.level().isClientSide) {
+            if (!this.isFallFlying() && this.fallFlyTicks == 0) return; // Canvas - skip unnecessary calculations if player is not flying or swing
             if (!this.canGlide()) {
                 if (this.getSharedFlag(7) != false && !CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) // CraftBukkit
                 this.setSharedFlag(7, false);
@@ -3646,6 +_,12 @@
     }
 
     protected void pushEntities() {
+        // Canvas start - only players push config
+        io.canvasmc.canvas.entity.EntityCollisionMode collisionMode = io.canvasmc.canvas.Config.INSTANCE.entityCollisionMode;
+        if (collisionMode.noCollisions()) {
+            return;
+        }
+        // Canvas end - only players push config
         // Paper start - don't run getEntities if we're not going to use its result
         if (!this.isPushable()) {
             return;
@@ -3661,7 +_,11 @@
             return;
         }
         // Paper end - don't run getEntities if we're not going to use its result
-        List<Entity> pushableEntities = this.level().getPushableEntities(this, this.getBoundingBox());
+        // Canvas start - only players push config
+        List<? extends Entity> pushableEntities = collisionMode.onlyPlayersPushable() ?
+            this.level().getIntersectingPlayers(this, this.getBoundingBox(), EntitySelector.pushableBy(this))
+            : this.level().getPushableEntities(this, this.getBoundingBox());
+        // Canvas end - only players push config
         if (!pushableEntities.isEmpty()) {
             if (this.level() instanceof ServerLevel serverLevel) {
                 // Paper - don't run getEntities if we're not going to use its result; moved up
@@ -3946,6 +_,18 @@
                 );
             }
 
+            // Canvas start - item entity spread config
+            if (this.isDeadOrDying()) {
+                float halfedRandom = this.random.nextFloat() * 0.5F;
+                float piRandom = this.random.nextFloat() * (float) (Math.PI * 2);
+                double factor = io.canvasmc.canvas.Config.INSTANCE.itemEntitySpreadFactor;
+                itemEntity.setDeltaMovement(
+                    (-Mth.sin(piRandom) * halfedRandom) * factor,
+                    0.2F * factor,
+                    (Mth.cos(piRandom) * halfedRandom) * factor
+                );
+            }
+            // Canvas end - item entity spread config
             return itemEntity;
         }
     }
