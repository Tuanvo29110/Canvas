--- a/net/minecraft/world/entity/projectile/Projectile.java
+++ b/net/minecraft/world/entity/projectile/Projectile.java
@@ -71,9 +_,17 @@
     }
     // Paper end - Refresh ProjectileSource for projectiles
 
+    // Canvas start - Threaded Regions
     @Nullable
     @Override
     public Entity getOwner() {
+        Entity ret = this.getOwnerRaw();
+        return io.canvasmc.canvas.region.ServerRegions.isTickThreadFor(ret) && (ret == null || !ret.isRemoved()) ? ret : null;
+    }
+    // Canvas end
+    @Nullable
+    // @Override // Canvas - Threaded Regions
+    public Entity getOwnerRaw() { // Canvas - Threaded Regions
         return EntityReference.get(this.owner, this.level(), Entity.class);
     }
 
@@ -436,7 +_,7 @@
     @Override
     public boolean mayInteract(ServerLevel level, BlockPos pos) {
         Entity owner = this.getOwner();
-        return owner instanceof Player ? owner.mayInteract(level, pos) : owner == null || level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING, level.purpurConfig.projectilesMobGriefingOverride); // Purpur - Add mobGriefing override to everything affected
+        return owner instanceof Player && io.canvasmc.canvas.region.ServerRegions.isTickThreadFor(owner) ? owner.mayInteract(level, pos) : owner == null || level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING, level.purpurConfig.projectilesMobGriefingOverride); // Purpur - Add mobGriefing override to everything affected // Canvas - Threaded Regions
     }
 
     public boolean mayBreak(ServerLevel level) {
