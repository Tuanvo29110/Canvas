--- a/net/minecraft/world/entity/ai/sensing/PlayerSensor.java
+++ b/net/minecraft/world/entity/ai/sensing/PlayerSensor.java
@@ -26,17 +_,39 @@
 
     @Override
     protected void doTick(ServerLevel level, LivingEntity entity) {
-        List<Player> list = level.getLocalPlayers() // Folia - region threading
-            .stream()
-            .filter(EntitySelector.NO_SPECTATORS)
-            .filter(serverPlayer -> entity.closerThan(serverPlayer, this.getFollowDistance(entity)))
-            .sorted(Comparator.comparingDouble(entity::distanceToSqr))
-            .collect(Collectors.toList());
+        // Canvas start - remove streams
+        it.unimi.dsi.fastutil.objects.ObjectArrayList<Player> list = new it.unimi.dsi.fastutil.objects.ObjectArrayList<>();
+        for (Player serverPlayer : level.getLocalPlayers()) { // Folia - region threading
+            if (!EntitySelector.NO_SPECTATORS.test(serverPlayer)) {
+                continue;
+            }
+            if (!entity.closerThan(serverPlayer, this.getFollowDistance(entity))) {
+                continue;
+            }
+
+            list.add(serverPlayer);
+        }
+        list.unstableSort(Comparator.comparingDouble(entity::distanceToSqr));
+        // Canvas end - remove streams
         Brain<?> brain = entity.getBrain();
         brain.setMemory(MemoryModuleType.NEAREST_PLAYERS, list);
-        List<Player> list1 = list.stream().filter(player -> isEntityTargetable(level, entity, player)).collect(Collectors.toList());
+        // Canvas start - remove streams
+        List<Player> list1 = new java.util.ArrayList<>(list.size());
+        for (Player player : list) {
+            if (isEntityTargetable(level, entity, player)) {
+                list1.add(player);
+            }
+        }
+        // Canvas end - remove streams
         brain.setMemory(MemoryModuleType.NEAREST_VISIBLE_PLAYER, list1.isEmpty() ? null : list1.get(0));
-        List<Player> list2 = list1.stream().filter(player -> isEntityAttackable(level, entity, player)).toList();
+        // Canvas start - remove streams
+        List<Player> list2 = new java.util.ArrayList<>(list1.size());
+        for (Player player : list1) {
+            if (isEntityAttackable(level, entity, player)) {
+                list2.add(player);
+            }
+        }
+        // Canvas end - remove streams
         brain.setMemory(MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYERS, list2);
         brain.setMemory(MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, list2.isEmpty() ? null : list2.get(0));
     }
