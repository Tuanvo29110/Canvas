--- a/net/minecraft/world/entity/ai/behavior/Behavior.java
+++ b/net/minecraft/world/entity/ai/behavior/Behavior.java
@@ -15,6 +_,8 @@
     private final int minDuration;
     private final int maxDuration;
     private final String configKey; // Paper - configurable behavior tick rate and timings
+    private long cachedMemoryModCount = -1; // Canvas - optimize brain
+    private boolean cachedHasRequiredMemoryState; // Canvas - optimize brain
 
     public Behavior(Map<MemoryModuleType<?>, MemoryStatus> entryCondition) {
         this(entryCondition, 60);
@@ -27,7 +_,7 @@
     public Behavior(Map<MemoryModuleType<?>, MemoryStatus> entryCondition, int minDuration, int maxDuration) {
         this.minDuration = minDuration;
         this.maxDuration = maxDuration;
-        this.entryCondition = entryCondition;
+        this.entryCondition = new it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap<>(entryCondition); // Canvas - optimize brain
         // Paper start - configurable behavior tick rate and timings
         String key = io.papermc.paper.util.MappingEnvironment.reobf() ? io.papermc.paper.util.ObfHelper.INSTANCE.deobfClassName(this.getClass().getName()) : this.getClass().getName();
         int lastSeparator = key.lastIndexOf('.');
@@ -103,17 +_,26 @@
         return this.getClass().getSimpleName();
     }
 
-    protected boolean hasRequiredMemories(E owner) {
-        for (Entry<MemoryModuleType<?>, MemoryStatus> entry : this.entryCondition.entrySet()) {
-            MemoryModuleType<?> memoryModuleType = entry.getKey();
-            MemoryStatus memoryStatus = entry.getValue();
-            if (!owner.getBrain().checkMemory(memoryModuleType, memoryStatus)) {
-                return false;
+    // Canvas start - optimize brain
+    protected boolean hasRequiredMemories(E entity) {
+        net.minecraft.world.entity.ai.Brain<?> brain = entity.getBrain();
+        long modCount = brain.getModCount();
+        if (this.cachedMemoryModCount == modCount) {
+            return this.cachedHasRequiredMemoryState;
+        }
+        this.cachedMemoryModCount = modCount;
+
+        it.unimi.dsi.fastutil.objects.ObjectIterator<it.unimi.dsi.fastutil.objects.Reference2ObjectMap.Entry<MemoryModuleType<?>, MemoryStatus>> fastIterator = ((it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap<MemoryModuleType<?>, MemoryStatus>) this.entryCondition).reference2ObjectEntrySet().fastIterator();
+        while (fastIterator.hasNext()) {
+            it.unimi.dsi.fastutil.objects.Reference2ObjectMap.Entry<MemoryModuleType<?>, MemoryStatus> entry = fastIterator.next();
+            if (!brain.checkMemory(entry.getKey(), entry.getValue())) {
+                return this.cachedHasRequiredMemoryState = false;
             }
         }
 
-        return true;
+        return this.cachedHasRequiredMemoryState = true;
     }
+    // Canvas end - optimize brain
 
     public static enum Status {
         STOPPED,
