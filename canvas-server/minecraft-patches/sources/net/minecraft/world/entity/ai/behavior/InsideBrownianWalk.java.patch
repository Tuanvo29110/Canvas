--- a/net/minecraft/world/entity/ai/behavior/InsideBrownianWalk.java
+++ b/net/minecraft/world/entity/ai/behavior/InsideBrownianWalk.java
@@ -20,16 +_,31 @@
                             return false;
                         } else {
                             BlockPos blockPos = mob.blockPosition();
-                            List<BlockPos> list = BlockPos.betweenClosedStream(blockPos.offset(-1, -1, -1), blockPos.offset(1, 1, 1))
-                                .map(BlockPos::immutable)
-                                .collect(Util.toMutableList());
+                            // Canvas start - remove streams
+                            BlockPos minPos = blockPos.offset(-1, -1, -1);
+                            BlockPos maxPos = blockPos.offset(1, 1, 1);
+                            List<BlockPos> list = new java.util.ArrayList<>();
+
+                            for (int x = minPos.getX(); x <= maxPos.getX(); x++) {
+                                for (int y = minPos.getY(); y <= maxPos.getY(); y++) {
+                                    for (int z = minPos.getZ(); z <= maxPos.getZ(); z++) {
+                                        list.add(new BlockPos(x, y, z).immutable());
+                                    }
+                                }
+                            }
+
                             Collections.shuffle(list);
-                            list.stream()
-                                .filter(pos -> !level.canSeeSky(pos))
-                                .filter(pos -> level.loadedAndEntityCanStandOn(pos, mob))
-                                .filter(pos -> level.noCollision(mob))
-                                .findFirst()
-                                .ifPresent(pos -> walkTarget.set(new WalkTarget(pos, speedModifier, 0)));
+
+                            for (BlockPos pos : list) {
+                                if (!level.canSeeSky(pos) &&
+                                    level.loadedAndEntityCanStandOn(pos, mob) &&
+                                    level.noCollision(mob)) {
+                                    walkTarget.set(new WalkTarget(pos, speedModifier, 0));
+                                    break;
+                                }
+                            }
+                            // Canvas end
+
                             return true;
                         }
                     }
