--- a/net/minecraft/world/entity/ai/navigation/PathNavigation.java
+++ b/net/minecraft/world/entity/ai/navigation/PathNavigation.java
@@ -10,8 +_,6 @@
 import net.minecraft.network.protocol.game.DebugPackets;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.util.Mth;
-import net.minecraft.util.profiling.Profiler;
-import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.ai.attributes.Attributes;
@@ -157,7 +_,7 @@
 
     @Nullable
     protected Path createPath(Set<BlockPos> targets, @Nullable Entity target, int regionOffset, boolean offsetUpward, int accuracy) {
-        return this.createPath(targets, target, regionOffset, offsetUpward, accuracy, this.getMaxPathLength());
+        return this.createPath(targets, target, regionOffset, offsetUpward, accuracy, (float) this.mob.getAttributeValue(Attributes.FOLLOW_RANGE)); // Canvas - fix folia issues
     }
 
     @Nullable
@@ -189,13 +_,10 @@
                 }
             }
             // Paper end - EntityPathfindEvent
-            ProfilerFiller profilerFiller = Profiler.get();
-            profilerFiller.push("pathfind");
             BlockPos blockPos = offsetUpward ? this.mob.blockPosition().above() : this.mob.blockPosition();
             int i = (int)(followRange + regionOffset);
             PathNavigationRegion pathNavigationRegion = new PathNavigationRegion(this.level, blockPos.offset(-i, -i, -i), blockPos.offset(i, i, i));
             Path path = this.pathFinder.findPath(pathNavigationRegion, this.mob, targets, followRange, accuracy, this.maxVisitedNodesMultiplier);
-            profilerFiller.pop();
             if (path != null && path.getTarget() != null) {
                 this.targetPos = path.getTarget();
                 this.reachRange = accuracy;
@@ -300,7 +_,14 @@
 
     protected double getGroundY(Vec3 vec) {
         BlockPos blockPos = BlockPos.containing(vec);
-        return this.level.getBlockState(blockPos.below()).isAir() ? vec.y : WalkNodeEvaluator.getFloorLevel(this.level, blockPos);
+        // Canvas start - fix folia issues
+        BlockPos belowPos = blockPos.below();
+
+        PathNavigationRegion pathRegion = new PathNavigationRegion(this.level, belowPos, blockPos);
+        BlockState blockState = pathRegion.getBlockState(belowPos);
+
+        return blockState.isAir() ? vec.y : WalkNodeEvaluator.getFloorLevel(this.level, blockPos);
+        // Canvas end
     }
 
     protected void followThePath() {
