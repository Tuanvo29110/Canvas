--- a/net/minecraft/world/entity/ai/attributes/AttributeInstance.java
+++ b/net/minecraft/world/entity/ai/attributes/AttributeInstance.java
@@ -22,8 +_,8 @@
     private final Map<AttributeModifier.Operation, Map<ResourceLocation, AttributeModifier>> modifiersByOperation = Maps.newEnumMap(
         AttributeModifier.Operation.class
     );
-    private final Map<ResourceLocation, AttributeModifier> modifierById = new Object2ObjectArrayMap<>();
-    private final Map<ResourceLocation, AttributeModifier> permanentModifiers = new Object2ObjectArrayMap<>();
+    private final Map<ResourceLocation, AttributeModifier> modifierById = it.unimi.dsi.fastutil.objects.Object2ObjectMaps.synchronize(new Object2ObjectArrayMap<>(), this); // Canvas - synchronized
+    private final Map<ResourceLocation, AttributeModifier> permanentModifiers = it.unimi.dsi.fastutil.objects.Object2ObjectMaps.synchronize(new Object2ObjectArrayMap<>(), this); // Canvas - synchronized
     private double baseValue;
     private boolean dirty = true;
     private double cachedValue;
@@ -52,7 +_,7 @@
 
     @VisibleForTesting
     Map<ResourceLocation, AttributeModifier> getModifiers(AttributeModifier.Operation operation) {
-        return this.modifiersByOperation.computeIfAbsent(operation, operation1 -> new Object2ObjectOpenHashMap<>());
+        return this.modifiersByOperation.computeIfAbsent(operation, operation1 -> it.unimi.dsi.fastutil.objects.Object2ObjectMaps.synchronize(new Object2ObjectArrayMap<>(), this)); // Canvas - threaded tracker
     }
 
     public Set<AttributeModifier> getModifiers() {
@@ -75,7 +_,7 @@
     private void addModifier(AttributeModifier modifier) {
         AttributeModifier attributeModifier = this.modifierById.putIfAbsent(modifier.id(), modifier);
         if (attributeModifier != null) {
-            throw new IllegalArgumentException("Modifier is already applied on this attribute!");
+            return; // Canvas - just return
         } else {
             this.getModifiers(modifier.operation()).put(modifier.id(), modifier);
             this.setDirty();
@@ -83,8 +_,13 @@
     }
 
     public void addOrUpdateTransientModifier(AttributeModifier modifier) {
-        AttributeModifier attributeModifier = this.modifierById.put(modifier.id(), modifier);
-        if (modifier != attributeModifier) {
+        // Canvas start - Optimize addOrUpdateTransientModifier
+        // First check if we already have the same modifier instance to avoid unnecessary put operations
+        AttributeModifier existingModifier = this.modifierById.get(modifier.id());
+        // Only perform updates if the modifier is new or different
+        if (existingModifier != modifier) {
+            this.modifierById.put(modifier.id(), modifier);
+        // Canvas end - Optimize addOrUpdateTransientModifier
             this.getModifiers(modifier.operation()).put(modifier.id(), modifier);
             this.setDirty();
         }
@@ -140,8 +_,12 @@
 
     public double getValue() {
         if (this.dirty) {
-            this.cachedValue = this.calculateValue();
+            // Canvas start - threaded tracker
+            double value = this.calculateValue();
+            this.cachedValue = value;
             this.dirty = false;
+            return value;
+            // Canvas end - threaded tracker
         }
 
         return this.cachedValue;
@@ -184,7 +_,15 @@
     }
 
     public AttributeInstance.Packed pack() {
-        return new AttributeInstance.Packed(this.attribute, this.baseValue, List.copyOf(this.permanentModifiers.values()));
+        // Canvas start - threaded tracker
+        if (io.canvasmc.canvas.Config.INSTANCE.entities.entityTracking.enabled) {
+            synchronized (this) {
+                return new AttributeInstance.Packed(this.attribute, this.baseValue, List.copyOf(this.permanentModifiers.values()));
+            }
+        } else {
+            return new AttributeInstance.Packed(this.attribute, this.baseValue, List.copyOf(this.permanentModifiers.values()));
+        }
+        // Canvas end
     }
 
     public void apply(AttributeInstance.Packed instance) {
