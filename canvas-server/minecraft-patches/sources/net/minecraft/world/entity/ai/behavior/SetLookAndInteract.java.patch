--- a/net/minecraft/world/entity/ai/behavior/SetLookAndInteract.java
+++ b/net/minecraft/world/entity/ai/behavior/SetLookAndInteract.java
@@ -9,7 +_,7 @@
 
 public class SetLookAndInteract {
     public static BehaviorControl<LivingEntity> create(EntityType<?> entityType, int maxDist) {
-        int i = maxDist * maxDist;
+        final int maxDistSq = maxDist * maxDist; // Leaf - Optimize SetLookAndInteract and NearestVisibleLivingEntities
         return BehaviorBuilder.create(
             instance -> instance.group(
                     instance.registered(MemoryModuleType.LOOK_TARGET),
@@ -19,16 +_,22 @@
                 .apply(
                     instance,
                     (lookTarget, interactionTarget, nearestVisibleLivingEntities) -> (level, entity, gameTime) -> {
-                        Optional<LivingEntity> optional = instance.<NearestVisibleLivingEntities>get(nearestVisibleLivingEntities)
-                            .findClosest(nearEntity -> nearEntity.distanceToSqr(entity) <= i && entityType.equals(nearEntity.getType()));
+                        // Leaf start - Optimize SetLookAndInteract and NearestVisibleLivingEntities
+                        // Check entity type first as it's likely cheaper than distance calculation
+                        NearestVisibleLivingEntities entities = instance.get(nearestVisibleLivingEntities);
+                        Optional<LivingEntity> optional = entities.findClosest(
+                            nearEntity -> entityType.equals(nearEntity.getType()) && nearEntity.distanceToSqr(entity) <= maxDistSq
+                        );
+
                         if (optional.isEmpty()) {
                             return false;
-                        } else {
-                            LivingEntity livingEntity = optional.get();
-                            interactionTarget.set(livingEntity);
-                            lookTarget.set(new EntityTracker(livingEntity, true));
-                            return true;
                         }
+
+                        LivingEntity livingEntity = optional.get();
+                        interactionTarget.set(livingEntity);
+                        lookTarget.set(new EntityTracker(livingEntity, true));
+                        return true;
+                        // Leaf end - Optimize SetLookAndInteract and NearestVisibleLivingEntities
                     }
                 )
         );
