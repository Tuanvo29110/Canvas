--- a/net/minecraft/world/entity/raid/Raider.java
+++ b/net/minecraft/world/entity/raid/Raider.java
@@ -9,6 +_,7 @@
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.HolderGetter;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
@@ -36,6 +_,7 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.ServerLevelAccessor;
+import net.minecraft.world.level.block.entity.BannerPattern;
 import net.minecraft.world.level.pathfinder.Path;
 import net.minecraft.world.level.storage.ValueInput;
 import net.minecraft.world.level.storage.ValueOutput;
@@ -43,9 +_,25 @@
 
 public abstract class Raider extends PatrollingMonster {
     protected static final EntityDataAccessor<Boolean> IS_CELEBRATING = SynchedEntityData.defineId(Raider.class, EntityDataSerializers.BOOLEAN);
-    static final Predicate<ItemEntity> ALLOWED_ITEMS = item -> !item.hasPickUpDelay()
-        && item.isAlive()
-        && ItemStack.matches(item.getItem(), Raid.getOminousBannerInstance(item.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN)));
+    // Canvas start
+    static final Predicate<ItemEntity> ALLOWED_ITEMS = (itemEntity) -> {
+        ItemStack ominousBanner = ((ServerLevel) itemEntity.level()).ominousBanner;
+        if (ominousBanner == null) {
+            ominousBanner = Raid.getOminousBannerInstance(itemEntity.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN));
+        }
+
+        return !itemEntity.hasPickUpDelay() && itemEntity.isAlive() &&
+            ItemStack.matches(itemEntity.getItem(), ominousBanner);
+    };
+
+    private ItemStack getOminousBanner(HolderGetter<BannerPattern> bannerPatternLookup) {
+        ItemStack ominousBanner = ((ServerLevel) this.level()).ominousBanner;
+        if (ominousBanner == null) {
+            ominousBanner = Raid.getOminousBannerInstance(bannerPatternLookup);
+        }
+        return ominousBanner;
+    }
+    // Canvas end
     private static final int DEFAULT_WAVE = 0;
     private static final boolean DEFAULT_CAN_JOIN_RAID = false;
     @Nullable
@@ -89,7 +_,7 @@
             Raid currentRaid = this.getCurrentRaid();
             if (this.canJoinRaid()) {
                 if (currentRaid == null) {
-                    if (this.level().getGameTime() % 20L == 0L) {
+                    if (this.level().getRedstoneGameTime() % 20L == 0L) { // Canvas - Threaded Regions
                         Raid raidAt = serverLevel.getRaidAt(this.blockPosition());
                         if (raidAt != null && Raids.canJoinRaid(this)) {
                             raidAt.joinRaid(serverLevel, raidAt.getGroupsSpawned(), this, null, true);
@@ -150,7 +_,7 @@
     public boolean isCaptain() {
         ItemStack itemBySlot = this.getItemBySlot(EquipmentSlot.HEAD);
         boolean flag = !itemBySlot.isEmpty()
-            && ItemStack.matches(itemBySlot, Raid.getOminousBannerInstance(this.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN)));
+            && ItemStack.matches(itemBySlot, getOminousBanner(this.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN))); // Canvas
         boolean isPatrolLeader = this.isPatrolLeader();
         return flag && isPatrolLeader;
     }
@@ -213,7 +_,7 @@
         boolean flag = this.hasActiveRaid() && this.getCurrentRaid().getLeader(this.getWave()) != null;
         if (this.hasActiveRaid()
             && !flag
-            && ItemStack.matches(item, Raid.getOminousBannerInstance(this.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN)))) {
+            && ItemStack.matches(item, getOminousBanner(this.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN)))) { // Canvas
             // Paper start - EntityPickupItemEvent fixes
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityPickupItemEvent(this, entity, 0, false).isCancelled()) {
                 return;
@@ -372,7 +_,7 @@
                     .level()
                     .getEntitiesOfClass(ItemEntity.class, this.mob.getBoundingBox().inflate(attributeValue, 8.0, attributeValue), Raider.ALLOWED_ITEMS)) {
                     long orDefault = this.unreachableBannerCache.getOrDefault(itemEntity.getId(), Long.MIN_VALUE);
-                    if (Raider.this.level().getGameTime() < orDefault) {
+                    if (Raider.this.tickCount < orDefault) { // Canvas - use tickCount for banner cache
                         map.put(itemEntity.getId(), orDefault);
                     } else {
                         Path path = this.mob.getNavigation().createPath(itemEntity, 1);
@@ -382,7 +_,7 @@
                             return true;
                         }
 
-                        map.put(itemEntity.getId(), Raider.this.level().getGameTime() + 600L);
+                        map.put(itemEntity.getId(), Raider.this.tickCount + 600L); // Canvas - use tickCount for banner cache
                     }
                 }
 
@@ -399,6 +_,16 @@
                 && !this.pathToBanner.isDone()
                 && !this.cannotPickUpBanner();
         }
+        // Canvas start
+
+        private ItemStack getOminousBanner(HolderGetter<BannerPattern> bannerPatternLookup) {
+            ItemStack ominousBanner = ((ServerLevel) this.mob.level()).ominousBanner;
+            if (ominousBanner == null) {
+                ominousBanner = Raid.getOminousBannerInstance(bannerPatternLookup);
+            }
+            return ominousBanner;
+        }
+        // Canvas end
 
         private boolean cannotPickUpBanner() {
             if (!getServerLevel(this.mob).getGameRules().getBoolean(net.minecraft.world.level.GameRules.RULE_MOBGRIEFING, this.mob.level().purpurConfig.pillagerMobGriefingOverride)) return true; // Paper - respect game and entity rules for picking up items // Purpur - Add mobGriefing override to everything affected
@@ -409,7 +_,7 @@
             } else if (!this.mob.canBeLeader()) {
                 return true;
             } else if (ItemStack.matches(
-                this.mob.getItemBySlot(EquipmentSlot.HEAD), Raid.getOminousBannerInstance(this.mob.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN))
+                this.mob.getItemBySlot(EquipmentSlot.HEAD), getOminousBanner(this.mob.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN)) // Canvas
             )) {
                 return true;
             } else {
