--- a/net/minecraft/network/Connection.java
+++ b/net/minecraft/network/Connection.java
@@ -4,6 +_,8 @@
 import com.google.common.collect.Queues;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import com.mojang.logging.LogUtils;
+import io.canvasmc.canvas.region.ServerRegions;
+import io.canvasmc.canvas.server.network.ConnectionHandlePhases;
 import io.netty.bootstrap.Bootstrap;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelException;
@@ -37,7 +_,9 @@
 import java.nio.channels.ClosedChannelException;
 import java.util.Objects;
 import java.util.Queue;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
@@ -58,7 +_,9 @@
 import net.minecraft.network.protocol.login.LoginProtocols;
 import net.minecraft.network.protocol.status.ClientStatusPacketListener;
 import net.minecraft.network.protocol.status.StatusProtocols;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.RunningOnDifferentThreadException;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.Mth;
 import net.minecraft.util.debugchart.LocalSampleLogger;
 import org.apache.commons.lang3.Validate;
@@ -149,6 +_,56 @@
     public boolean isPending = true;
     public boolean queueImmunity;
     // Paper end - Optimize network
+    // Canvas start - packet processor
+    private final AtomicReference<ServerRegions.WorldTickData> currentlyOwned = new AtomicReference<>();
+
+    public synchronized void switchTo(ServerRegions.WorldTickData data) {
+        if (this.currentlyOwned.get() != null) {
+            this.currentlyOwned.get().connections.remove(this);
+        }
+        this.currentlyOwned.set(data);
+        data.connections.add(this);
+    }
+
+    public synchronized void ensureCorrect(ServerRegions.WorldTickData data) {
+        ServerRegions.WorldTickData current = this.currentlyOwned.get();
+        if (current != null && current != data) {
+            throw new IllegalStateException("connection mismatched");
+        }
+        if (this.getPlayer() != null && this.phase.equals(ConnectionHandlePhases.PLAY) && !data.getLocalPlayers().contains(this.getPlayer())) {
+            throw new IllegalStateException("player connection mismatched");
+        }
+    }
+
+    private final Queue<Runnable> packetsToProcess = new ConcurrentLinkedQueue<>();
+    private final Object lockObject = new Object();
+    private ConnectionHandlePhases phase = ConnectionHandlePhases.JOIN;
+
+    public void schedulePacket(Runnable runnable) {
+        packetsToProcess.add(runnable);
+    }
+
+    public void tickPackets() {
+        Runnable task;
+        while ((task = packetsToProcess.poll()) != null) {
+            task.run();
+        }
+    }
+
+    public void setPhase(ConnectionHandlePhases phase) {
+        synchronized (lockObject) {
+            this.phase = phase;
+        }
+    }
+
+    public ConnectionHandlePhases getPhase() {
+        ConnectionHandlePhases phase;
+        synchronized (lockObject) {
+            phase = this.phase;
+        }
+        return phase;
+    }
+    // Canvas end
 
     public Connection(PacketFlow receiving) {
         this.receiving = receiving;
@@ -610,13 +_,7 @@
             if (!(this.packetListener instanceof net.minecraft.server.network.ServerLoginPacketListenerImpl loginPacketListener)
                 || loginPacketListener.state != net.minecraft.server.network.ServerLoginPacketListenerImpl.State.VERIFYING
                 || Connection.joinAttemptsThisTick++ < MAX_PER_TICK) {
-            // Paper start - detailed watchdog information
-            net.minecraft.network.protocol.PacketUtils.packetProcessing.push(this.packetListener);
-            try {
             tickablePacketListener.tick();
-            } finally {
-                net.minecraft.network.protocol.PacketUtils.packetProcessing.pop();
-            } // Paper end - detailed watchdog information
             } // Paper end - Buffer joins to world
         }
 
@@ -635,6 +_,7 @@
         if (this.bandwidthDebugMonitor != null) {
             this.bandwidthDebugMonitor.tick();
         }
+        this.tickPackets(); // Canvas - packet processor
     }
 
     protected void tickSecond() {
