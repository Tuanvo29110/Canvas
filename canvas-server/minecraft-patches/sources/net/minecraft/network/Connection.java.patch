--- a/net/minecraft/network/Connection.java
+++ b/net/minecraft/network/Connection.java
@@ -150,6 +_,40 @@
     public boolean isPending = true;
     public boolean queueImmunity;
     // Paper end - Optimize network
+    // Canvas start - rewrite scheduler
+    private final ca.spottedleaf.concurrentutil.collection.MultiThreadedQueue<Runnable> packetQueue = new ca.spottedleaf.concurrentutil.collection.MultiThreadedQueue<>();
+    // used only to notify tasks for packets
+    private volatile io.papermc.paper.threadedregions.RegionizedWorldData lastRegion;
+
+    public void updateRegion(final io.papermc.paper.threadedregions.RegionizedWorldData region) {
+        this.lastRegion = region;
+        if (region != null && this.hasPackets()) {
+            region.regionData.setHasPackets();
+        }
+    }
+
+    public boolean hasPackets() {
+        return !this.packetQueue.isEmpty();
+    }
+
+    public boolean executeOnePacket() {
+        final Runnable run = this.packetQueue.poll();
+        if (run != null) {
+            run.run();
+            return true;
+        }
+        return false;
+    }
+
+    public void addPacket(final Runnable runnable) {
+        this.packetQueue.add(runnable);
+
+        final io.papermc.paper.threadedregions.RegionizedWorldData region = this.lastRegion;
+        if (region != null) {
+            region.regionData.setHasPackets();
+        }
+    }
+    // Canvas end
 
     public Connection(PacketFlow receiving) {
         this.receiving = receiving;
