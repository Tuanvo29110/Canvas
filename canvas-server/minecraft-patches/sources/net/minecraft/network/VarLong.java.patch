--- a/net/minecraft/network/VarLong.java
+++ b/net/minecraft/network/VarLong.java
@@ -9,6 +_,18 @@
     private static final int DATA_BITS_PER_BYTE = 7;
 
     public static int getByteSize(long data) {
+    // Canvas start - pre-compute VarInt and VarLong sizes
+        return VARLONG_EXACT_BYTE_LENGTHS[Long.numberOfLeadingZeros(data)];
+    }
+    private static final int[] VARLONG_EXACT_BYTE_LENGTHS = new int[65];
+    static {
+        for (int i = 0; i < 64; ++i) {
+            VARLONG_EXACT_BYTE_LENGTHS[i] = (int) Math.ceil((63d - (i - 1)) / 7d);
+        }
+        VARLONG_EXACT_BYTE_LENGTHS[64] = 1; // Special case for the number 0
+    }
+    static int getByteSizeOld(long data) { // public -> package-private
+    // Canvas end
         for (int i = 1; i < 10; i++) {
             if ((data & -1L << i * 7) == 0L) {
                 return i;
@@ -39,6 +_,127 @@
     }
 
     public static ByteBuf write(ByteBuf buffer, long value) {
+        // Canvas start - optimized VarLong#write
+        if ((value & 0xFFFFFFFFFFFFFF80L) == 0) {
+            buffer.writeByte((int) value);
+        } else if (value < 0) {
+            // The case of writing arbitrary longs is common
+            // Here, the number is negative, which has probability 1/2 for arbitrary numbers
+            int least7bits = (int) (value & 0xFFFFFFFL);
+            int w = (least7bits & 0x7F) << 24
+                | (least7bits & 0x3F80) << 9
+                | (least7bits & 0x1FC000) >> 6
+                | ((least7bits >>> 21) & 0x7F)
+                | 0x80808080;
+            long nonLeast7Bits = value >>> 28;
+            int secondLeast7bits = (int) (nonLeast7Bits & 0xFFFFFFFL);
+            int w2 = (secondLeast7bits & 0x7F) << 24
+                | ((secondLeast7bits & 0x3F80) << 9)
+                | (secondLeast7bits & 0x1FC000) >> 6
+                | (secondLeast7bits >>> 21)
+                | 0x80808080;
+            int thirdLeast7Bits = (int) (nonLeast7Bits >>> 28);
+            int w3 = (thirdLeast7Bits & 0x7F) << 8
+                | (thirdLeast7Bits >>> 7)
+                | 0x00008000;
+            buffer.writeInt(w);
+            buffer.writeInt(w2);
+            buffer.writeShort(w3);
+        } else if ((value & 0xFFFFFFFFFFFFC000L) == 0) {
+            int least7bits = (int) value;
+            int w = (least7bits & 0x7F) << 8
+                | (least7bits >>> 7)
+                | 0x00008000;
+            buffer.writeShort(w);
+        } else if ((value & 0xFFFFFFFFFFE00000L) == 0) {
+            int least7bits = (int) value;
+            int w = (least7bits & 0x7F) << 16
+                | (least7bits & 0x3F80) << 1
+                | (least7bits >>> 14)
+                | 0x00808000;
+            buffer.writeMedium(w);
+        } else if ((value & 0xFFFFFFFFF0000000L) == 0) {
+            int least7bits = (int) value;
+            int w = (least7bits & 0x7F) << 24
+                | ((least7bits & 0x3F80) << 9)
+                | (least7bits & 0x1FC000) >> 6
+                | (least7bits >>> 21)
+                | 0x80808000;
+            buffer.writeInt(w);
+        } else if ((value & 0xFFFFFFF800000000L) == 0) {
+            int least7bits = (int) (value & 0xFFFFFFFL);
+            int w = (least7bits & 0x7F) << 24
+                | (least7bits & 0x3F80) << 9
+                | (least7bits & 0x1FC000) >> 6
+                | ((least7bits >>> 21) & 0x7F)
+                | 0x80808080;
+            buffer.writeInt(w);
+            buffer.writeByte((int) (value >>> 28));
+        } else if ((value & 0xFFFFFC0000000000L) == 0) {
+            int least7bits = (int) (value & 0xFFFFFFFL);
+            int w = (least7bits & 0x7F) << 24
+                | (least7bits & 0x3F80) << 9
+                | (least7bits & 0x1FC000) >> 6
+                | ((least7bits >>> 21) & 0x7F)
+                | 0x80808080;
+            int secondLeast7bits = (int) (value >>> 28);
+            int w2 = (secondLeast7bits & 0x7F) << 8
+                | (secondLeast7bits >>> 7)
+                | 0x00008000;
+            buffer.writeInt(w);
+            buffer.writeShort(w2);
+        } else if ((value & 0xFFFE000000000000L) == 0) {
+            int least7bits = (int) (value & 0xFFFFFFFL);
+            int w = (least7bits & 0x7F) << 24
+                | (least7bits & 0x3F80) << 9
+                | (least7bits & 0x1FC000) >> 6
+                | ((least7bits >>> 21) & 0x7F)
+                | 0x80808080;
+            int secondLeast7bits = (int) (value >>> 28);
+            int w2 = (secondLeast7bits & 0x7F) << 16
+                | (secondLeast7bits & 0x3F80) << 1
+                | (secondLeast7bits >>> 14)
+                | 0x00808000;
+            buffer.writeInt(w);
+            buffer.writeMedium(w2);
+        } else if ((value & 0xFF00000000000000L) == 0) {
+            int least7bits = (int) (value & 0xFFFFFFFL);
+            int w = (least7bits & 0x7F) << 24
+                | (least7bits & 0x3F80) << 9
+                | (least7bits & 0x1FC000) >> 6
+                | ((least7bits >>> 21) & 0x7F)
+                | 0x80808080;
+            int secondLeast7bits = (int) (value >>> 28);
+            int w2 = (secondLeast7bits & 0x7F) << 24
+                | ((secondLeast7bits & 0x3F80) << 9)
+                | (secondLeast7bits & 0x1FC000) >> 6
+                | (secondLeast7bits >>> 21)
+                | 0x80808000;
+            buffer.writeInt(w);
+            buffer.writeInt(w2);
+        } else {
+            int least7bits = (int) (value & 0xFFFFFFFL);
+            int w = (least7bits & 0x7F) << 24
+                | (least7bits & 0x3F80) << 9
+                | (least7bits & 0x1FC000) >> 6
+                | ((least7bits >>> 21) & 0x7F)
+                | 0x80808080;
+            long nonLeast7Bits = value >>> 28;
+            int secondLeast7bits = (int) (nonLeast7Bits & 0xFFFFFFFL);
+            int w2 = (secondLeast7bits & 0x7F) << 24
+                | ((secondLeast7bits & 0x3F80) << 9)
+                | (secondLeast7bits & 0x1FC000) >> 6
+                | (secondLeast7bits >>> 21)
+                | 0x80808080;
+            buffer.writeInt(w);
+            buffer.writeInt(w2);
+            buffer.writeByte((int) (nonLeast7Bits >>> 28));
+        }
+        return buffer;
+    }
+
+    static ByteBuf writeOld(ByteBuf buffer, long value) { // public -> package-private
+        // Canvas end
         while ((value & -128L) != 0L) {
             buffer.writeByte((int)(value & 127L) | 128);
             value >>>= 7;
