--- a/paper-server/build.gradle.kts
+++ b/paper-server/build.gradle.kts
@@ -10,7 +_,7 @@
     `java-library`
     `maven-publish`
     idea
-    id("io.papermc.paperweight.core")
+    id("io.canvasmc.weaver.core")
     id("io.papermc.fill.gradle") version "1.0.7"
 }
 
@@ -26,6 +_,18 @@
     minecraftVersion = providers.gradleProperty("mcVersion")
     gitFilePatches = false
 
+    val canvas = forks.register("canvas") {
+        upstream.patchDir("paperServer") {
+            upstreamPath = "paper-server"
+            excludes = setOf("src/minecraft", "patches", "build.gradle.kts")
+            patchesDir = rootDirectory.dir("canvas-server/paper-patches")
+            additionalAts?.set(rootDirectory.file("build-data/canvas.at"))
+            outputDir = rootDirectory.dir("paper-server")
+        }
+    }
+
+    activeFork = canvas
+
     spigot {
         enabled = true
         buildDataRef = "436eac9815c211be1a2a6ca0702615f995e81c44"
@@ -61,7 +_,7 @@
 }
 val services = objects.newInstance<Services>()
 
-if (project.providers.gradleProperty("publishDevBundle").isPresent) {
+if (true) {
     val devBundleComponent = services.softwareComponentFactory.adhoc("devBundle")
     components.add(devBundleComponent)
 
@@ -107,7 +_,33 @@
     }
 }
 
-val log4jPlugins = sourceSets.create("log4jPlugins")
+sourceSets {
+    main {
+        java {
+            srcDir("../paper-server/src/main/java")
+            srcDir("../paper-server/src/generated/java")
+            srcDir("src/generated/main/java")
+        }
+        resources {
+            srcDir("../paper-server/src/main/resources")
+            srcDir("src/generated/main/resources")
+        }
+    }
+    test {
+        java {
+            srcDir("../paper-server/src/test/java")
+            srcDir("src/generated/test/java")
+        }
+        resources {
+            srcDir("../paper-server/src/test/resources")
+            srcDir("src/generated/test/resources")
+        }
+    }
+}
+
+val log4jPlugins = sourceSets.create("log4jPlugins") {
+    java { srcDir("../paper-server/src/log4jPlugins/java") }
+}
 configurations.named(log4jPlugins.compileClasspathConfigurationName) {
     extendsFrom(configurations.compileClasspath.get())
 }
@@ -129,7 +_,7 @@
 }
 
 dependencies {
-    implementation(project(":paper-api"))
+    implementation(projects.canvasApi)
     implementation("ca.spottedleaf:concurrentutil:0.0.3")
     implementation("org.jline:jline-terminal-ffm:3.27.1") // use ffm on java 22+
     implementation("org.jline:jline-terminal-jni:3.27.1") // fall back to jni on java 21
@@ -151,7 +_,7 @@
     implementation("com.velocitypowered:velocity-native:3.4.0-SNAPSHOT") {
         isTransitive = false
     }
-    implementation("io.netty:netty-codec-haproxy:4.1.118.Final") // Add support for proxy protocol
+    implementation("io.netty:netty-codec-haproxy:4.1.118.Final") // Add support for proxy protocol // bump depend
     implementation("org.apache.logging.log4j:log4j-iostreams:2.24.1")
     implementation("org.ow2.asm:asm-commons:9.8")
     implementation("org.spongepowered:configurate-yaml:4.2.0")
@@ -200,14 +_,14 @@
         val gitBranch = git.exec(providers, "rev-parse", "--abbrev-ref", "HEAD").get().trim()
         attributes(
             "Main-Class" to "org.bukkit.craftbukkit.Main",
-            "Implementation-Title" to "Paper",
+            "Implementation-Title" to "Canvas",
             "Implementation-Version" to implementationVersion,
             "Implementation-Vendor" to date,
-            "Specification-Title" to "Paper",
+            "Specification-Title" to "Canvas",
             "Specification-Version" to project.version,
-            "Specification-Vendor" to "Paper Team",
-            "Brand-Id" to "papermc:paper",
-            "Brand-Name" to "Paper",
+            "Specification-Vendor" to "Canvas Team",
+            "Brand-Id" to "canvasmc:canvas",
+            "Brand-Name" to "Canvas",
             "Build-Number" to (build ?: ""),
             "Build-Time" to buildTime.toString(),
             "Git-Branch" to gitBranch,
@@ -266,16 +_,19 @@
     jvmArgumentProviders.add(provider)
 }
 
-val generatedDir: java.nio.file.Path = layout.projectDirectory.dir("src/generated/java").asFile.toPath()
+val generatedDir: java.nio.file.Path = layout.projectDirectory.dir("src/generated/main/java").asFile.toPath()
+val paperGeneratedDir: java.nio.file.Path = layout.projectDirectory.dir("../paper-server/src/generated/java").asFile.toPath()
 idea {
     module {
         generatedSourceDirs.add(generatedDir.toFile())
+        generatedSourceDirs.add(paperGeneratedDir.toFile())
     }
 }
 sourceSets {
     main {
         java {
             srcDir(generatedDir)
+            srcDir(paperGeneratedDir)
         }
     }
 }
@@ -304,25 +_,24 @@
         .asFile
     javaLauncher.set(project.javaToolchains.launcherFor {
         languageVersion.set(JavaLanguageVersion.of(21))
-        vendor.set(JvmVendorSpec.JETBRAINS)
+        vendor.set(JvmVendorSpec.GRAAL_VM)
     })
-    jvmArgs("-XX:+AllowEnhancedClassRedefinition")
+    jvmArgs("--add-modules=jdk.incubator.vector")
 
-    if (rootProject.childProjects["test-plugin"] != null) {
-        val testPluginJar = rootProject.project(":test-plugin").tasks.jar.flatMap { it.archiveFile }
+    if (rootProject.childProjects["canvas-test-plugin"] != null) {
+        val testPluginJar = rootProject.project(":canvas-test-plugin").tasks.jar.flatMap { it.archiveFile }
         inputs.file(testPluginJar)
         args("-add-plugin=${testPluginJar.get().asFile.absolutePath}")
     }
 
-    args("--nogui")
     systemProperty("net.kyori.adventure.text.warnWhenLegacyFormattingDetected", true)
     if (providers.gradleProperty("paper.runDisableWatchdog").getOrElse("false") == "true") {
         systemProperty("disable.watchdog", true)
     }
     systemProperty("io.papermc.paper.suppress.sout.nags", true)
 
-    val memoryGb = providers.gradleProperty("paper.runMemoryGb").getOrElse("2")
-    minHeapSize = "${memoryGb}G"
+    val memoryGb = providers.gradleProperty("paper.runMemoryGb").getOrElse("9") // increased memory
+    // minHeapSize = "${memoryGb}G"
     maxHeapSize = "${memoryGb}G"
 
     doFirst {
