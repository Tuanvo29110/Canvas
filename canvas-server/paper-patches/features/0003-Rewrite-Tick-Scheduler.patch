From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Fri, 4 Jul 2025 12:09:54 -0700
Subject: [PATCH] Rewrite Tick Scheduler


diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index ecab0322ae03b7a3133eae192076aaf463237cd6..335a4ba11a586295fdcd01121f3fcda123b891e6 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -2954,7 +2954,7 @@ public final class CraftServer implements Server {
     @Override
     public double getAverageTickTime() {
         // Folia start - region threading
-        ca.spottedleaf.concurrentutil.scheduler.SchedulerThreadPool.SchedulableTick task = io.papermc.paper.threadedregions.TickRegionScheduler.getCurrentTickingTask();
+        io.canvasmc.canvas.tick.ScheduledTaskThreadPool.SchedulableTick task = io.papermc.paper.threadedregions.TickRegionScheduler.getCurrentTickingTask(); // Canvas - rewrite scheduler
         if (task == null) {
             // might be on the shutdown thread, try retrieving the current region
             if (io.papermc.paper.threadedregions.TickRegionScheduler.getCurrentRegion() != null) {
@@ -3027,7 +3027,7 @@ public final class CraftServer implements Server {
     @Override
     public double[] getTPS() {
         // Folia start - region threading
-        ca.spottedleaf.concurrentutil.scheduler.SchedulerThreadPool.SchedulableTick task = io.papermc.paper.threadedregions.TickRegionScheduler.getCurrentTickingTask();
+        io.canvasmc.canvas.tick.ScheduledTaskThreadPool.SchedulableTick task = io.papermc.paper.threadedregions.TickRegionScheduler.getCurrentTickingTask(); // Canvas - rewrite scheduler
         if (task == null) {
             // might be on the shutdown thread, try retrieving the current region
             if (io.papermc.paper.threadedregions.TickRegionScheduler.getCurrentRegion() != null) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 049895f2eeefef19daff487f21a4708817e606d8..4e1207b6f57a3a317286c3839aea6cb82f5c0b6c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -240,6 +240,46 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public org.bukkit.event.player.PlayerResourcePackStatusEvent.Status resourcePackStatus; // Paper - more resource pack API
     private static final boolean DISABLE_CHANNEL_LIMIT = System.getProperty("paper.disableChannelLimit") != null; // Paper - add a flag to disable the channel limit
     private long lastSaveTime; // Paper - getLastPlayed replacement API
+    // Canvas start - rewrite scheduler
+    private final ca.spottedleaf.concurrentutil.collection.MultiThreadedQueue<Runnable> packetQueue = new ca.spottedleaf.concurrentutil.collection.MultiThreadedQueue<>();
+    // used only to notify tasks for packets
+    private volatile io.papermc.paper.threadedregions.RegionizedWorldData lastRegion;
+
+    public void stopAcceptingPackets() {
+        this.packetQueue.preventAdds();
+    }
+
+    public void updateRegion(final io.papermc.paper.threadedregions.RegionizedWorldData region) {
+        this.lastRegion = region;
+        if (region != null && this.hasPackets()) {
+            region.regionData.setHasPackets();
+        }
+    }
+
+    public boolean hasPackets() {
+        return !this.packetQueue.isEmpty();
+    }
+
+    public boolean executeOnePacket() {
+        final Runnable run = this.packetQueue.poll();
+        if (run != null) {
+            run.run();
+            return true;
+        }
+        return false;
+    }
+
+    public void addPacket(final Runnable runnable) {
+        if (!this.packetQueue.add(runnable)) {
+            return;
+        }
+
+        final io.papermc.paper.threadedregions.RegionizedWorldData region = this.lastRegion;
+        if (region != null) {
+            region.regionData.setHasPackets();
+        }
+    }
+    // Canvas end
 
     public CraftPlayer(CraftServer server, ServerPlayer entity) {
         super(server, entity);
