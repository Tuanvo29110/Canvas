--- a/src/main/java/ca/spottedleaf/moonrise/common/util/MoonriseCommon.java
+++ b/src/main/java/ca/spottedleaf/moonrise/common/util/MoonriseCommon.java
@@ -12,30 +_,16 @@
 
     private static final Logger LOGGER = LogUtils.getClassLogger();
 
-    public static final PrioritisedThreadPool WORKER_POOL = new PrioritisedThreadPool(
-            new Consumer<>() {
-                private final AtomicInteger idGenerator = new AtomicInteger();
-
-                @Override
-                public void accept(Thread thread) {
-                    thread.setDaemon(true);
-                    thread.setName(PlatformHooks.get().getBrand() + " Common Worker #" + this.idGenerator.getAndIncrement());
-                    thread.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
-                        @Override
-                        public void uncaughtException(final Thread thread, final Throwable throwable) {
-                            LOGGER.error("Uncaught exception in thread " + thread.getName(), throwable);
-                        }
-                    });
-                }
-            }
-    );
-    public static final long WORKER_QUEUE_HOLD_TIME = (long)(20.0e6); // 20ms
-    public static final int CLIENT_DIVISION = 0;
-    public static final PrioritisedThreadPool.ExecutorGroup RENDER_EXECUTOR_GROUP = MoonriseCommon.WORKER_POOL.createExecutorGroup(CLIENT_DIVISION, 0);
+    // Canvas start - rewrite moonrise executor
+    public static io.canvasmc.canvas.chunk.TheChunkSystem WORKER_POOL;
+    public static final long WORKER_QUEUE_HOLD_TIME = (long)(10.0e6); // 10ms
     public static final int SERVER_DIVISION = 1;
-    public static final PrioritisedThreadPool.ExecutorGroup PARALLEL_GEN_GROUP = MoonriseCommon.WORKER_POOL.createExecutorGroup(SERVER_DIVISION, 0);
-    public static final PrioritisedThreadPool.ExecutorGroup RADIUS_AWARE_GROUP = MoonriseCommon.WORKER_POOL.createExecutorGroup(SERVER_DIVISION, 0);
-    public static final PrioritisedThreadPool.ExecutorGroup LOAD_GROUP         = MoonriseCommon.WORKER_POOL.createExecutorGroup(SERVER_DIVISION, 0);
+    public static io.canvasmc.canvas.chunk.TheChunkSystem.ExecutorGroup PARALLEL_GEN_GROUP;
+    public static io.canvasmc.canvas.chunk.TheChunkSystem.ExecutorGroup RADIUS_AWARE_GROUP;
+    public static io.canvasmc.canvas.chunk.TheChunkSystem.ExecutorGroup LOAD_GROUP;
+    public static int ioWorkerCount = -1;
+    public static int chunkWorkerCount = -1;
+    // Canvas end - rewrite moonrise executor
 
     public static void adjustWorkerThreads(final int configWorkerThreads, final int configIoThreads) {
         int defaultWorkerThreads = Runtime.getRuntime().availableProcessors() / 2;
@@ -54,10 +_,25 @@
 
         final int ioThreads = Math.max(1, configIoThreads);
 
-        WORKER_POOL.adjustThreadCount(workerThreads);
+        // Canvas start - rewrite moonrise executor
+        ioWorkerCount = ioThreads;
+        chunkWorkerCount = workerThreads;
+        WORKER_POOL = new io.canvasmc.canvas.chunk.TheChunkSystem(workerThreads, new io.canvasmc.canvas.util.ThreadBuilder() {
+            @Override
+            public void accept(final Thread thread) {
+                thread.setPriority(io.canvasmc.canvas.Config.INSTANCE.chunks.threadPoolPriority);
+                thread.setDaemon(true);
+                thread.setUncaughtExceptionHandler((thread1, throwable) -> LOGGER.error("Uncaught exception in thread {}", thread1.getName(), throwable));
+                thread.setName("ls_wg worker #" + getAndIncrementId());
+            }
+        }, "ls_wg");
+        PARALLEL_GEN_GROUP = MoonriseCommon.WORKER_POOL.createExecutorGroup();
+        RADIUS_AWARE_GROUP = MoonriseCommon.WORKER_POOL.createExecutorGroup();
+        LOAD_GROUP = MoonriseCommon.WORKER_POOL.createExecutorGroup();
+
         IO_POOL.adjustThreadCount(ioThreads);
-
-        LOGGER.info(PlatformHooks.get().getBrand() + " is using " + workerThreads + " worker threads, " + ioThreads + " I/O threads");
+        LOGGER.info("Running LS ChunkSystem with {} worker threads and {} io threads", workerThreads, ioThreads);
+        // Canvas end - rewrite moonrise executor
     }
 
     public static final PrioritisedThreadPool IO_POOL = new PrioritisedThreadPool(
@@ -78,7 +_,7 @@
             }
     );
     public static final long IO_QUEUE_HOLD_TIME = (long)(100.0e6); // 100ms
-    public static final PrioritisedThreadPool.ExecutorGroup CLIENT_PROFILER_IO_GROUP = IO_POOL.createExecutorGroup(CLIENT_DIVISION, 0);
+    // Canvas - rewrite moonrise executor - remove client code
     public static final PrioritisedThreadPool.ExecutorGroup SERVER_REGION_IO_GROUP = IO_POOL.createExecutorGroup(SERVER_DIVISION, 0);
 
     public static void haltExecutors() {
