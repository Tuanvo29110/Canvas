--- a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
+++ b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
@@ -35,7 +_,7 @@
     private static final Logger LOGGER = LogUtils.getClassLogger();
     private static final int DISTANCE_ERROR = -1;
     private static final int DISTANCE_UNKNOWN = -2;
-    private static final String DOWNLOAD_PAGE = "https://papermc.io/downloads/paper";
+    private static final String DOWNLOAD_PAGE = "https://canvasmc.io/downloads"; // Canvas - Rebrand
 
     @Override
     public long getCacheTime() {
@@ -49,7 +_,7 @@
         if (build.buildNumber().isEmpty() && build.gitCommit().isEmpty()) {
             updateMessage = text("You are running a development version without access to version information", color(0xFF5300));
         } else {
-            updateMessage = getUpdateStatusMessage("PaperMC/Folia", build); // Folia
+            updateMessage = getUpdateStatusMessage("CraftCanvasMC/Canvas", build); // Folia // Canvas - Rebrand
         }
         final @Nullable Component history = this.getHistory();
 
@@ -63,14 +_,11 @@
         if (buildNumber.isPresent()) {
             distance = fetchDistanceFromSiteApi(build, buildNumber.getAsInt());
         } else {
-            final Optional<String> gitBranch = build.gitBranch();
-            final Optional<String> gitCommit = build.gitCommit();
-            if (gitBranch.isPresent() && gitCommit.isPresent()) {
-                distance = fetchDistanceFromGitHub(repo, gitBranch.get(), gitCommit.get());
-            }
+            distance = -10; // Canvas - Rebrand
         }
 
         return switch (distance) {
+            case -10 -> text("* You are running a development/local version", NamedTextColor.RED); // Canvas - Rebrand
             case DISTANCE_ERROR -> text("Error obtaining version information", NamedTextColor.YELLOW);
             case 0 -> text("You are running the latest version", NamedTextColor.GREEN);
             case DISTANCE_UNKNOWN -> text("Unknown version", NamedTextColor.YELLOW);
@@ -85,19 +_,13 @@
 
     private static int fetchDistanceFromSiteApi(final ServerBuildInfo build, final int jenkinsBuild) {
         try {
-            try (final BufferedReader reader = Resources.asCharSource(
-                URI.create("https://api.papermc.io/v2/projects/folia/versions/" + build.minecraftVersionId()).toURL(), // Folia
-                StandardCharsets.UTF_8
-            ).openBufferedStream()) {
-                final JsonObject json = new Gson().fromJson(reader, JsonObject.class);
-                final JsonArray builds = json.getAsJsonArray("builds");
-                final int latest = StreamSupport.stream(builds.spliterator(), false)
-                    .mapToInt(JsonElement::getAsInt)
-                    .max()
-                    .orElseThrow();
-                return latest - jenkinsBuild;
-            } catch (final JsonSyntaxException ex) {
-                LOGGER.error("Error parsing json from Paper's downloads API", ex);
+            final String jenkinsApiUrl = "https://jenkins.canvasmc.io/job/Canvas/lastSuccessfulBuild/api/json";
+            try (final BufferedReader reader = Resources.asCharSource(URI.create(jenkinsApiUrl).toURL(), StandardCharsets.UTF_8).openBufferedStream()) {
+                final JsonObject jsonObject = new Gson().fromJson(reader, JsonObject.class);
+                final int latestBuild = jsonObject.getAsJsonPrimitive("number").getAsInt();
+                return latestBuild - jenkinsBuild;
+            } catch (JsonSyntaxException throwable) {
+                LOGGER.error("Error parsing version information from CanvasMC's Jenkins API", throwable);
                 return DISTANCE_ERROR;
             }
         } catch (final IOException e) {
