--- a/src/main/java/com/destroystokyo/paper/Metrics.java
+++ b/src/main/java/com/destroystokyo/paper/Metrics.java
@@ -593,7 +_,7 @@
             boolean logFailedRequests = config.getBoolean("logFailedRequests", false);
             // Only start Metrics, if it's enabled in the config
             if (config.getBoolean("enabled", true)) {
-                Metrics metrics = new Metrics("Folia", serverUUID, logFailedRequests, Bukkit.getLogger()); // Folia - we have our own bstats page
+                Metrics metrics = new Metrics("Canvas", serverUUID, logFailedRequests, Bukkit.getLogger()); // Folia - we have our own bstats page // Canvas - Rebrand
 
                 metrics.addCustomChart(new Metrics.SimplePie("minecraft_version", () -> {
                     String minecraftVersion = Bukkit.getVersion();
@@ -607,11 +_,16 @@
                 final String implVersion = org.bukkit.craftbukkit.Main.class.getPackage().getImplementationVersion();
                 if (implVersion != null) {
                     final String buildOrHash = implVersion.substring(implVersion.lastIndexOf('-') + 1);
-                    paperVersion = "git-Folia-%s-%s".formatted(Bukkit.getServer().getMinecraftVersion(), buildOrHash); // Folia - we have our own bstats page
+                    // Canvas start - new versioning schem for bstats
+                    io.papermc.paper.ServerBuildInfo buildInfo = io.papermc.paper.ServerBuildInfo.buildInfo();
+                    paperVersion = "Canvas-V3-" +
+                        buildInfo.minecraftVersionName() + "-" +
+                        (buildInfo.buildNumber().isPresent() ? buildInfo.buildNumber().getAsInt() : "DEV");
+                    // Canvas end
                 } else {
                     paperVersion = "unknown";
                 }
-                metrics.addCustomChart(new Metrics.SimplePie("folia_version", () -> paperVersion)); // Folia - we have our own bstats page
+                metrics.addCustomChart(new Metrics.SimplePie("canvas_version", () -> paperVersion)); // Folia - we have our own bstats page // Canvas - Rebrand
 
                 metrics.addCustomChart(new Metrics.DrilldownPie("java_version", () -> {
                     Map<String, Map<String, Integer>> map = new HashMap<>();
@@ -676,6 +_,135 @@
 
                     return map;
                 }));
+                // Canvas start - expand metrics
+
+                metrics.addCustomChart(new Metrics.DrilldownPie("proxy", () -> {
+                    String type;
+                    boolean onlineMode;
+                    var proxiesConfig = io.papermc.paper.configuration.GlobalConfiguration.get().proxies;
+                    if (proxiesConfig.velocity.enabled) {
+                        type = "Velocity";
+                        onlineMode = proxiesConfig.velocity.onlineMode;
+                    } else if (org.spigotmc.SpigotConfig.bungee) {
+                        type = "BungeeCord";
+                        onlineMode = proxiesConfig.bungeeCord.onlineMode;
+                    } else {
+                        type = "none";
+                        onlineMode = Bukkit.getOnlineMode();
+                    }
+
+                    Map<String, Map<String, Integer>> map = new HashMap<>(2);
+
+                    // insert type and online mode as lower dimension
+                    Map<String, Integer> entry = new HashMap<>(2);
+                    entry.put(type + " (" + (onlineMode ? "online" : "offline") + ")", 1);
+
+                    // create type as higher dimension
+                    map.put(type, entry);
+
+                    return map;
+                }));
+
+                Map<String, Map<String, Integer>> javaVirtualMachineMap = new HashMap<>(2);
+                {
+                    Map<String, Integer> entry = new HashMap<>(2);
+                    String vmVendor = null;
+                    try {
+                        vmVendor = System.getProperty("java.vm.vendor");
+                    } catch (Exception ignored) {}
+                    entry.put(vmVendor == null ? "Unknown" : vmVendor, 1);
+                    String vmName = null;
+                    try {
+                        vmName = System.getProperty("java.vm.name");
+                    } catch (Exception ignored) {}
+                    javaVirtualMachineMap.put(vmName == null ? "Unknown" : vmName, entry);
+                }
+                metrics.addCustomChart(new Metrics.DrilldownPie("java_virtual_machine", () -> javaVirtualMachineMap));
+
+                metrics.addCustomChart(new Metrics.DrilldownPie("player_count", () -> {
+                    Map<String, Map<String, Integer>> map = new HashMap<>(2);
+
+                    // count players
+                    int playerCount = Bukkit.getOnlinePlayers().size();
+
+                    // insert real value as lower dimension
+                    Map<String, Integer> entry = new HashMap<>(2);
+                    entry.put(String.valueOf(playerCount), 1);
+
+                    // create buckets as higher dimension
+                    if (playerCount <= 5) {
+                        map.put(String.valueOf(playerCount), entry);
+                    } else if (playerCount > 1000) {
+                        map.put("> 1000", entry);
+                    } else {
+                        int divisor;
+                        if (playerCount <= 50) {
+                            divisor = 5;
+                        } else if (playerCount <= 100) {
+                            divisor = 10;
+                        } else if (playerCount <= 250) {
+                            divisor = 25;
+                        } else if (playerCount <= 500) {
+                            divisor = 50;
+                        } else {
+                            divisor = 100;
+                        }
+                        int start = (playerCount - 1) / divisor * divisor + 1;
+                        int end = start + divisor - 1;
+                        map.put(start + "-" + end, entry);
+                    }
+
+                    return map;
+                }));
+
+                metrics.addCustomChart(new Metrics.DrilldownPie("plugin_count", () -> {
+                    Map<String, Map<String, Integer>> map = new HashMap<>(2);
+
+                    // count plugins
+                    int pluginCount = Bukkit.getPluginManager().getPlugins().length;
+
+                    // insert real value as lower dimension
+                    Map<String, Integer> entry = new HashMap<>(2);
+                    entry.put(String.valueOf(pluginCount), 1);
+
+                    // create buckets as higher dimension
+                    if (pluginCount <= 5) {
+                        map.put(String.valueOf(pluginCount), entry);
+                    } else if (pluginCount > 1000) {
+                        map.put("> 1000", entry);
+                    } else {
+                        int divisor;
+                        if (pluginCount <= 50) {
+                            divisor = 5;
+                        } else if (pluginCount <= 100) {
+                            divisor = 10;
+                        } else if (pluginCount <= 250) {
+                            divisor = 25;
+                        } else if (pluginCount <= 500) {
+                            divisor = 50;
+                        } else {
+                            divisor = 100;
+                        }
+                        int start = (pluginCount - 1) / divisor * divisor + 1;
+                        int end = start + divisor - 1;
+                        map.put(start + "-" + end, entry);
+                    }
+
+                    return map;
+                }));
+
+                metrics.addCustomChart(new Metrics.SimplePie("netty_thread_count", () -> {
+                    // Try to get the number of Netty threads from the system property
+                    try {
+                        return System.getProperty("io.netty.eventLoopThreads");
+                    } catch (Exception ignored) {}
+                    // Otherwise, we fall back to nothing currently (reading from the Spigot configuration causes a re-read which is undesirable)
+                    return null;
+                }));
+
+                metrics.addCustomChart(new Metrics.SimplePie("ls_chunk_system_io_count", () -> String.valueOf(ca.spottedleaf.moonrise.common.util.MoonriseCommon.ioWorkerCount)));
+                metrics.addCustomChart(new Metrics.SimplePie("ls_chunk_system_worker_count", () -> String.valueOf(ca.spottedleaf.moonrise.common.util.MoonriseCommon.chunkWorkerCount)));
+                // Canvas end
             }
 
         }
