--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -139,10 +_,13 @@
         int index = 0;
         ChunkAccess chunk = this.getHandle(ChunkStatus.FULL);
 
-        BlockState[] states = new BlockState[chunk.blockEntities.size()];
-        for (BlockPos pos : chunk.blockEntities.keySet()) {
-            states[index++] = CraftBlock.at(this.level, pos).getState(useSnapshot);
+        // Canvas start - optimize block entity fetching
+        net.minecraft.world.level.block.entity.BlockEntity[] blockEntities = chunk.getAllBlockEntities();
+        BlockState[] states = new BlockState[blockEntities.length];
+        for (net.minecraft.world.level.block.entity.BlockEntity blockEntity : blockEntities) {
+            states[index++] = CraftBlock.at(this.level, blockEntity.getBlockPos()).getState(useSnapshot);
         }
+        // Canvas end - optimize block entity fetching
 
         return states;
     }
@@ -157,8 +_,11 @@
         ChunkAccess chunk = this.getHandle(ChunkStatus.FULL);
 
         List<BlockState> states = new ArrayList<>();
-        for (BlockPos pos : chunk.blockEntities.keySet()) {
-            Block block = CraftBlock.at(this.level, pos);
+        // Canvas start - optimize block entity fetching
+        net.minecraft.world.level.block.entity.BlockEntity[] blockEntities = chunk.getAllBlockEntities();
+        for (net.minecraft.world.level.block.entity.BlockEntity blockEntity : blockEntities) {
+            Block block = CraftBlock.at(this.level, blockEntity.getBlockPos());
+        // Canvas end - optimize block entity fetching
             if (blockPredicate.test(block)) {
                 states.add(block.getState(useSnapshot));
             }
