--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -227,6 +_,46 @@
     private BorderChangeListener clientWorldBorderListener = this.createWorldBorderListener();
     public org.bukkit.event.player.PlayerResourcePackStatusEvent.Status resourcePackStatus; // Paper - more resource pack API
     private long lastSaveTime; // Paper - getLastPlayed replacement API
+    // Canvas start - rewrite scheduler
+    private final ca.spottedleaf.concurrentutil.collection.MultiThreadedQueue<Runnable> packetQueue = new ca.spottedleaf.concurrentutil.collection.MultiThreadedQueue<>();
+    // used only to notify tasks for packets
+    private volatile io.papermc.paper.threadedregions.RegionizedWorldData lastRegion;
+
+    public void stopAcceptingPackets() {
+        this.packetQueue.preventAdds();
+    }
+
+    public void updateRegion(final io.papermc.paper.threadedregions.RegionizedWorldData region) {
+        this.lastRegion = region;
+        if (region != null && this.hasPackets()) {
+            region.regionData.setHasPackets();
+        }
+    }
+
+    public boolean hasPackets() {
+        return !this.packetQueue.isEmpty();
+    }
+
+    public boolean executeOnePacket() {
+        final Runnable run = this.packetQueue.poll();
+        if (run != null) {
+            run.run();
+            return true;
+        }
+        return false;
+    }
+
+    public void addPacket(final Runnable runnable) {
+        if (!this.packetQueue.add(runnable)) {
+            return;
+        }
+
+        final io.papermc.paper.threadedregions.RegionizedWorldData region = this.lastRegion;
+        if (region != null) {
+            region.regionData.setHasPackets();
+        }
+    }
+    // Canvas end
 
     public CraftPlayer(CraftServer server, ServerPlayer entity) {
         super(server, entity);
