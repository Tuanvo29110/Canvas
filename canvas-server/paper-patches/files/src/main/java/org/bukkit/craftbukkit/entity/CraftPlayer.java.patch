--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -220,7 +_,7 @@
     private long lastPlayed = 0;
     private boolean hasPlayedBefore = false;
     private final ConversationTracker conversationTracker = new ConversationTracker();
-    private final Map<UUID, Set<WeakReference<Plugin>>> invertedVisibilityEntities = new HashMap<>();
+    private final Map<UUID, Set<WeakReference<Plugin>>> invertedVisibilityEntities = new it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<>(); // Canvas - optimized collection
     private final Set<UUID> unlistedEntities = new HashSet<>(); // Paper - Add Listing API for Player
     private static final WeakHashMap<Plugin, WeakReference<Plugin>> pluginWeakReferences = new WeakHashMap<>();
     private int hash = 0;
@@ -1993,6 +_,8 @@
         Preconditions.checkArgument(entity != null, "Entity hidden cannot be null");
         if (this.getHandle().connection == null) return;
         if (this.equals(entity)) return;
+        if (!this.getHandle().supressTrackerForLogin && this.getHandle().valid) ca.spottedleaf.moonrise.common.util.TickThread.ensureTickThread(this.getHandle(), "Cannot hide entity asynchronously"); // Canvas - region threading
+        if (!this.getHandle().supressTrackerForLogin && this.getHandle().valid) ca.spottedleaf.moonrise.common.util.TickThread.ensureTickThread(((CraftEntity) entity).getHandle(), "Cannot mark entity as hidden asynchronously"); // Canvas - region threading
 
         boolean shouldHide;
         if (entity.isVisibleByDefault()) {
@@ -2080,6 +_,8 @@
         Preconditions.checkArgument(entity != null, "Entity show cannot be null");
         if (this.getHandle().connection == null) return;
         if (this.equals(entity)) return;
+        if (!this.getHandle().supressTrackerForLogin && this.getHandle().valid) ca.spottedleaf.moonrise.common.util.TickThread.ensureTickThread(this.getHandle(), "Cannot show entity asynchronously"); // Canvas - region threading
+        if (!this.getHandle().supressTrackerForLogin && this.getHandle().valid) ca.spottedleaf.moonrise.common.util.TickThread.ensureTickThread(((CraftEntity) entity).getHandle(), "Cannot mark entity as shown asynchronously"); // Canvas - region threading
 
         boolean shouldShow;
         if (entity.isVisibleByDefault()) {
@@ -2219,8 +_,14 @@
 
     @Override
     public boolean canSee(org.bukkit.entity.Entity entity) {
-        return this.equals(entity) || entity.isVisibleByDefault() ^ this.invertedVisibilityEntities.containsKey(entity.getUniqueId()); // SPIGOT-7312: Can always see self
-    }
+        return this.equals(entity) || entity.isVisibleByDefault() ^ (!invertedVisibilityEntities.isEmpty() && this.invertedVisibilityEntities.containsKey(entity.getUniqueId())); // SPIGOT-7312: Can always see self // Leaf - optimize canSee checks
+    }
+    // Leaf start - optimize canSee checks
+
+    public boolean canSeeChunkMapUpdatePlayer(org.bukkit.entity.Entity entity) {
+        return entity.isVisibleByDefault() ^ (!invertedVisibilityEntities.isEmpty() && this.invertedVisibilityEntities.containsKey(entity.getUniqueId())); // SPIGOT-7312: Can always see self // SparklyPaper - optimize canSee checks
+    }
+    // Leaf end - optimize canSee checks
 
     public boolean canSeePlayer(UUID uuid) {
         org.bukkit.entity.Entity entity = this.getServer().getPlayer(uuid);
