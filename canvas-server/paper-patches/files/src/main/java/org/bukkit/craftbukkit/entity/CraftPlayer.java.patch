--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -220,7 +_,7 @@
     private long lastPlayed = 0;
     private boolean hasPlayedBefore = false;
     private final ConversationTracker conversationTracker = new ConversationTracker();
-    private final Map<UUID, Set<WeakReference<Plugin>>> invertedVisibilityEntities = new HashMap<>();
+    private final Map<UUID, Set<WeakReference<Plugin>>> invertedVisibilityEntities = new it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<>(); // Canvas - optimized collection
     private final Set<UUID> unlistedEntities = new HashSet<>(); // Paper - Add Listing API for Player
     private static final WeakHashMap<Plugin, WeakReference<Plugin>> pluginWeakReferences = new WeakHashMap<>();
     private int hash = 0;
@@ -230,6 +_,56 @@
     private CraftWorldBorder clientWorldBorder = null;
     private BorderChangeListener clientWorldBorderListener = this.createWorldBorderListener();
     private long lastSaveTime; // Paper - getLastPlayed replacement API
+    // Canvas start - rewrite scheduler
+    private final ca.spottedleaf.concurrentutil.collection.MultiThreadedQueue<Runnable> packetTaskQueue = new ca.spottedleaf.concurrentutil.collection.MultiThreadedQueue<>();
+    private io.papermc.paper.threadedregions.RegionizedWorldData worldDataRef = null;
+
+    /**
+     * Executes a task from the packet processing queue
+     * @return true if the queue has more tasks, false otherwise
+     */
+    public boolean executeOnePacketTask() {
+        Runnable task = packetTaskQueue.poll();
+        if (task == null) {
+            return false;
+        }
+        task.run();
+        return true;
+    }
+
+    /**
+     * Pushes a task to the packet queue
+     * @param task the packet
+     */
+    public void pushPacket(Runnable task) {
+        if (!this.packetTaskQueue.add(task)) return;
+        if (worldDataRef != null) {
+            // really shouldn't be null, but we check anyway just in the case it is
+            // we also drain packets right before entity scheduler tick, so no
+            // point in trying to send to the entity scheduler if the region is null,
+            // since it makes no fucking sense since it will do literally the same thing
+            worldDataRef.regionData.setHasPackets();
+        }
+    }
+
+    /**
+     * Returns if the player has tasks or not
+     * @return if the task queue has packets
+     */
+    public boolean hasPackets() {
+        return !this.packetTaskQueue.isEmpty();
+    }
+
+    /**
+     * Realistically, this isn't crucial. This *can* be null safely, as worst case senario
+     * this is forever as null, which shouldn't happen at all ever, but it doesn't entirely
+     * make that much of a difference
+     * @param worldDataRef the current regionized world data for this player
+     */
+    public void setRegionData(final io.papermc.paper.threadedregions.RegionizedWorldData worldDataRef) {
+        this.worldDataRef = worldDataRef;
+    }
+    // Canvas end
 
     public CraftPlayer(CraftServer server, ServerPlayer entity) {
         super(server, entity);
@@ -2219,8 +_,14 @@
 
     @Override
     public boolean canSee(org.bukkit.entity.Entity entity) {
-        return this.equals(entity) || entity.isVisibleByDefault() ^ this.invertedVisibilityEntities.containsKey(entity.getUniqueId()); // SPIGOT-7312: Can always see self
-    }
+        return this.equals(entity) || entity.isVisibleByDefault() ^ (!invertedVisibilityEntities.isEmpty() && this.invertedVisibilityEntities.containsKey(entity.getUniqueId())); // SPIGOT-7312: Can always see self // Leaf - optimize canSee checks
+    }
+    // Leaf start - optimize canSee checks
+
+    public boolean canSeeChunkMapUpdatePlayer(org.bukkit.entity.Entity entity) {
+        return entity.isVisibleByDefault() ^ (!invertedVisibilityEntities.isEmpty() && this.invertedVisibilityEntities.containsKey(entity.getUniqueId())); // SPIGOT-7312: Can always see self // SparklyPaper - optimize canSee checks
+    }
+    // Leaf end - optimize canSee checks
 
     public boolean canSeePlayer(UUID uuid) {
         org.bukkit.entity.Entity entity = this.getServer().getPlayer(uuid);
