--- a/src/main/java/io/papermc/paper/threadedregions/EntityScheduler.java
+++ b/src/main/java/io/papermc/paper/threadedregions/EntityScheduler.java
@@ -97,7 +_,11 @@
      * @return whether this scheduler is retired.
      */
     public boolean isRetired() {
-        return this.tickCount == RETIRED_TICK_COUNT;
+        // Canvas start - Threaded Regions
+        synchronized (this.stateLock) {
+            return this.tickCount == RETIRED_TICK_COUNT;
+        }
+        // Canvas end
     }
 
     /**
@@ -200,7 +_,7 @@
         final List<ScheduledTask> toRun;
         synchronized (this.stateLock) {
             if (this.tickCount == RETIRED_TICK_COUNT) {
-                throw new IllegalStateException("Ticking retired scheduler");
+                return; // Canvas - the entity can be removed concurrently, do not crash the server because of this.
             }
             ++this.tickCount;
 
@@ -224,13 +_,14 @@
 
         // Note: It is allowed for the tasks executed to retire the entity in a given task.
         for (int i = 0, len = this.currentlyExecuting.size(); i < len; ++i) {
-            if (!TickThread.isTickThreadFor(thisEntity)) {
+            if (!io.canvasmc.canvas.region.ServerRegions.isTickThreadFor(thisEntity)) { // Canvas - Threaded Regions
                 // tp has been queued sync by one of the tasks
                 // in this case, we need to delay the tasks for next tick
                 break;
             }
             final ScheduledTask task = this.currentlyExecuting.pollFirst();
 
+            if (task == null) break; // Canvas - break if null
             if (this.tickCount != RETIRED_TICK_COUNT) {
                 ((Consumer<Entity>)task.run).accept(thisEntity);
             } else {
