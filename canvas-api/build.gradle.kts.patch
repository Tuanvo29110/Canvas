--- a/paper-api/build.gradle.kts
+++ b/paper-api/build.gradle.kts
@@ -90,16 +_,34 @@
     testRuntimeOnly("org.junit.platform:junit-platform-launcher")
 }
 
-val generatedDir: java.nio.file.Path = layout.projectDirectory.dir("src/generated/java").asFile.toPath()
+val generatedDir: java.nio.file.Path = layout.projectDirectory.dir("src/generated/main/java").asFile.toPath()
+val paperGeneratedDir: java.nio.file.Path = rootProject.layout.projectDirectory.dir("paper-api/src/generated/java").asFile.toPath()
 idea {
     module {
         generatedSourceDirs.add(generatedDir.toFile())
+        generatedSourceDirs.add(paperGeneratedDir.toFile())
     }
 }
 sourceSets {
     main {
         java {
             srcDir(generatedDir)
+            srcDir(paperGeneratedDir)
+            srcDir(file("../paper-api/src/main/java"))
+        }
+        resources {
+            srcDir(file("../paper-api/src/main/resources"))
+            srcDir("src/generated/main/resources")
+        }
+    }
+    test {
+        java {
+            srcDir("src/generated/test/java")
+            srcDir(file("../paper-api/src/test/java"))
+        }
+        resources {
+            srcDir(file("../paper-api/src/test/resources"))
+            srcDir("src/generated/test/resources")
         }
     }
 }
@@ -134,6 +_,32 @@
             suppressPomMetadataWarningsFor(it)
         }
         from(components["java"])
+        // Canvas start - add more info to the publication
+        pom {
+            name.set("canvas-api")
+            description.set("API bundle for the Canvas Minecraft server software")
+            url.set("https://github.com/CraftCanvasMC/Canvas")
+            licenses {
+                license {
+                    name.set("GPL-3.0")
+                    url.set("https://github.com/CraftCanvasMC/Canvas/blob/HEAD/LICENSE")
+                    distribution.set("repo")
+                }
+            }
+            developers {
+                developer {
+                    id.set("canvas-team")
+                    name.set("Canvas Team")
+                    organization.set("CanvasMC")
+                    organizationUrl.set("https://canvasmc.io")
+                    roles.add("developer")
+                }
+            }
+            scm {
+                url.set("https://github.com/CraftCanvasMC/Canvas")
+            }
+        }
+        // Canvas end - add more info to the publication
     }
 }
 
@@ -158,6 +_,11 @@
     }
 }
 
+tasks.withType<JavaCompile> {
+    val compilerArgs = options.compilerArgs
+    compilerArgs.add("--add-modules=jdk.incubator.vector")
+}
+
 abstract class Services {
     @get:Inject
     abstract val fileSystemOperations: FileSystemOperations
@@ -166,7 +_,9 @@
 
 tasks.withType<Javadoc>().configureEach {
     val options = options as StandardJavadocDocletOptions
-    options.overview = "src/main/javadoc/overview.html"
+    options.addStringOption("-add-modules", "jdk.incubator.vector")
+    options.addStringOption("Xdoclint:none", "-quiet")
+    options.overview = "../paper-api/src/main/javadoc/overview.html"
     options.use()
     options.isDocFilesSubDirs = true
     options.links(
@@ -199,11 +_,11 @@
     }
 
     // workaround for https://github.com/gradle/gradle/issues/4046
-    inputs.dir("src/main/javadoc").withPropertyName("javadoc-sourceset")
+    inputs.dir("../paper-api/src/main/javadoc").withPropertyName("javadoc-sourceset")
     val fsOps = services.fileSystemOperations
     doLast {
         fsOps.copy {
-            from("src/main/javadoc") {
+            from("../paper-api/src/main/javadoc") {
                 include("**/doc-files/**")
             }
             into("build/docs/javadoc")
