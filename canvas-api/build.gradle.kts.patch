--- a/folia-api/build.gradle.kts
+++ b/folia-api/build.gradle.kts
@@ -101,17 +_,21 @@
         java {
             srcDir(generatedDir)
             srcDir(file("../paper-api/src/main/java"))
+            srcDir(file("../folia-api/src/main/java"))
         }
         resources {
             srcDir(file("../paper-api/src/main/resources"))
+            srcDir(file("../folia-api/src/main/resources"))
         }
     }
     test {
         java {
             srcDir(file("../paper-api/src/test/java"))
+            srcDir(file("../folia-api/src/test/java"))
         }
         resources {
             srcDir(file("../paper-api/src/test/resources"))
+            srcDir(file("../folia-api/src/test/resources"))
         }
     }
 }
@@ -146,6 +_,32 @@
             suppressPomMetadataWarningsFor(it)
         }
         from(components["java"])
+        // Canvas start - add more info to the publication
+        pom {
+            name.set("canvas-api")
+            description.set("API bundle for the Canvas Minecraft server software")
+            url.set("https://github.com/CraftCanvasMC/Canvas")
+            licenses {
+                license {
+                    name.set("GPL-3.0")
+                    url.set("https://github.com/CraftCanvasMC/Canvas/blob/HEAD/LICENSE")
+                    distribution.set("repo")
+                }
+            }
+            developers {
+                developer {
+                    id.set("canvas-team")
+                    name.set("Canvas Team")
+                    organization.set("CanvasMC")
+                    organizationUrl.set("https://canvasmc.io")
+                    roles.add("developer")
+                }
+            }
+            scm {
+                url.set("https://github.com/CraftCanvasMC/Canvas")
+            }
+        }
+        // Canvas end - add more info to the publication
     }
 }
 
@@ -170,6 +_,11 @@
     }
 }
 
+tasks.withType<JavaCompile> {
+    val compilerArgs = options.compilerArgs
+    compilerArgs.add("--add-modules=jdk.incubator.vector")
+}
+
 abstract class Services {
     @get:Inject
     abstract val fileSystemOperations: FileSystemOperations
@@ -178,6 +_,8 @@
 
 tasks.withType<Javadoc>().configureEach {
     val options = options as StandardJavadocDocletOptions
+    options.addStringOption("-add-modules", "jdk.incubator.vector")
+    options.addStringOption("Xdoclint:none", "-quiet")
     options.overview = "../paper-api/src/main/javadoc/overview.html"
     options.use()
     options.isDocFilesSubDirs = true
