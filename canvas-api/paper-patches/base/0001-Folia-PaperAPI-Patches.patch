From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Generated Source <noreply+automated@papermc.io>
Date: Mon, 25 Aug 2025 05:39:41 +0200
Subject: [PATCH] Folia PaperAPI Patches

Patch generated from https://github.com/PaperMC/Folia/commit/890349d47e76620de9eb51ac2443d451dccd27fc

diff --git a/src/main/java/co/aikar/timings/Timings.java b/src/main/java/co/aikar/timings/Timings.java
index 95b7cdf0677ef71e6885fa78aa5c75bb500f5f53..89017af09ce32e7a66014fc3aeb50155921252a5 100644
--- a/src/main/java/co/aikar/timings/Timings.java
+++ b/src/main/java/co/aikar/timings/Timings.java
@@ -145,6 +145,7 @@ public final class Timings {
      * @param enabled Should timings be reported
      */
     public static void setTimingsEnabled(boolean enabled) {
+        enabled = false; // Folia - region threading - disable timings
         if (enabled && !warnedAboutDeprecationOnEnable) {
             Bukkit.getLogger().severe(PlainTextComponentSerializer.plainText().serialize(deprecationMessage()));
             warnedAboutDeprecationOnEnable = true;
diff --git a/src/main/java/io/papermc/paper/plugin/configuration/PluginMeta.java b/src/main/java/io/papermc/paper/plugin/configuration/PluginMeta.java
index a399f87e925a72aac91b3066317c3efb61c0421a..0100108fd87268d225a60e51eaf87071b359ef6f 100644
--- a/src/main/java/io/papermc/paper/plugin/configuration/PluginMeta.java
+++ b/src/main/java/io/papermc/paper/plugin/configuration/PluginMeta.java
@@ -189,4 +189,12 @@ public interface PluginMeta extends Namespaced {
     default String namespace() {
         return this.getName().toLowerCase(Locale.ROOT);
     }
+    
+    // Folia start - block plugins not marked as supported
+    /**
+     * Returns whether the plugin has been marked to be compatible with regionised threading as provided
+     * by Folia
+     */
+    public boolean isFoliaSupported();
+    // Folia end - block plugins not marked as supported
 }
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 3bde4ad79ade5aae18e9073307f637717e8dd9e3..85b778980e762835ac278528087e91b2e3effb43 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -3000,6 +3000,42 @@ public final class Bukkit {
         return server.isGlobalTickThread();
     }
     // Paper end - Folia region threading API
+    // Folia start - region TPS API
+    /**
+     * Gets the TPS from the region which owns the specified location, or {@code null} if no region owns
+     * the specified location.
+     *
+     * @param location The location for which to get the TPS
+     * @return TPS (5s, 15s, 1m, 5m, 15m), or null if the region doesn't exist
+     */
+    public static double @Nullable [] getRegionTPS(@NotNull Location location) {
+        return server.getRegionTPS(location);
+    }
+
+    /**
+     * Gets the TPS from the region which owns the specified chunk, or {@code null} if no region owns
+     * the specified location.
+     *
+     * @param chunk - The specified chunk
+     * @return TPS (5s, 15s, 1m, 5m, 15m), or null if the region doesn't exist
+     */
+    public static double @Nullable [] getRegionTPS(@NotNull Chunk chunk) {
+        return server.getRegionTPS(chunk);
+    }
+
+    /**
+     * Gets the TPS from the region which owns the specified chunk, or {@code null} if no region owns
+     * the specified location.
+     *
+     * @param world - World containing the chunk
+     * @param chunkX - X-coordinate of the chunk
+     * @param chunkZ - Z-coordinate of the chunk
+     * @return TPS (5s, 15s, 1m, 5m, 15m), or null if the region doesn't exist
+     */
+    public static double @Nullable [] getRegionTPS(@NotNull World world, int chunkX, int chunkZ) {
+        return server.getRegionTPS(world, chunkX, chunkZ);
+    }
+    // Folia end - region TPS API
 
     /**
      * @deprecated All methods on this class have been deprecated, see the individual methods for replacements.
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 9bab00ab10c78908090c8a1a12d4c84e9324b08b..a0540d7de5c2536aed5231f9e67b73345817921d 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -2723,4 +2723,34 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      */
     void allowPausing(@NotNull org.bukkit.plugin.Plugin plugin, boolean value);
     // Paper end - API to check if the server is sleeping
+    // Folia start - region TPS API
+    /**
+     * Gets the TPS from the region which owns the specified location, or {@code null} if no region owns
+     * the specified location.
+     *
+     * @param location The location for which to get the TPS
+     * @return TPS (5s, 15s, 1m, 5m, 15m), or null if the region doesn't exist
+     */
+    double @Nullable [] getRegionTPS(@NotNull Location location);
+
+    /**
+     * Gets the TPS from the region which owns the specified chunk, or {@code null} if no region owns
+     * the specified location.
+     *
+     * @param chunk - The specified chunk
+     * @return TPS (5s, 15s, 1m, 5m, 15m), or null if the region doesn't exist
+     */
+    double @Nullable [] getRegionTPS(@NotNull Chunk chunk);
+
+    /**
+     * Gets the TPS from the region which owns the specified chunk, or {@code null} if no region owns
+     * the specified location.
+     *
+     * @param world - World containing the chunk
+     * @param chunkX - X-coordinate of the chunk
+     * @param chunkZ - Z-coordinate of the chunk
+     * @return TPS (5s, 15s, 1m, 5m, 15m), or null if the region doesn't exist
+     */
+    double @Nullable [] getRegionTPS(@NotNull World world, int chunkX, int chunkZ);
+    // Folia end - region TPS API
 }
diff --git a/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java b/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
index 0324ec640d4dd6b1f6287fc2ce9e8a0b3b87d5bf..de5d5399e7f9cf56439ada32f3cc7df3a2e95ef4 100644
--- a/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
+++ b/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
@@ -267,6 +267,19 @@ public final class PluginDescriptionFile implements io.papermc.paper.plugin.conf
         return this.paperPluginLoader;
     }
     // Paper end - plugin loader api
+    // Folia start - block plugins not marked as supported
+    private String foliaSupported;
+    private static final String FOLIA_SUPPORTED_KEY = "folia-supported";
+
+    /**
+     * Returns whether the plugin has been marked to be compatible with regionised threading as provided
+     * by Folia
+     */
+    @Override
+    public boolean isFoliaSupported() {
+        return this.foliaSupported != null && this.foliaSupported.equalsIgnoreCase("true");
+    }
+    // Folia end - block plugins not marked as supported
     // Paper start - oh my goddddd
     /**
      * Don't use this.
@@ -1267,6 +1280,11 @@ public final class PluginDescriptionFile implements io.papermc.paper.plugin.conf
         if (map.get("prefix") != null) {
             prefix = map.get("prefix").toString();
         }
+        // Folia start - block plugins not marked as supported
+        if (map.get(FOLIA_SUPPORTED_KEY) != null) {
+            foliaSupported = map.get(FOLIA_SUPPORTED_KEY).toString();
+        }
+        // Folia end - block plugins not marked as supported
     }
 
     @NotNull
@@ -1343,6 +1361,11 @@ public final class PluginDescriptionFile implements io.papermc.paper.plugin.conf
         if (prefix != null) {
             map.put("prefix", prefix);
         }
+        // Folia start - block plugins not marked as supported
+        if (foliaSupported != null) {
+            map.put(FOLIA_SUPPORTED_KEY, foliaSupported);
+        }
+        // Folia end - block plugins not marked as supported
 
         return map;
     }
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index dfc2d76403993640e6283f25f9f3647bb6d1a30c..d1f1e5adbd18800aeb44bf71f4a002c674fc958d 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -557,9 +557,9 @@ public final class SimplePluginManager implements PluginManager {
             }
 
             try {
-                server.getScheduler().cancelTasks(plugin);
+                server.getAsyncScheduler().cancelTasks(plugin); // Folia - new schedulers
             } catch (Throwable ex) {
-                handlePluginException("Error occurred (in the plugin loader) while cancelling tasks for "
+                handlePluginException("Error occurred (in the plugin loader) while cancelling async tasks for " // Folia - new schedulers
                         + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin); // Paper
             }
 
diff --git a/src/main/java/org/bukkit/scheduler/BukkitScheduler.java b/src/main/java/org/bukkit/scheduler/BukkitScheduler.java
index 5c277ac7a61df8106f7c13a1ad8ccb1509338699..446c115f19c4dde0d5e269f8d120bc51ad3898e0 100644
--- a/src/main/java/org/bukkit/scheduler/BukkitScheduler.java
+++ b/src/main/java/org/bukkit/scheduler/BukkitScheduler.java
@@ -7,6 +7,15 @@ import java.util.function.Consumer;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
+// Folia start - add new schedulers
+/**
+ * @deprecated Use one of {@link io.papermc.paper.threadedregions.scheduler.RegionScheduler},
+ *                        {@link io.papermc.paper.threadedregions.scheduler.AsyncScheduler},
+ *                        {@link io.papermc.paper.threadedregions.scheduler.EntityScheduler},
+ *                        or {@link io.papermc.paper.threadedregions.scheduler.GlobalRegionScheduler}
+ */
+// Folia end - add new schedulers
+@Deprecated
 public interface BukkitScheduler {
 
     /**
